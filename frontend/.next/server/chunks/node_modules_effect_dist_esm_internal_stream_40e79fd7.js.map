{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"stream.js","sources":["file://D%3A/Desktop/project/Business-Directory/Business-Directory/frontend/node_modules/effect/src/internal/stream.ts"],"sourcesContent":["import * as Cause from \"../Cause.js\"\nimport type * as Channel from \"../Channel.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Deferred from \"../Deferred.js\"\nimport * as Duration from \"../Duration.js\"\nimport * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Exit from \"../Exit.js\"\nimport * as Fiber from \"../Fiber.js\"\nimport * as FiberRef from \"../FiberRef.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constTrue, dual, identity, pipe } from \"../Function.js\"\nimport * as Layer from \"../Layer.js\"\nimport * as MergeDecision from \"../MergeDecision.js\"\nimport * as Option from \"../Option.js\"\nimport type * as Order from \"../Order.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty, type Predicate, type Refinement } from \"../Predicate.js\"\nimport * as PubSub from \"../PubSub.js\"\nimport * as Queue from \"../Queue.js\"\nimport * as RcRef from \"../RcRef.js\"\nimport * as Ref from \"../Ref.js\"\nimport * as Runtime from \"../Runtime.js\"\nimport * as Schedule from \"../Schedule.js\"\nimport * as Scope from \"../Scope.js\"\nimport type * as Sink from \"../Sink.js\"\nimport type * as Stream from \"../Stream.js\"\nimport type * as Emit from \"../StreamEmit.js\"\nimport * as HaltStrategy from \"../StreamHaltStrategy.js\"\nimport type * as Take from \"../Take.js\"\nimport * as TPubSub from \"../TPubSub.js\"\nimport * as TQueue from \"../TQueue.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport * as Tuple from \"../Tuple.js\"\nimport type { NoInfer, TupleOf } from \"../Types.js\"\nimport * as channel from \"./channel.js\"\nimport * as channelExecutor from \"./channel/channelExecutor.js\"\nimport * as MergeStrategy from \"./channel/mergeStrategy.js\"\nimport * as core from \"./core-stream.js\"\nimport * as doNotation from \"./doNotation.js\"\nimport { RingBuffer } from \"./ringBuffer.js\"\nimport * as _sink from \"./sink.js\"\nimport * as DebounceState from \"./stream/debounceState.js\"\nimport * as emit from \"./stream/emit.js\"\nimport * as haltStrategy from \"./stream/haltStrategy.js\"\nimport * as Handoff from \"./stream/handoff.js\"\nimport * as HandoffSignal from \"./stream/handoffSignal.js\"\nimport * as pull from \"./stream/pull.js\"\nimport * as SinkEndReason from \"./stream/sinkEndReason.js\"\nimport * as ZipAllState from \"./stream/zipAllState.js\"\nimport * as ZipChunksState from \"./stream/zipChunksState.js\"\nimport * as InternalTake from \"./take.js\"\nimport * as InternalTracer from \"./tracer.js\"\n\n/** @internal */\nconst StreamSymbolKey = \"effect/Stream\"\n\n/** @internal */\nexport const StreamTypeId: Stream.StreamTypeId = Symbol.for(\n  StreamSymbolKey\n) as Stream.StreamTypeId\n\n/** @internal */\nconst streamVariance = {\n  _R: (_: never) => _,\n  _E: (_: never) => _,\n  _A: (_: never) => _\n}\n\n/** @internal */\nexport class StreamImpl<out A, out E = never, out R = never> implements Stream.Stream<A, E, R> {\n  readonly [StreamTypeId] = streamVariance\n  constructor(\n    readonly channel: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R>\n  ) {\n  }\n\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const isStream = (u: unknown): u is Stream.Stream<unknown, unknown, unknown> =>\n  hasProperty(u, StreamTypeId) || Effect.isEffect(u)\n\n/** @internal */\nexport const DefaultChunkSize = 4096\n\n/** @internal */\nexport const accumulate = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n  chunks(accumulateChunks(self))\n\n/** @internal */\nexport const accumulateChunks = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, E, R> => {\n  const accumulator = (\n    s: Chunk.Chunk<A>\n  ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, void, unknown> =>\n    core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const next = Chunk.appendAll(s, input)\n        return core.flatMap(\n          core.write(next),\n          () => accumulator(next)\n        )\n      },\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n  return new StreamImpl(core.pipeTo(toChannel(self), accumulator(Chunk.empty())))\n}\n\n/** @internal */\nexport const acquireRelease = <A, E, R, R2, X>(\n  acquire: Effect.Effect<A, E, R>,\n  release: (resource: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n): Stream.Stream<A, E, R | R2> => scoped(Effect.acquireRelease(acquire, release))\n\n/** @internal */\nexport const aggregate = dual<\n  <B, A, A2, E2, R2>(\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E2 | E, R2 | R>,\n  <A, E, R, B, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>\n  ) => Stream.Stream<B, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, B, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>\n  ): Stream.Stream<B, E2 | E, R2 | R> => aggregateWithin(self, sink, Schedule.forever)\n)\n\n/** @internal */\nexport const aggregateWithin = dual<\n  <B, A, A2, E2, R2, C, R3>(\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E2 | E, R2 | R3 | R>,\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ) => Stream.Stream<B, E2 | E, R2 | R3 | R>\n>(\n  3,\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ): Stream.Stream<B, E2 | E, R2 | R3 | R> =>\n    filterMap(\n      aggregateWithinEither(self, sink, schedule),\n      (_) =>\n        Either.match(_, {\n          onLeft: Option.none,\n          onRight: Option.some\n        })\n    )\n)\n\n/** @internal */\nexport const aggregateWithinEither = dual<\n  <B, A, A2, E2, R2, C, R3>(\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Either.Either<B, C>, E2 | E, R2 | R3 | R>,\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ) => Stream.Stream<Either.Either<B, C>, E2 | E, R2 | R3 | R>\n>(\n  3,\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ): Stream.Stream<Either.Either<B, C>, E2 | E, R2 | R3 | R> => {\n    const layer = Effect.all([\n      Handoff.make<HandoffSignal.HandoffSignal<A, E | E2>>(),\n      Ref.make<SinkEndReason.SinkEndReason>(SinkEndReason.ScheduleEnd),\n      Ref.make(Chunk.empty<A | A2>()),\n      Schedule.driver(schedule),\n      Ref.make(false),\n      Ref.make(false)\n    ])\n    return fromEffect(layer).pipe(\n      flatMap(([handoff, sinkEndReason, sinkLeftovers, scheduleDriver, consumed, endAfterEmit]) => {\n        const handoffProducer: Channel.Channel<never, Chunk.Chunk<A>, never, E | E2, unknown, unknown> = core\n          .readWithCause({\n            onInput: (input: Chunk.Chunk<A>) =>\n              core.flatMap(\n                core.fromEffect(pipe(\n                  handoff,\n                  Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(HandoffSignal.emit(input)),\n                  Effect.when(() => Chunk.isNonEmpty(input))\n                )),\n                () => handoffProducer\n              ),\n            onFailure: (cause) =>\n              core.fromEffect(\n                Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                  handoff,\n                  HandoffSignal.halt(cause)\n                )\n              ),\n            onDone: () =>\n              core.fromEffect(\n                Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                  handoff,\n                  HandoffSignal.end(SinkEndReason.UpstreamEnd)\n                )\n              )\n          })\n        const handoffConsumer: Channel.Channel<Chunk.Chunk<A | A2>, unknown, E | E2, unknown, void, unknown> = pipe(\n          Ref.getAndSet(sinkLeftovers, Chunk.empty()),\n          Effect.flatMap((leftovers) => {\n            if (Chunk.isNonEmpty(leftovers)) {\n              return pipe(\n                Ref.set(consumed, true),\n                Effect.zipRight(Effect.succeed(pipe(\n                  core.write(leftovers),\n                  core.flatMap(() => handoffConsumer)\n                )))\n              )\n            }\n            return pipe(\n              Handoff.take(handoff),\n              Effect.map((signal) => {\n                switch (signal._tag) {\n                  case HandoffSignal.OP_EMIT: {\n                    return pipe(\n                      core.fromEffect(Ref.set(consumed, true)),\n                      channel.zipRight(core.write(signal.elements)),\n                      channel.zipRight(core.fromEffect(Ref.get(endAfterEmit))),\n                      core.flatMap((bool) => bool ? core.void : handoffConsumer)\n                    )\n                  }\n                  case HandoffSignal.OP_HALT: {\n                    return core.failCause(signal.cause)\n                  }\n                  case HandoffSignal.OP_END: {\n                    if (signal.reason._tag === SinkEndReason.OP_SCHEDULE_END) {\n                      return pipe(\n                        Ref.get(consumed),\n                        Effect.map((bool) =>\n                          bool ?\n                            core.fromEffect(\n                              pipe(\n                                Ref.set(sinkEndReason, SinkEndReason.ScheduleEnd),\n                                Effect.zipRight(Ref.set(endAfterEmit, true))\n                              )\n                            ) :\n                            pipe(\n                              core.fromEffect(\n                                pipe(\n                                  Ref.set(sinkEndReason, SinkEndReason.ScheduleEnd),\n                                  Effect.zipRight(Ref.set(endAfterEmit, true))\n                                )\n                              ),\n                              core.flatMap(() => handoffConsumer)\n                            )\n                        ),\n                        channel.unwrap\n                      )\n                    }\n                    return pipe(\n                      Ref.set<SinkEndReason.SinkEndReason>(sinkEndReason, signal.reason),\n                      Effect.zipRight(Ref.set(endAfterEmit, true)),\n                      core.fromEffect\n                    )\n                  }\n                }\n              })\n            )\n          }),\n          channel.unwrap\n        )\n        const timeout = (lastB: Option.Option<B>): Effect.Effect<C, Option.Option<never>, R2 | R3> =>\n          scheduleDriver.next(lastB)\n        const scheduledAggregator = (\n          sinkFiber: Fiber.RuntimeFiber<readonly [Chunk.Chunk<Chunk.Chunk<A | A2>>, B], E | E2>,\n          scheduleFiber: Fiber.RuntimeFiber<C, Option.Option<never>>,\n          scope: Scope.Scope\n        ): Channel.Channel<Chunk.Chunk<Either.Either<B, C>>, unknown, E | E2, unknown, unknown, unknown, R2 | R3> => {\n          const forkSink = pipe(\n            Ref.set(consumed, false),\n            Effect.zipRight(Ref.set(endAfterEmit, false)),\n            Effect.zipRight(\n              pipe(\n                handoffConsumer,\n                channel.pipeToOrFail(_sink.toChannel(sink)),\n                core.collectElements,\n                channel.run,\n                Effect.forkIn(scope)\n              )\n            )\n          )\n          const handleSide = (\n            leftovers: Chunk.Chunk<Chunk.Chunk<A | A2>>,\n            b: B,\n            c: Option.Option<C>\n          ): Channel.Channel<Chunk.Chunk<Either.Either<B, C>>, unknown, E | E2, unknown, unknown, unknown, R2 | R3> =>\n            pipe(\n              Ref.set(sinkLeftovers, Chunk.flatten(leftovers)),\n              Effect.zipRight(\n                Effect.map(Ref.get(sinkEndReason), (reason) => {\n                  switch (reason._tag) {\n                    case SinkEndReason.OP_SCHEDULE_END: {\n                      return pipe(\n                        Effect.all([\n                          Ref.get(consumed),\n                          forkSink,\n                          pipe(timeout(Option.some(b)), Effect.forkIn(scope))\n                        ]),\n                        Effect.map(([wasConsumed, sinkFiber, scheduleFiber]) => {\n                          const toWrite = pipe(\n                            c,\n                            Option.match({\n                              onNone: (): Chunk.Chunk<Either.Either<B, C>> => Chunk.of(Either.right(b)),\n                              onSome: (c): Chunk.Chunk<Either.Either<B, C>> =>\n                                Chunk.make(Either.right(b), Either.left(c))\n                            })\n                          )\n                          if (wasConsumed) {\n                            return pipe(\n                              core.write(toWrite),\n                              core.flatMap(() => scheduledAggregator(sinkFiber, scheduleFiber, scope))\n                            )\n                          }\n                          return scheduledAggregator(sinkFiber, scheduleFiber, scope)\n                        }),\n                        channel.unwrap\n                      )\n                    }\n                    case SinkEndReason.OP_UPSTREAM_END: {\n                      return pipe(\n                        Ref.get(consumed),\n                        Effect.map((wasConsumed) =>\n                          wasConsumed ?\n                            core.write(Chunk.of<Either.Either<B, C>>(Either.right(b))) :\n                            core.void\n                        ),\n                        channel.unwrap\n                      )\n                    }\n                  }\n                })\n              ),\n              channel.unwrap\n            )\n          return channel.unwrap(\n            Effect.raceWith(Fiber.join(sinkFiber), Fiber.join(scheduleFiber), {\n              onSelfDone: (sinkExit, _) =>\n                pipe(\n                  Fiber.interrupt(scheduleFiber),\n                  Effect.zipRight(pipe(\n                    Effect.suspend(() => sinkExit),\n                    Effect.map(([leftovers, b]) => handleSide(leftovers, b, Option.none()))\n                  ))\n                ),\n              onOtherDone: (scheduleExit, _) =>\n                Effect.matchCauseEffect(Effect.suspend(() => scheduleExit), {\n                  onFailure: (cause) =>\n                    Either.match(\n                      Cause.failureOrCause(cause),\n                      {\n                        onLeft: () =>\n                          pipe(\n                            handoff,\n                            Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                              HandoffSignal.end(SinkEndReason.ScheduleEnd)\n                            ),\n                            Effect.forkDaemon,\n                            Effect.zipRight(\n                              pipe(\n                                Fiber.join(sinkFiber),\n                                Effect.map(([leftovers, b]) => handleSide(leftovers, b, Option.none()))\n                              )\n                            )\n                          ),\n                        onRight: (cause) =>\n                          pipe(\n                            handoff,\n                            Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                              HandoffSignal.halt(cause)\n                            ),\n                            Effect.forkDaemon,\n                            Effect.zipRight(\n                              pipe(\n                                Fiber.join(sinkFiber),\n                                Effect.map(([leftovers, b]) => handleSide(leftovers, b, Option.none()))\n                              )\n                            )\n                          )\n                      }\n                    ),\n                  onSuccess: (c) =>\n                    pipe(\n                      handoff,\n                      Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                        HandoffSignal.end(SinkEndReason.ScheduleEnd)\n                      ),\n                      Effect.forkDaemon,\n                      Effect.zipRight(\n                        pipe(\n                          Fiber.join(sinkFiber),\n                          Effect.map(([leftovers, b]) => handleSide(leftovers, b, Option.some(c)))\n                        )\n                      )\n                    )\n                })\n            })\n          )\n        }\n        return unwrapScopedWith((scope) =>\n          core.pipeTo(toChannel(self), handoffProducer).pipe(\n            channel.run,\n            Effect.forkIn(scope),\n            Effect.zipRight(\n              channel.pipeToOrFail(handoffConsumer, _sink.toChannel(sink)).pipe(\n                core.collectElements,\n                channel.run,\n                Effect.forkIn(scope),\n                Effect.flatMap((sinkFiber) =>\n                  timeout(Option.none()).pipe(\n                    Effect.forkIn(scope),\n                    Effect.map((scheduleFiber) =>\n                      new StreamImpl(\n                        scheduledAggregator(sinkFiber, scheduleFiber, scope)\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      })\n    )\n  }\n)\n\n/** @internal */\nexport const as = dual<\n  <B>(value: B) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, value: B) => Stream.Stream<B, E, R>\n>(2, <A, E, R, B>(self: Stream.Stream<A, E, R>, value: B): Stream.Stream<B, E, R> => map(self, () => value))\n\nconst queueFromBufferOptions = <A, E>(\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n): Effect.Effect<Queue.Queue<Take.Take<A, E>>> => {\n  if (bufferSize === \"unbounded\") {\n    return Queue.unbounded()\n  } else if (typeof bufferSize === \"number\" || bufferSize === undefined) {\n    return Queue.bounded(bufferSize ?? 16)\n  }\n  switch (bufferSize.strategy) {\n    case \"dropping\":\n      return Queue.dropping(bufferSize.bufferSize ?? 16)\n    case \"sliding\":\n      return Queue.sliding(bufferSize.bufferSize ?? 16)\n    default:\n      return Queue.bounded(bufferSize.bufferSize ?? 16)\n  }\n}\n\n/** @internal */\nexport const _async = <A, E = never, R = never>(\n  register: (\n    emit: Emit.Emit<R, E, A, void>\n  ) => Effect.Effect<void, never, R> | void,\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n): Stream.Stream<A, E, R> =>\n  Effect.acquireRelease(\n    queueFromBufferOptions<A, E>(bufferSize),\n    (queue) => Queue.shutdown(queue)\n  ).pipe(\n    Effect.flatMap((output) =>\n      Effect.runtime<R>().pipe(\n        Effect.flatMap((runtime) =>\n          Effect.sync(() => {\n            const runPromiseExit = Runtime.runPromiseExit(runtime)\n            const canceler = register(emit.make<R, E, A, void>((resume) =>\n              InternalTake.fromPull(resume).pipe(\n                Effect.flatMap((take) => Queue.offer(output, take)),\n                Effect.asVoid,\n                runPromiseExit\n              ).then((exit) => {\n                if (Exit.isFailure(exit)) {\n                  if (!Cause.isInterrupted(exit.cause)) {\n                    throw Cause.squash(exit.cause)\n                  }\n                }\n              })\n            ))\n            return canceler\n          })\n        ),\n        Effect.map((value) => {\n          const loop: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = Queue.take(output).pipe(\n            Effect.flatMap((take) => InternalTake.done(take)),\n            Effect.match({\n              onFailure: (maybeError) =>\n                core.fromEffect(Queue.shutdown(output)).pipe(\n                  channel.zipRight(Option.match(maybeError, {\n                    onNone: () => core.void,\n                    onSome: (error) => core.fail(error)\n                  }))\n                ),\n              onSuccess: (chunk) => core.write(chunk).pipe(core.flatMap(() => loop))\n            }),\n            channel.unwrap\n          )\n          return fromChannel(loop).pipe(ensuring(value ?? Effect.void))\n        })\n      )\n    ),\n    unwrapScoped\n  )\n\n/** @internal */\nexport const asyncEffect = <A, E = never, R = never>(\n  register: (emit: Emit.Emit<R, E, A, void>) => Effect.Effect<unknown, E, R>,\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n): Stream.Stream<A, E, R> =>\n  pipe(\n    Effect.acquireRelease(\n      queueFromBufferOptions<A, E>(bufferSize),\n      (queue) => Queue.shutdown(queue)\n    ),\n    Effect.flatMap((output) =>\n      pipe(\n        Effect.runtime<R>(),\n        Effect.flatMap((runtime) =>\n          pipe(\n            register(\n              emit.make((k) =>\n                pipe(\n                  InternalTake.fromPull(k),\n                  Effect.flatMap((take) => Queue.offer(output, take)),\n                  Effect.asVoid,\n                  Runtime.runPromiseExit(runtime)\n                ).then((exit) => {\n                  if (Exit.isFailure(exit)) {\n                    if (!Cause.isInterrupted(exit.cause)) {\n                      throw Cause.squash(exit.cause)\n                    }\n                  }\n                })\n              )\n            ),\n            Effect.map(() => {\n              const loop: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n                Queue.take(output),\n                Effect.flatMap(InternalTake.done),\n                Effect.match({\n                  onFailure: (maybeError) =>\n                    pipe(\n                      core.fromEffect(Queue.shutdown(output)),\n                      channel.zipRight(Option.match(maybeError, { onNone: () => core.void, onSome: core.fail }))\n                    ),\n                  onSuccess: (chunk) => pipe(core.write(chunk), core.flatMap(() => loop))\n                }),\n                channel.unwrap\n              )\n              return loop\n            })\n          )\n        )\n      )\n    ),\n    channel.unwrapScoped,\n    fromChannel\n  )\n\nconst queueFromBufferOptionsPush = <A, E>(\n  options?: { readonly bufferSize: \"unbounded\" } | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | undefined\n  } | undefined\n): Effect.Effect<Queue.Queue<Array<A> | Exit.Exit<void, E>>> => {\n  if (options?.bufferSize === \"unbounded\" || (options?.bufferSize === undefined && options?.strategy === undefined)) {\n    return Queue.unbounded()\n  }\n  switch (options?.strategy) {\n    case \"sliding\":\n      return Queue.sliding(options.bufferSize ?? 16)\n    default:\n      return Queue.dropping(options?.bufferSize ?? 16)\n  }\n}\n\n/** @internal */\nexport const asyncPush = <A, E = never, R = never>(\n  register: (emit: Emit.EmitOpsPush<E, A>) => Effect.Effect<unknown, E, R | Scope.Scope>,\n  options?: {\n    readonly bufferSize: \"unbounded\"\n  } | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | undefined\n  } | undefined\n): Stream.Stream<A, E, Exclude<R, Scope.Scope>> =>\n  Effect.acquireRelease(\n    queueFromBufferOptionsPush<A, E>(options),\n    Queue.shutdown\n  ).pipe(\n    Effect.tap((queue) =>\n      FiberRef.getWith(FiberRef.currentScheduler, (scheduler) => register(emit.makePush(queue, scheduler)))\n    ),\n    Effect.map((queue) => {\n      const loop: Channel.Channel<Chunk.Chunk<A>, unknown, E> = core.flatMap(Queue.take(queue), (item) =>\n        Exit.isExit(item)\n          ? Exit.isSuccess(item) ? core.void : core.failCause(item.cause)\n          : channel.zipRight(core.write(Chunk.unsafeFromArray(item)), loop))\n      return loop\n    }),\n    channel.unwrapScoped,\n    fromChannel\n  )\n\n/** @internal */\nexport const asyncScoped = <A, E = never, R = never>(\n  register: (emit: Emit.Emit<R, E, A, void>) => Effect.Effect<unknown, E, R | Scope.Scope>,\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n): Stream.Stream<A, E, Exclude<R, Scope.Scope>> =>\n  pipe(\n    Effect.acquireRelease(\n      queueFromBufferOptions<A, E>(bufferSize),\n      (queue) => Queue.shutdown(queue)\n    ),\n    Effect.flatMap((output) =>\n      pipe(\n        Effect.runtime<R>(),\n        Effect.flatMap((runtime) =>\n          pipe(\n            register(\n              emit.make((k) =>\n                pipe(\n                  InternalTake.fromPull(k),\n                  Effect.flatMap((take) => Queue.offer(output, take)),\n                  Effect.asVoid,\n                  Runtime.runPromiseExit(runtime)\n                ).then((exit) => {\n                  if (Exit.isFailure(exit)) {\n                    if (!Cause.isInterrupted(exit.cause)) {\n                      throw Cause.squash(exit.cause)\n                    }\n                  }\n                })\n              )\n            ),\n            Effect.zipRight(Ref.make(false)),\n            Effect.flatMap((ref) =>\n              pipe(\n                Ref.get(ref),\n                Effect.map((isDone) =>\n                  isDone ?\n                    pull.end() :\n                    pipe(\n                      Queue.take(output),\n                      Effect.flatMap(InternalTake.done),\n                      Effect.onError(() =>\n                        pipe(\n                          Ref.set(ref, true),\n                          Effect.zipRight(Queue.shutdown(output))\n                        )\n                      )\n                    )\n                )\n              )\n            )\n          )\n        )\n      )\n    ),\n    scoped,\n    flatMap(repeatEffectChunkOption)\n  )\n\n/** @internal */\nexport const branchAfter = dual<\n  <A, A2, E2, R2>(\n    n: number,\n    f: (input: Chunk.Chunk<A>) => Stream.Stream<A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    f: (input: Chunk.Chunk<A>) => Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    f: (input: Chunk.Chunk<A>) => Stream.Stream<A2, E2, R2>\n  ) =>\n    suspend(() => {\n      const buffering = (\n        acc: Chunk.Chunk<A>\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, never, unknown, unknown, R | R2> =>\n        core.readWith({\n          onInput: (input) => {\n            const nextSize = acc.length + input.length\n            if (nextSize >= n) {\n              const [b1, b2] = pipe(input, Chunk.splitAt(n - acc.length))\n              return running(pipe(acc, Chunk.appendAll(b1)), b2)\n            }\n            return buffering(pipe(acc, Chunk.appendAll(input)))\n          },\n          onFailure: core.fail,\n          onDone: () => running(acc, Chunk.empty())\n        })\n      const running = (\n        prefix: Chunk.Chunk<A>,\n        leftover: Chunk.Chunk<A>\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, never, unknown, unknown, R | R2> =>\n        core.pipeTo(\n          channel.zipRight(\n            core.write(leftover),\n            channel.identityChannel()\n          ),\n          toChannel(f(prefix))\n        )\n      return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(buffering(Chunk.empty<A>()))))\n    })\n)\n\n/** @internal */\nexport const broadcast = dual<\n  <N extends number>(\n    n: N,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<TupleOf<N, Stream.Stream<A, E>>, never, Scope.Scope | R>,\n  <A, E, R, N extends number>(\n    self: Stream.Stream<A, E, R>,\n    n: N,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<TupleOf<N, Stream.Stream<A, E>>, never, Scope.Scope | R>\n>(3, <A, E, R, N extends number>(\n  self: Stream.Stream<A, E, R>,\n  n: N,\n  maximumLag: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<TupleOf<N, Stream.Stream<A, E>>, never, Scope.Scope | R> =>\n  pipe(\n    self,\n    broadcastedQueues(n, maximumLag),\n    Effect.map((tuple) =>\n      tuple.map((queue) => flattenTake(fromQueue(queue, { shutdown: true }))) as TupleOf<N, Stream.Stream<A, E>>\n    )\n  ))\n\n/** @internal */\nexport const broadcastDynamic = dual<\n  (\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<Stream.Stream<A, E>, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<Stream.Stream<A, E>, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  maximumLag: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<Stream.Stream<A, E>, never, Scope.Scope | R> =>\n  Effect.map(toPubSub(self, maximumLag), (pubsub) => flattenTake(fromPubSub(pubsub))))\n\nexport const share = dual<\n  <A, E>(\n    config: {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    }\n  ) => <R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<Stream.Stream<A, E>, never, R | Scope.Scope>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    config: {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    }\n  ) => Effect.Effect<Stream.Stream<A, E>, never, R | Scope.Scope>\n>(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    }\n  ): Effect.Effect<Stream.Stream<A, E>, never, R | Scope.Scope> =>\n    Effect.map(\n      RcRef.make({\n        acquire: broadcastDynamic(self, options),\n        idleTimeToLive: options.idleTimeToLive\n      }),\n      (rcRef) => unwrapScoped(RcRef.get(rcRef))\n    )\n)\n\n/** @internal */\nexport const broadcastedQueues = dual<\n  <N extends number>(\n    n: N,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>, never, Scope.Scope | R>,\n  <A, E, R, N extends number>(\n    self: Stream.Stream<A, E, R>,\n    n: N,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>, never, Scope.Scope | R>\n>(3, <A, E, R, N extends number>(\n  self: Stream.Stream<A, E, R>,\n  n: N,\n  maximumLag: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>, never, Scope.Scope | R> =>\n  Effect.flatMap(pubsubFromOptions(maximumLag), (pubsub) =>\n    pipe(\n      Effect.all(Array.from({ length: n }, () => PubSub.subscribe(pubsub))) as Effect.Effect<\n        TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>,\n        never,\n        R\n      >,\n      Effect.tap(() => Effect.forkScoped(runIntoPubSubScoped(self, pubsub)))\n    )))\n\n/** @internal */\nexport const broadcastedQueuesDynamic = dual<\n  (\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope>, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope>, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  maximumLag: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope>, never, Scope.Scope | R> =>\n  Effect.map(toPubSub(self, maximumLag), PubSub.subscribe))\n\n/** @internal */\nexport const buffer = dual<\n  (\n    options: {\n      readonly capacity: \"unbounded\"\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly capacity: \"unbounded\"\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n    }\n  ) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  options: {\n    readonly capacity: \"unbounded\"\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  }\n): Stream.Stream<A, E, R> => {\n  if (options.capacity === \"unbounded\") {\n    return bufferUnbounded(self)\n  } else if (options.strategy === \"dropping\") {\n    return bufferDropping(self, options.capacity)\n  } else if (options.strategy === \"sliding\") {\n    return bufferSliding(self, options.capacity)\n  }\n  const queue = toQueueOfElements(self, options)\n  return new StreamImpl(\n    channel.unwrapScoped(\n      Effect.map(queue, (queue) => {\n        const process: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n          core.fromEffect(Queue.take(queue)),\n          core.flatMap(Exit.match({\n            onFailure: (cause) =>\n              pipe(\n                Cause.flipCauseOption(cause),\n                Option.match({ onNone: () => core.void, onSome: core.failCause })\n              ),\n            onSuccess: (value) => core.flatMap(core.write(Chunk.of(value)), () => process)\n          }))\n        )\n        return process\n      })\n    )\n  )\n})\n\n/** @internal */\nexport const bufferChunks = dual<\n  (options: {\n    readonly capacity: number\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  }) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, options: {\n    readonly capacity: number\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  }) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, options: {\n  readonly capacity: number\n  readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n}): Stream.Stream<A, E, R> => {\n  if (options.strategy === \"dropping\") {\n    return bufferChunksDropping(self, options.capacity)\n  } else if (options.strategy === \"sliding\") {\n    return bufferChunksSliding(self, options.capacity)\n  }\n  const queue = toQueue(self, options)\n  return new StreamImpl(\n    channel.unwrapScoped(\n      Effect.map(queue, (queue) => {\n        const process: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n          core.fromEffect(Queue.take(queue)),\n          core.flatMap(InternalTake.match({\n            onEnd: () => core.void,\n            onFailure: core.failCause,\n            onSuccess: (value) => pipe(core.write(value), core.flatMap(() => process))\n          }))\n        )\n        return process\n      })\n    )\n  )\n})\n\nconst bufferChunksDropping = dual<\n  (capacity: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number): Stream.Stream<A, E, R> => {\n  const queue = Effect.acquireRelease(\n    Queue.dropping<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>(capacity),\n    (queue) => Queue.shutdown(queue)\n  )\n  return new StreamImpl(bufferSignal(queue, toChannel(self)))\n})\n\nconst bufferChunksSliding = dual<\n  (capacity: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number): Stream.Stream<A, E, R> => {\n  const queue = Effect.acquireRelease(\n    Queue.sliding<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>(capacity),\n    (queue) => Queue.shutdown(queue)\n  )\n  return new StreamImpl(bufferSignal(queue, toChannel(self)))\n})\n\nconst bufferDropping = dual<\n  (capacity: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number): Stream.Stream<A, E, R> => {\n  const queue = Effect.acquireRelease(\n    Queue.dropping<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>(capacity),\n    (queue) => Queue.shutdown(queue)\n  )\n  return new StreamImpl(bufferSignal(queue, toChannel(rechunk(1)(self))))\n})\n\nconst bufferSliding = dual<\n  (capacity: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number): Stream.Stream<A, E, R> => {\n  const queue = Effect.acquireRelease(\n    Queue.sliding<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>(capacity),\n    (queue) => Queue.shutdown(queue)\n  )\n  return new StreamImpl(bufferSignal(queue, toChannel(pipe(self, rechunk(1)))))\n})\n\nconst bufferUnbounded = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, E, R> => {\n  const queue = toQueue(self, { strategy: \"unbounded\" })\n  return new StreamImpl(\n    channel.unwrapScoped(\n      Effect.map(queue, (queue) => {\n        const process: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n          core.fromEffect(Queue.take(queue)),\n          core.flatMap(InternalTake.match({\n            onEnd: () => core.void,\n            onFailure: core.failCause,\n            onSuccess: (value) => core.flatMap(core.write(value), () => process)\n          }))\n        )\n        return process\n      })\n    )\n  )\n}\n\nconst bufferSignal = <A, E, R>(\n  scoped: Effect.Effect<Queue.Queue<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>, never, Scope.Scope>,\n  bufferChannel: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown, R>\n): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown, R> => {\n  const producer = (\n    queue: Queue.Queue<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>,\n    ref: Ref.Ref<Deferred.Deferred<void>>\n  ): Channel.Channel<never, Chunk.Chunk<A>, never, E, unknown, unknown, R> => {\n    const terminate = (take: Take.Take<A, E>): Channel.Channel<never, Chunk.Chunk<A>, never, E, unknown, unknown, R> =>\n      pipe(\n        Ref.get(ref),\n        Effect.tap(Deferred.await),\n        Effect.zipRight(Deferred.make<void>()),\n        Effect.flatMap((deferred) =>\n          pipe(\n            Queue.offer(queue, [take, deferred] as const),\n            Effect.zipRight(Ref.set(ref, deferred)),\n            Effect.zipRight(Deferred.await(deferred))\n          )\n        ),\n        Effect.asVoid,\n        core.fromEffect\n      )\n    return core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          Deferred.make<void>(),\n          Effect.flatMap(\n            (deferred) =>\n              pipe(\n                Queue.offer(queue, [InternalTake.chunk(input), deferred] as const),\n                Effect.flatMap((added) => pipe(Ref.set(ref, deferred), Effect.when(() => added)))\n              )\n          ),\n          Effect.asVoid,\n          core.fromEffect,\n          core.flatMap(() => producer(queue, ref))\n        ),\n      onFailure: (error) => terminate(InternalTake.failCause(error)),\n      onDone: () => terminate(InternalTake.end)\n    })\n  }\n  const consumer = (\n    queue: Queue.Queue<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>\n  ): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown, R> => {\n    const process: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n      core.fromEffect(Queue.take(queue)),\n      core.flatMap(([take, deferred]) =>\n        channel.zipRight(\n          core.fromEffect(Deferred.succeed(deferred, void 0)),\n          InternalTake.match(take, {\n            onEnd: () => core.void,\n            onFailure: core.failCause,\n            onSuccess: (value) => pipe(core.write(value), core.flatMap(() => process))\n          })\n        )\n      )\n    )\n    return process\n  }\n  return channel.unwrapScoped(\n    pipe(\n      scoped,\n      Effect.flatMap((queue) =>\n        pipe(\n          Deferred.make<void>(),\n          Effect.tap((start) => Deferred.succeed(start, void 0)),\n          Effect.flatMap((start) =>\n            pipe(\n              Ref.make(start),\n              Effect.flatMap((ref) =>\n                pipe(\n                  bufferChannel,\n                  core.pipeTo(producer(queue, ref)),\n                  channel.runScoped,\n                  Effect.forkScoped\n                )\n              ),\n              Effect.as(consumer(queue))\n            )\n          )\n        )\n      )\n    )\n  )\n}\n\n/** @internal */\nexport const catchAll = dual<\n  <E, A2, E2, R2>(\n    f: (error: E) => Stream.Stream<A2, E2, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (error: E) => Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2, R2 | R>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (error: E) => Stream.Stream<A2, E2, R2>\n): Stream.Stream<A2 | A, E2, R2 | R> =>\n  catchAllCause(self, (cause) =>\n    Either.match(Cause.failureOrCause(cause), {\n      onLeft: f,\n      onRight: failCause\n    })))\n\n/** @internal */\nexport const catchAllCause = dual<\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<E>) => Stream.Stream<A2, E2, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A | A2, E2, R | R2> =>\n    new StreamImpl<A | A2, E2, R | R2>(pipe(toChannel(self), core.catchAllCause((cause) => toChannel(f(cause)))))\n)\n\n/** @internal */\nexport const catchSome = dual<\n  <E, A2, E2, R2>(\n    pf: (error: E) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E | E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (error: E) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2 | A, E | E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (error: E) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2 | A, E | E2, R2 | R> =>\n    pipe(self, catchAll((error) => pipe(pf(error), Option.getOrElse(() => fail<E | E2>(error)))))\n)\n\n/** @internal */\nexport const catchSomeCause = dual<\n  <E, A2, E2, R2>(\n    pf: (cause: Cause.Cause<E>) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E | E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (cause: Cause.Cause<E>) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2 | A, E | E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (cause: Cause.Cause<E>) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2 | A, E | E2, R2 | R> =>\n    pipe(self, catchAllCause((cause) => pipe(pf(cause), Option.getOrElse(() => failCause<E | E2>(cause)))))\n)\n\n/* @internal */\nexport const catchTag = dual<\n  <K extends E[\"_tag\"] & string, E extends { _tag: string }, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Stream.Stream<A1, E1, R1>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A | A1, Exclude<E, { _tag: K }> | E1, R | R1>,\n  <A, E extends { _tag: string }, R, K extends E[\"_tag\"] & string, A1, E1, R1>(\n    self: Stream.Stream<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Stream.Stream<A1, E1, R1>\n  ) => Stream.Stream<A | A1, Exclude<E, { _tag: K }> | E1, R | R1>\n>(3, (self, k, f) =>\n  catchAll(self, (e) => {\n    if (\"_tag\" in e && e[\"_tag\"] === k) {\n      return f(e as any)\n    }\n    return fail(e as any)\n  }))\n\n/** @internal */\nexport const catchTags: {\n  <\n    E extends { _tag: string },\n    Cases extends {\n      [K in E[\"_tag\"]]+?: (error: Extract<E, { _tag: K }>) => Stream.Stream<any, any, any>\n    }\n  >(\n    cases: Cases\n  ): <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer A, infer _E, infer _R>) ? A\n        : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer _A, infer E, infer _R>) ? E\n        : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer _A, infer _E, infer R>) ? R\n        : never\n    }[keyof Cases]\n  >\n  <\n    A,\n    E extends { _tag: string },\n    R,\n    Cases extends {\n      [K in E[\"_tag\"]]+?: (error: Extract<E, { _tag: K }>) => Stream.Stream<any, any, any>\n    }\n  >(\n    self: Stream.Stream<A, E, R>,\n    cases: Cases\n  ): Stream.Stream<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer _R, infer _E, infer A>) ? A\n        : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer _R, infer E, infer _A>) ? E\n        : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer R, infer _E, infer _A>) ? R\n        : never\n    }[keyof Cases]\n  >\n} = dual(2, (self, cases) =>\n  catchAll(self, (e: any) => {\n    const keys = Object.keys(cases)\n    if (\"_tag\" in e && keys.includes(e[\"_tag\"])) {\n      return cases[e[\"_tag\"]](e as any)\n    }\n    return fail(e as any)\n  }))\n\n/** @internal */\nexport const changes = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, E, R> =>\n  pipe(self, changesWith((x, y) => Equal.equals(y)(x)))\n\n/** @internal */\nexport const changesWith = dual<\n  <A>(f: (x: A, y: A) => boolean) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, f: (x: A, y: A) => boolean) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, f: (x: A, y: A) => boolean): Stream.Stream<A, E, R> => {\n  const writer = (\n    last: Option.Option<A>\n  ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, void, unknown> =>\n    core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const [newLast, newChunk] = Chunk.reduce(\n          input,\n          [last, Chunk.empty<A>()] as const,\n          ([option, outputs], output) => {\n            if (Option.isSome(option) && f(option.value, output)) {\n              return [Option.some(output), outputs] as const\n            }\n            return [Option.some(output), pipe(outputs, Chunk.append(output))] as const\n          }\n        )\n        return core.flatMap(\n          core.write(newChunk),\n          () => writer(newLast)\n        )\n      },\n      onFailure: core.failCause,\n      onDone: () => core.void\n    })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(writer(Option.none()))))\n})\n\n/** @internal */\nexport const changesWithEffect = dual<\n  <A, E2, R2>(\n    f: (x: A, y: A) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (x: A, y: A) => Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (x: A, y: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> => {\n    const writer = (\n      last: Option.Option<A>\n    ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E | E2, void, unknown, R | R2> =>\n      core.readWithCause({\n        onInput: (input: Chunk.Chunk<A>) =>\n          pipe(\n            input,\n            Effect.reduce([last, Chunk.empty<A>()] as const, ([option, outputs], output) => {\n              if (Option.isSome(option)) {\n                return pipe(\n                  f(option.value, output),\n                  Effect.map((bool) =>\n                    bool ?\n                      [Option.some(output), outputs] as const :\n                      [Option.some(output), pipe(outputs, Chunk.append(output))] as const\n                  )\n                )\n              }\n              return Effect.succeed(\n                [\n                  Option.some(output),\n                  pipe(outputs, Chunk.append(output))\n                ] as const\n              )\n            }),\n            core.fromEffect,\n            core.flatMap(([newLast, newChunk]) =>\n              pipe(\n                core.write(newChunk),\n                core.flatMap(() => writer(newLast))\n              )\n            )\n          ),\n        onFailure: core.failCause,\n        onDone: () => core.void\n      })\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(writer(Option.none()))))\n  }\n)\n\n/** @internal */\nexport const chunks = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n  pipe(self, mapChunks(Chunk.of))\n\n/** @internal */\nexport const chunksWith = dual<\n  <A, E, R, A2, E2, R2>(\n    f: (stream: Stream.Stream<Chunk.Chunk<A>, E, R>) => Stream.Stream<Chunk.Chunk<A2>, E2, R2>\n  ) => (self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (stream: Stream.Stream<Chunk.Chunk<A>, E, R>) => Stream.Stream<Chunk.Chunk<A2>, E2, R2>\n  ) => Stream.Stream<A2, E | E2, R | R2>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (stream: Stream.Stream<Chunk.Chunk<A>, E, R>) => Stream.Stream<Chunk.Chunk<A2>, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> => flattenChunks(f(chunks(self)))\n)\n\nconst unsome = <A, E, R>(effect: Effect.Effect<A, Option.Option<E>, R>): Effect.Effect<Option.Option<A>, E, R> =>\n  Effect.catchAll(\n    Effect.asSome(effect),\n    (o) => o._tag === \"None\" ? Effect.succeedNone : Effect.fail(o.value)\n  )\n\n/** @internal */\nexport const combine = dual<\n  <A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    that: Stream.Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<A, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<A2, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [A3, S], Option.Option<E2 | E>>, never, R5>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>,\n  <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<A, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<A2, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [A3, S], Option.Option<E2 | E>>, never, R5>\n  ) => Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>\n>(4, <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n  self: Stream.Stream<A, E, R>,\n  that: Stream.Stream<A2, E2, R2>,\n  s: S,\n  f: (\n    s: S,\n    pullLeft: Effect.Effect<A, Option.Option<E>, R3>,\n    pullRight: Effect.Effect<A2, Option.Option<E2>, R4>\n  ) => Effect.Effect<Exit.Exit<readonly [A3, S], Option.Option<E2 | E>>, never, R5>\n): Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R> => {\n  function producer<Err, Elem>(\n    handoff: Handoff.Handoff<Exit.Exit<Elem, Option.Option<Err>>>,\n    latch: Handoff.Handoff<void>\n  ): Channel.Channel<never, Elem, never, Err, unknown, unknown, R> {\n    return core.fromEffect(Handoff.take(latch)).pipe(\n      channel.zipRight(core.readWithCause({\n        onInput: (input) =>\n          core.flatMap(\n            core.fromEffect(\n              Handoff.offer<Exit.Exit<Elem, Option.Option<Err>>>(\n                handoff,\n                Exit.succeed(input)\n              )\n            ),\n            () => producer(handoff, latch)\n          ),\n        onFailure: (cause) =>\n          core.fromEffect(\n            Handoff.offer<Exit.Exit<Elem, Option.Option<Err>>>(\n              handoff,\n              Exit.failCause(pipe(cause, Cause.map(Option.some)))\n            )\n          ),\n        onDone: () =>\n          core.flatMap(\n            core.fromEffect(\n              Handoff.offer<Exit.Exit<Elem, Option.Option<Err>>>(\n                handoff,\n                Exit.fail(Option.none())\n              )\n            ),\n            () => producer(handoff, latch)\n          )\n      }))\n    )\n  }\n  return new StreamImpl(\n    channel.unwrapScopedWith((scope) =>\n      Effect.all([\n        Handoff.make<Exit.Exit<A, Option.Option<E>>>(),\n        Handoff.make<Exit.Exit<A2, Option.Option<E2>>>(),\n        Handoff.make<void>(),\n        Handoff.make<void>()\n      ]).pipe(\n        Effect.tap(([left, _, latchL]) =>\n          toChannel(self).pipe(\n            channel.concatMap(channel.writeChunk),\n            core.pipeTo(producer(left, latchL)),\n            channelExecutor.runIn(scope),\n            Effect.forkIn(scope)\n          )\n        ),\n        Effect.tap(([, right, _, rightL]) =>\n          toChannel(that).pipe(\n            channel.concatMap(channel.writeChunk),\n            core.pipeTo(producer(right, rightL)),\n            channelExecutor.runIn(scope),\n            Effect.forkIn(scope)\n          )\n        ),\n        Effect.map(([left, right, latchL, latchR]) => {\n          const pullLeft = Handoff.offer<void>(latchL, void 0).pipe(\n            Effect.zipRight(Handoff.take(left).pipe(Effect.flatMap(identity)))\n          )\n          const pullRight = Handoff.offer<void>(latchR, void 0).pipe(\n            Effect.zipRight(Handoff.take(right).pipe(Effect.flatMap(identity)))\n          )\n          return toChannel(unfoldEffect(s, (s) => Effect.flatMap(f(s, pullLeft, pullRight), unsome)))\n        })\n      )\n    )\n  )\n})\n\n/** @internal */\nexport const combineChunks = dual<\n  <A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    that: Stream.Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [Chunk.Chunk<A3>, S], Option.Option<E2 | E>>, never, R5>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>,\n  <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [Chunk.Chunk<A3>, S], Option.Option<E2 | E>>, never, R5>\n  ) => Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>\n>(4, <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n  self: Stream.Stream<A, E, R>,\n  that: Stream.Stream<A2, E2, R2>,\n  s: S,\n  f: (\n    s: S,\n    pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R3>,\n    pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R4>\n  ) => Effect.Effect<Exit.Exit<readonly [Chunk.Chunk<A3>, S], Option.Option<E2 | E>>, never, R5>\n): Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R> => {\n  const producer = <Err, Elem>(\n    handoff: Handoff.Handoff<Take.Take<Elem, Err>>,\n    latch: Handoff.Handoff<void>\n  ): Channel.Channel<never, Chunk.Chunk<Elem>, never, Err, unknown, unknown, R> =>\n    channel.zipRight(\n      core.fromEffect(Handoff.take(latch)),\n      core.readWithCause({\n        onInput: (input) =>\n          core.flatMap(\n            core.fromEffect(pipe(\n              handoff,\n              Handoff.offer<Take.Take<Elem, Err>>(InternalTake.chunk(input))\n            )),\n            () => producer(handoff, latch)\n          ),\n        onFailure: (cause) =>\n          core.fromEffect(\n            Handoff.offer<Take.Take<Elem, Err>>(\n              handoff,\n              InternalTake.failCause(cause)\n            )\n          ),\n        onDone: (): Channel.Channel<never, Chunk.Chunk<Elem>, never, Err, unknown, unknown, R> =>\n          core.fromEffect(Handoff.offer<Take.Take<Elem, Err>>(handoff, InternalTake.end))\n      })\n    )\n  return new StreamImpl(\n    channel.unwrapScopedWith((scope) =>\n      Effect.all([\n        Handoff.make<Take.Take<A, E>>(),\n        Handoff.make<Take.Take<A2, E2>>(),\n        Handoff.make<void>(),\n        Handoff.make<void>()\n      ]).pipe(\n        Effect.tap(([left, _, latchL]) =>\n          core.pipeTo(toChannel(self), producer(left, latchL)).pipe(\n            channelExecutor.runIn(scope),\n            Effect.forkIn(scope)\n          )\n        ),\n        Effect.tap(([_, right, __, latchR]) =>\n          core.pipeTo(toChannel(that), producer(right, latchR)).pipe(\n            channelExecutor.runIn(scope),\n            Effect.forkIn(scope)\n          )\n        ),\n        Effect.map(([left, right, latchL, latchR]) => {\n          const pullLeft = Handoff.offer<void>(latchL, void 0).pipe(\n            Effect.zipRight(Handoff.take(left).pipe(Effect.flatMap(InternalTake.done)))\n          )\n          const pullRight = Handoff.offer<void>(latchR, void 0).pipe(\n            Effect.zipRight(Handoff.take(right).pipe(Effect.flatMap(InternalTake.done)))\n          )\n          return toChannel(unfoldChunkEffect(s, (s) => Effect.flatMap(f(s, pullLeft, pullRight), unsome)))\n        })\n      )\n    )\n  )\n})\n\n/** @internal */\nexport const concat = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> =>\n    new StreamImpl<A2 | A, E2 | E, R2 | R>(pipe(toChannel(self), channel.zipRight(toChannel(that))))\n)\n\n/** @internal */\nexport const concatAll = <A, E, R>(streams: Chunk.Chunk<Stream.Stream<A, E, R>>): Stream.Stream<A, E, R> =>\n  suspend(() => pipe(streams, Chunk.reduce(empty as Stream.Stream<A, E, R>, (x, y) => concat(y)(x))))\n\n/** @internal */\nexport const cross: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<[AL, AR], EL | ER, RL | RR>\n  <AL, ER, RR, AR, EL, RL>(\n    left: Stream.Stream<AL, ER, RR>,\n    right: Stream.Stream<AR, EL, RL>\n  ): Stream.Stream<[AL, AR], EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, ER, RR, AR, EL, RL>(\n    left: Stream.Stream<AL, ER, RR>,\n    right: Stream.Stream<AR, EL, RL>\n  ): Stream.Stream<[AL, AR], EL | ER, RL | RR> => pipe(left, crossWith(right, (a, a2) => [a, a2]))\n)\n\n/** @internal */\nexport const crossLeft: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AL, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR> => pipe(left, crossWith(right, (a, _) => a))\n)\n\n/** @internal */\nexport const crossRight: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AR, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR> => flatMap(left, () => right)\n)\n\n/** @internal */\nexport const crossWith: {\n  <AR, ER, RR, AL, A>(\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): <EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<A, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR>\n} = dual(\n  3,\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR> => pipe(left, flatMap((a) => pipe(right, map((b) => f(a, b)))))\n)\n\n/** @internal */\nexport const debounce = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput): Stream.Stream<A, E, R> =>\n    unwrapScopedWith((scope) =>\n      Effect.gen(function*() {\n        const handoff = yield* Handoff.make<HandoffSignal.HandoffSignal<A, E>>()\n\n        function enqueue(last: Chunk.Chunk<A>): Effect.Effect<\n          Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown>\n        > {\n          return Clock.sleep(duration).pipe(\n            Effect.as(last),\n            Effect.forkIn(scope),\n            Effect.map((fiber) => consumer(DebounceState.previous(fiber)))\n          )\n        }\n\n        const producer: Channel.Channel<never, Chunk.Chunk<A>, E, E, unknown, unknown> = core.readWithCause({\n          onInput: (input: Chunk.Chunk<A>) =>\n            Option.match(Chunk.last(input), {\n              onNone: () => producer,\n              onSome: (elem) =>\n                core.fromEffect(Handoff.offer(handoff, HandoffSignal.emit(Chunk.of(elem)))).pipe(\n                  core.flatMap(() => producer)\n                )\n            }),\n          onFailure: (cause) =>\n            core.fromEffect(\n              Handoff.offer<HandoffSignal.HandoffSignal<A, E>>(handoff, HandoffSignal.halt(cause))\n            ),\n          onDone: () =>\n            core.fromEffect(\n              Handoff.offer<HandoffSignal.HandoffSignal<A, E>>(\n                handoff,\n                HandoffSignal.end(SinkEndReason.UpstreamEnd)\n              )\n            )\n        })\n\n        function consumer(\n          state: DebounceState.DebounceState<A, E>\n        ): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown> {\n          switch (state._tag) {\n            case DebounceState.OP_NOT_STARTED: {\n              return channel.unwrap(\n                Handoff.take(handoff).pipe(\n                  Effect.map((signal) => {\n                    switch (signal._tag) {\n                      case HandoffSignal.OP_EMIT: {\n                        return channel.unwrap(enqueue(signal.elements))\n                      }\n                      case HandoffSignal.OP_HALT: {\n                        return core.failCause(signal.cause)\n                      }\n                      case HandoffSignal.OP_END: {\n                        return core.void\n                      }\n                    }\n                  })\n                )\n              )\n            }\n            case DebounceState.OP_PREVIOUS: {\n              return channel.unwrap(\n                Handoff.take(handoff).pipe(\n                  Effect.forkIn(scope),\n                  Effect.flatMap((handoffFiber) =>\n                    Effect.raceWith(Fiber.join(state.fiber), Fiber.join(handoffFiber), {\n                      onSelfDone: (leftExit, current) =>\n                        Exit.match(leftExit, {\n                          onFailure: (cause) =>\n                            Fiber.interrupt(current).pipe(\n                              Effect.as(core.failCause(cause))\n                            ),\n                          onSuccess: (chunk) =>\n                            Fiber.interrupt(current).pipe(\n                              Effect.zipRight(Effect.succeed(\n                                core.write(chunk).pipe(\n                                  core.flatMap(() => consumer(DebounceState.current(handoffFiber)))\n                                )\n                              ))\n                            )\n                        }),\n                      onOtherDone: (rightExit, previous) =>\n                        Exit.match(rightExit, {\n                          onFailure: (cause) =>\n                            Fiber.interrupt(previous).pipe(\n                              Effect.as(core.failCause(cause))\n                            ),\n                          onSuccess: (signal) => {\n                            switch (signal._tag) {\n                              case HandoffSignal.OP_EMIT: {\n                                return Fiber.interrupt(previous).pipe(\n                                  Effect.zipRight(enqueue(signal.elements))\n                                )\n                              }\n                              case HandoffSignal.OP_HALT: {\n                                return Fiber.interrupt(previous).pipe(\n                                  Effect.as(core.failCause(signal.cause))\n                                )\n                              }\n                              case HandoffSignal.OP_END: {\n                                return Fiber.join(previous).pipe(\n                                  Effect.map((chunk) =>\n                                    core.write(chunk).pipe(\n                                      channel.zipRight(core.void)\n                                    )\n                                  )\n                                )\n                              }\n                            }\n                          }\n                        })\n                    })\n                  )\n                )\n              )\n            }\n            case DebounceState.OP_CURRENT: {\n              return channel.unwrap(\n                Fiber.join(state.fiber).pipe(\n                  Effect.map((signal) => {\n                    switch (signal._tag) {\n                      case HandoffSignal.OP_EMIT: {\n                        return channel.unwrap(enqueue(signal.elements))\n                      }\n                      case HandoffSignal.OP_HALT: {\n                        return core.failCause(signal.cause)\n                      }\n                      case HandoffSignal.OP_END: {\n                        return core.void\n                      }\n                    }\n                  })\n                )\n              )\n            }\n          }\n        }\n\n        return scopedWith((scope) =>\n          core.pipeTo(toChannel(self), producer).pipe(\n            channelExecutor.runIn(scope),\n            Effect.forkIn(scope)\n          )\n        ).pipe(crossRight(new StreamImpl(consumer(DebounceState.notStarted))))\n      })\n    )\n)\n\n/** @internal */\nexport const die = (defect: unknown): Stream.Stream<never> => fromEffect(Effect.die(defect))\n\n/** @internal */\nexport const dieSync = (evaluate: LazyArg<unknown>): Stream.Stream<never> => fromEffect(Effect.dieSync(evaluate))\n\n/** @internal */\nexport const dieMessage = (message: string): Stream.Stream<never> => fromEffect(Effect.dieMessage(message))\n\n/** @internal */\nexport const distributedWith = dual<\n  <N extends number, A>(\n    options: {\n      readonly size: N\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<\n    TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>,\n    never,\n    Scope.Scope | R\n  >,\n  <A, E, R, N extends number>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly size: N\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ) => Effect.Effect<\n    TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>,\n    never,\n    Scope.Scope | R\n  >\n>(\n  2,\n  <A, E, R, N extends number>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly size: N\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ): Effect.Effect<\n    TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>,\n    never,\n    Scope.Scope | R\n  > =>\n    pipe(\n      Deferred.make<(a: A) => Effect.Effect<Predicate<number>>>(),\n      Effect.flatMap((deferred) =>\n        pipe(\n          self,\n          distributedWithDynamic({\n            maximumLag: options.maximumLag,\n            decide: (a) => Effect.flatMap(Deferred.await(deferred), (f) => f(a))\n          }),\n          Effect.flatMap((next) =>\n            pipe(\n              Effect.all(\n                Chunk.map(\n                  Chunk.range(0, options.size - 1),\n                  (id) => Effect.map(next, ([key, queue]) => [[key, id], queue] as const)\n                )\n              ),\n              Effect.map(Chunk.unsafeFromArray),\n              Effect.flatMap((entries) => {\n                const [mappings, queues] = Chunk.reduceRight(\n                  entries,\n                  [\n                    new Map<number, number>(),\n                    Chunk.empty<Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>()\n                  ] as const,\n                  ([mappings, queues], [mapping, queue]) =>\n                    [\n                      mappings.set(mapping[0], mapping[1]),\n                      pipe(queues, Chunk.prepend(queue))\n                    ] as const\n                )\n                return pipe(\n                  Deferred.succeed(deferred, (a: A) =>\n                    Effect.map(options.decide(a), (f) => (key: number) => pipe(f(mappings.get(key)!)))),\n                  Effect.as(\n                    Array.from(queues) as TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>\n                  )\n                )\n              })\n            )\n          )\n        )\n      )\n    )\n)\n\n/** @internal */\nconst distributedWithDynamicId = { ref: 0 }\n\nconst newDistributedWithDynamicId = () => {\n  const current = distributedWithDynamicId.ref\n  distributedWithDynamicId.ref = current + 1\n  return current\n}\n\n/** @internal */\nexport const distributedWithDynamic = dual<\n  <A>(\n    options: {\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n    never,\n    Scope.Scope | R\n  >,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n    never,\n    Scope.Scope | R\n  >\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  options: {\n    readonly maximumLag: number\n    readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n  }\n): Effect.Effect<\n  Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n  never,\n  Scope.Scope | R\n> => distributedWithDynamicCallback(self, options.maximumLag, options.decide, () => Effect.void))\n\n/** @internal */\nexport const distributedWithDynamicCallback = dual<\n  <A, E, X>(\n    maximumLag: number,\n    decide: (a: A) => Effect.Effect<Predicate<number>>,\n    done: (exit: Exit.Exit<never, Option.Option<E>>) => Effect.Effect<X>\n  ) => <R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n    never,\n    Scope.Scope | R\n  >,\n  <A, E, R, X>(\n    self: Stream.Stream<A, E, R>,\n    maximumLag: number,\n    decide: (a: A) => Effect.Effect<Predicate<number>>,\n    done: (exit: Exit.Exit<never, Option.Option<E>>) => Effect.Effect<X>\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n    never,\n    Scope.Scope | R\n  >\n>(4, <A, E, R, X>(\n  self: Stream.Stream<A, E, R>,\n  maximumLag: number,\n  decide: (a: A) => Effect.Effect<Predicate<number>>,\n  done: (exit: Exit.Exit<never, Option.Option<E>>) => Effect.Effect<X>\n): Effect.Effect<\n  Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n  never,\n  Scope.Scope | R\n> =>\n  pipe(\n    Effect.acquireRelease(\n      Ref.make<Map<number, Queue.Queue<Exit.Exit<A, Option.Option<E>>>>>(new Map()),\n      (ref, _) => pipe(Ref.get(ref), Effect.flatMap((queues) => pipe(queues.values(), Effect.forEach(Queue.shutdown))))\n    ),\n    Effect.flatMap((queuesRef) =>\n      Effect.gen(function*($) {\n        const offer = (a: A): Effect.Effect<void> =>\n          pipe(\n            decide(a),\n            Effect.flatMap((shouldProcess) =>\n              pipe(\n                Ref.get(queuesRef),\n                Effect.flatMap((queues) =>\n                  pipe(\n                    queues.entries(),\n                    Effect.reduce(Chunk.empty<number>(), (acc, [id, queue]) => {\n                      if (shouldProcess(id)) {\n                        return pipe(\n                          Queue.offer(queue, Exit.succeed(a)),\n                          Effect.matchCauseEffect({\n                            onFailure: (cause) =>\n                              // Ignore all downstream queues that were shut\n                              // down and remove them later\n                              Cause.isInterrupted(cause) ?\n                                Effect.succeed(pipe(acc, Chunk.prepend(id))) :\n                                Effect.failCause(cause),\n                            onSuccess: () => Effect.succeed(acc)\n                          })\n                        )\n                      }\n                      return Effect.succeed(acc)\n                    }),\n                    Effect.flatMap((ids) => {\n                      if (Chunk.isNonEmpty(ids)) {\n                        return pipe(\n                          Ref.update(queuesRef, (map) => {\n                            for (const id of ids) {\n                              map.delete(id)\n                            }\n                            return map\n                          })\n                        )\n                      }\n                      return Effect.void\n                    })\n                  )\n                )\n              )\n            ),\n            Effect.asVoid\n          )\n        const queuesLock = yield* $(Effect.makeSemaphore(1))\n        const newQueue = yield* $(\n          Ref.make<Effect.Effect<[number, Queue.Queue<Exit.Exit<A, Option.Option<E>>>]>>(\n            pipe(\n              Queue.bounded<Exit.Exit<A, Option.Option<E>>>(maximumLag),\n              Effect.flatMap((queue) => {\n                const id = newDistributedWithDynamicId()\n                return pipe(\n                  Ref.update(queuesRef, (map) => map.set(id, queue)),\n                  Effect.as([id, queue])\n                )\n              })\n            )\n          )\n        )\n        const finalize = (endTake: Exit.Exit<never, Option.Option<E>>): Effect.Effect<void> =>\n          // Make sure that no queues are currently being added\n          queuesLock.withPermits(1)(\n            pipe(\n              Ref.set(\n                newQueue,\n                pipe(\n                  // All newly created queues should end immediately\n                  Queue.bounded<Exit.Exit<A, Option.Option<E>>>(1),\n                  Effect.tap((queue) => Queue.offer(queue, endTake)),\n                  Effect.flatMap((queue) => {\n                    const id = newDistributedWithDynamicId()\n                    return pipe(\n                      Ref.update(queuesRef, (map) => map.set(id, queue)),\n                      Effect.as(Tuple.make(id, queue))\n                    )\n                  })\n                )\n              ),\n              Effect.zipRight(\n                pipe(\n                  Ref.get(queuesRef),\n                  Effect.flatMap((map) =>\n                    pipe(\n                      Chunk.fromIterable(map.values()),\n                      Effect.forEach((queue) =>\n                        pipe(\n                          Queue.offer(queue, endTake),\n                          Effect.catchSomeCause((cause) =>\n                            Cause.isInterrupted(cause) ? Option.some(Effect.void) : Option.none()\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              ),\n              Effect.zipRight(done(endTake)),\n              Effect.asVoid\n            )\n          )\n        yield* $(\n          self,\n          runForEachScoped(offer),\n          Effect.matchCauseEffect({\n            onFailure: (cause) => finalize(Exit.failCause(pipe(cause, Cause.map(Option.some)))),\n            onSuccess: () => finalize(Exit.fail(Option.none()))\n          }),\n          Effect.forkScoped\n        )\n        return queuesLock.withPermits(1)(\n          Effect.flatten(Ref.get(newQueue))\n        )\n      })\n    )\n  ))\n\n/** @internal */\nexport const drain = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<never, E, R> =>\n  new StreamImpl(channel.drain(toChannel(self)))\n\n/** @internal */\nexport const drainFork = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> =>\n    fromEffect(Deferred.make<never, E2>()).pipe(flatMap((backgroundDied) =>\n      scopedWith((scope) =>\n        toChannel(that).pipe(\n          channel.drain,\n          channelExecutor.runIn(scope),\n          Effect.catchAllCause((cause) => Deferred.failCause(backgroundDied, cause)),\n          Effect.forkIn(scope)\n        )\n      ).pipe(crossRight(interruptWhenDeferred(self, backgroundDied)))\n    ))\n)\n\n/** @internal */\nexport const drop = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> => {\n  const loop = (r: number): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> =>\n    core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const dropped = pipe(input, Chunk.drop(r))\n        const leftover = Math.max(0, r - input.length)\n        const more = Chunk.isEmpty(input) || leftover > 0\n        if (more) {\n          return loop(leftover)\n        }\n        return pipe(\n          core.write(dropped),\n          channel.zipRight(channel.identityChannel<Chunk.Chunk<A>, never, unknown>())\n        )\n      },\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop(n))))\n})\n\n/** @internal */\nexport const dropRight = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> => {\n  if (n <= 0) {\n    return identityStream()\n  }\n  return suspend(() => {\n    const queue = new RingBuffer<A>(n)\n    const reader: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, void, unknown> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const outputs = pipe(\n          input,\n          Chunk.filterMap((elem) => {\n            const head = queue.head()\n            queue.put(elem)\n            return head\n          })\n        )\n        return pipe(core.write(outputs), core.flatMap(() => reader))\n      },\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n    return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(reader)))\n  })\n})\n\n/** @internal */\nexport const dropUntil = dual<\n  <A>(predicate: Predicate<NoInfer<A>>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> =>\n    drop(dropWhile(self, (a) => !predicate(a)), 1)\n)\n\n/** @internal */\nexport const dropUntilEffect = dual<\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> => {\n    const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          Effect.dropUntil(input, predicate),\n          Effect.map(Chunk.unsafeFromArray),\n          Effect.map((leftover) => {\n            const more = Chunk.isEmpty(leftover)\n            if (more) {\n              return core.suspend(() => loop)\n            }\n            return pipe(\n              core.write(leftover),\n              channel.zipRight(channel.identityChannel<Chunk.Chunk<A>, E | E2, unknown>())\n            )\n          }),\n          channel.unwrap\n        ),\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n    return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop)))\n  }\n)\n\n/** @internal */\nexport const dropWhile = dual<\n  <A>(predicate: Predicate<NoInfer<A>>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> => {\n  const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> = core.readWith({\n    onInput: (input: Chunk.Chunk<A>) => {\n      const output = Chunk.dropWhile(input, predicate)\n      if (Chunk.isEmpty(output)) {\n        return core.suspend(() => loop)\n      }\n      return channel.zipRight(\n        core.write(output),\n        channel.identityChannel<Chunk.Chunk<A>, never, unknown>()\n      )\n    },\n    onFailure: core.fail,\n    onDone: core.succeedNow\n  })\n  return new StreamImpl(channel.pipeToOrFail(toChannel(self), loop))\n})\n\n/** @internal */\nexport const dropWhileEffect = dual<\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> => {\n    const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          Effect.dropWhile(input, predicate),\n          Effect.map(Chunk.unsafeFromArray),\n          Effect.map((leftover) => {\n            const more = Chunk.isEmpty(leftover)\n            if (more) {\n              return core.suspend(() => loop)\n            }\n            return channel.zipRight(\n              core.write(leftover),\n              channel.identityChannel<Chunk.Chunk<A>, E | E2, unknown>()\n            )\n          }),\n          channel.unwrap\n        ),\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n    return new StreamImpl(channel.pipeToOrFail(\n      toChannel(self),\n      loop\n    ))\n  }\n)\n\n/** @internal */\nexport const either = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<Either.Either<A, E>, never, R> =>\n  pipe(self, map(Either.right), catchAll((error) => make(Either.left(error))))\n\n/** @internal */\nexport const empty: Stream.Stream<never> = new StreamImpl(core.void)\n\n/** @internal */\nexport const ensuring = dual<\n  <X, R2>(\n    finalizer: Effect.Effect<X, never, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, R2>(self: Stream.Stream<A, E, R>, finalizer: Effect.Effect<X, never, R2>) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, R2>(self: Stream.Stream<A, E, R>, finalizer: Effect.Effect<X, never, R2>): Stream.Stream<A, E, R2 | R> =>\n    new StreamImpl(pipe(toChannel(self), channel.ensuring(finalizer)))\n)\n\n/** @internal */\nexport const ensuringWith = dual<\n  <E, R2>(\n    finalizer: (exit: Exit.Exit<unknown, E>) => Effect.Effect<unknown, never, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R | R2>,\n  <A, E, R, R2>(\n    self: Stream.Stream<A, E, R>,\n    finalizer: (exit: Exit.Exit<unknown, E>) => Effect.Effect<unknown, never, R2>\n  ) => Stream.Stream<A, E, R | R2>\n>(2, (self, finalizer) => new StreamImpl(core.ensuringWith(toChannel(self), finalizer)))\n\n/** @internal */\nexport const context = <R>(): Stream.Stream<Context.Context<R>, never, R> => fromEffect(Effect.context<R>())\n\n/** @internal */\nexport const contextWith = <R, A>(f: (env: Context.Context<R>) => A): Stream.Stream<A, never, R> =>\n  pipe(context<R>(), map(f))\n\n/** @internal */\nexport const contextWithEffect = <R0, A, E, R>(\n  f: (env: Context.Context<R0>) => Effect.Effect<A, E, R>\n): Stream.Stream<A, E, R0 | R> => pipe(context<R0>(), mapEffectSequential(f))\n\n/** @internal */\nexport const contextWithStream = <R0, A, E, R>(\n  f: (env: Context.Context<R0>) => Stream.Stream<A, E, R>\n): Stream.Stream<A, E, R0 | R> => pipe(context<R0>(), flatMap(f))\n\n/** @internal */\nexport const execute = <X, E, R>(effect: Effect.Effect<X, E, R>): Stream.Stream<never, E, R> =>\n  drain(fromEffect(effect))\n\n/** @internal */\nexport const fail = <E>(error: E): Stream.Stream<never, E> => fromEffectOption(Effect.fail(Option.some(error)))\n\n/** @internal */\nexport const failSync = <E>(evaluate: LazyArg<E>): Stream.Stream<never, E> =>\n  fromEffectOption(Effect.failSync(() => Option.some(evaluate())))\n\n/** @internal */\nexport const failCause = <E>(cause: Cause.Cause<E>): Stream.Stream<never, E> => fromEffect(Effect.failCause(cause))\n\n/** @internal */\nexport const failCauseSync = <E>(evaluate: LazyArg<Cause.Cause<E>>): Stream.Stream<never, E> =>\n  fromEffect(Effect.failCauseSync(evaluate))\n\n/** @internal */\nexport const filter: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>\n  <A, B extends A>(predicate: Predicate<B>): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>\n  <A, E, R, B extends A>(self: Stream.Stream<A, E, R>, refinement: Refinement<A, B>): Stream.Stream<B, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>) => mapChunks(self, Chunk.filter(predicate))\n)\n\n/** @internal */\nexport const filterEffect = dual<\n  <A, E2, R2>(\n    f: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> => {\n    const loop = (\n      iterator: Iterator<A>\n    ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> => {\n      const next = iterator.next()\n      if (next.done) {\n        return core.readWithCause({\n          onInput: (input) => loop(input[Symbol.iterator]()),\n          onFailure: core.failCause,\n          onDone: core.succeed\n        })\n      } else {\n        return pipe(\n          f(next.value),\n          Effect.map((bool) =>\n            bool ?\n              pipe(core.write(Chunk.of(next.value)), core.flatMap(() => loop(iterator))) :\n              loop(iterator)\n          ),\n          channel.unwrap\n        )\n      }\n    }\n    return new StreamImpl(\n      core.suspend(() => pipe(toChannel(self), core.pipeTo(loop(Chunk.empty<A>()[Symbol.iterator]()))))\n    )\n  }\n)\n\n/** @internal */\nexport const filterMap = dual<\n  <A, B>(pf: (a: A) => Option.Option<B>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, pf: (a: A) => Option.Option<B>) => Stream.Stream<B, E, R>\n>(\n  2,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, pf: (a: A) => Option.Option<B>): Stream.Stream<B, E, R> =>\n    mapChunks(self, Chunk.filterMap(pf))\n)\n\n/** @internal */\nexport const filterMapEffect = dual<\n  <A, A2, E2, R2>(\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    suspend(() => {\n      const loop = (\n        iterator: Iterator<A>\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R | R2> => {\n        const next = iterator.next()\n        if (next.done) {\n          return core.readWithCause({\n            onInput: (input) => loop(input[Symbol.iterator]()),\n            onFailure: core.failCause,\n            onDone: core.succeed\n          })\n        } else {\n          return pipe(\n            pf(next.value),\n            Option.match({\n              onNone: () => Effect.sync(() => loop(iterator)),\n              onSome: Effect.map((a2) => core.flatMap(core.write(Chunk.of(a2)), () => loop(iterator)))\n            }),\n            channel.unwrap\n          )\n        }\n      }\n      return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop(Chunk.empty<A>()[Symbol.iterator]()))))\n    })\n)\n\n/** @internal */\nexport const filterMapWhile = dual<\n  <A, A2>(\n    pf: (a: A) => Option.Option<A2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, pf: (a: A) => Option.Option<A2>) => Stream.Stream<A2, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, pf: (a: A) => Option.Option<A2>) => {\n    const loop: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E, E, unknown, unknown> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const mapped = Chunk.filterMapWhile(input, pf)\n        if (mapped.length === input.length) {\n          return pipe(core.write(mapped), core.flatMap(() => loop))\n        }\n        return core.write(mapped)\n      },\n      onFailure: core.fail,\n      onDone: core.succeed\n    })\n    return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop)))\n  }\n)\n\n/** @internal */\nexport const filterMapWhileEffect = dual<\n  <A, A2, E2, R2>(\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    suspend(() => {\n      const loop = (\n        iterator: Iterator<A>\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R | R2> => {\n        const next = iterator.next()\n        if (next.done) {\n          return core.readWithCause({\n            onInput: (input) => loop(input[Symbol.iterator]()),\n            onFailure: core.failCause,\n            onDone: core.succeed\n          })\n        } else {\n          return channel.unwrap(\n            Option.match(pf(next.value), {\n              onNone: () => Effect.succeed(core.void),\n              onSome: Effect.map(\n                (a2) => core.flatMap(core.write(Chunk.of(a2)), () => loop(iterator))\n              )\n            })\n          )\n        }\n      }\n      return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop(Chunk.empty<A>()[Symbol.iterator]()))))\n    })\n)\n\n/** @internal */\nexport const finalizer = <R, X>(finalizer: Effect.Effect<X, never, R>): Stream.Stream<void, never, R> =>\n  acquireRelease(Effect.void, () => finalizer)\n\n/** @internal */\nexport const find: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>\n  <A, E, R, B extends A>(self: Stream.Stream<A, E, R>, refinement: Refinement<A, B>): Stream.Stream<B, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R>\n} = dual(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> => {\n  const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown, R> = core.readWith({\n    onInput: (input: Chunk.Chunk<A>) =>\n      Option.match(Chunk.findFirst(input, predicate), {\n        onNone: () => loop,\n        onSome: (n) => core.write(Chunk.of(n))\n      }),\n    onFailure: core.fail,\n    onDone: () => core.void\n  })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop)))\n})\n\n/** @internal */\nexport const findEffect: {\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          Effect.findFirst(input, predicate),\n          Effect.map(Option.match({\n            onNone: () => loop,\n            onSome: (n) => core.write(Chunk.of(n))\n          })),\n          channel.unwrap\n        ),\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop)))\n  }\n)\n\n/** @internal */\nexport const flatMap = dual<\n  <A, A2, E2, R2>(\n    f: (a: A) => Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n      readonly switch?: boolean | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n      readonly switch?: boolean | undefined\n    }\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  (args) => isStream(args[0]),\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n      readonly switch?: boolean | undefined\n    }\n  ): Stream.Stream<A2, E | E2, R | R2> => {\n    const bufferSize = options?.bufferSize ?? 16\n\n    if (options?.switch) {\n      return matchConcurrency(\n        options?.concurrency,\n        () => flatMapParSwitchBuffer(self, 1, bufferSize, f),\n        (n) => flatMapParSwitchBuffer(self, n, bufferSize, f)\n      )\n    }\n\n    return matchConcurrency(\n      options?.concurrency,\n      () =>\n        new StreamImpl(\n          channel.concatMap(\n            toChannel(self),\n            (as) =>\n              pipe(\n                as,\n                Chunk.map((a) => toChannel(f(a))),\n                Chunk.reduce(\n                  core.void as Channel.Channel<Chunk.Chunk<A2>, unknown, E2, unknown, unknown, unknown, R2>,\n                  (left, right) => pipe(left, channel.zipRight(right))\n                )\n              )\n          )\n        ),\n      (_) =>\n        new StreamImpl(\n          pipe(\n            toChannel(self),\n            channel.concatMap(channel.writeChunk),\n            channel.mergeMap((out) => toChannel(f(out)), options as any)\n          )\n        )\n    )\n  }\n)\n\n/** @internal */\nexport const matchConcurrency = <A>(\n  concurrency: number | \"unbounded\" | undefined,\n  sequential: () => A,\n  bounded: (n: number) => A\n) => {\n  switch (concurrency) {\n    case undefined:\n      return sequential()\n    case \"unbounded\":\n      return bounded(Number.MAX_SAFE_INTEGER)\n    default:\n      return concurrency > 1 ? bounded(concurrency) : sequential()\n  }\n}\n\nconst flatMapParSwitchBuffer = dual<\n  <A, A2, E2, R2>(\n    n: number,\n    bufferSize: number,\n    f: (a: A) => Stream.Stream<A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    bufferSize: number,\n    f: (a: A) => Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  4,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    bufferSize: number,\n    f: (a: A) => Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    new StreamImpl(\n      pipe(\n        toChannel(self),\n        channel.concatMap(channel.writeChunk),\n        channel.mergeMap((out) => toChannel(f(out)), {\n          concurrency: n,\n          mergeStrategy: MergeStrategy.BufferSliding(),\n          bufferSize\n        })\n      )\n    )\n)\n\n/** @internal */\nexport const flatten = dual<\n  (options?: {\n    readonly concurrency?: number | \"unbounded\" | undefined\n    readonly bufferSize?: number | undefined\n  }) => <A, E2, R2, E, R>(\n    self: Stream.Stream<Stream.Stream<A, E2, R2>, E, R>\n  ) => Stream.Stream<A, E | E2, R | R2>,\n  <A, E2, R2, E, R>(\n    self: Stream.Stream<Stream.Stream<A, E2, R2>, E, R>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n    }\n  ) => Stream.Stream<A, E | E2, R | R2>\n>((args) => isStream(args[0]), (self, options) => flatMap(self, identity, options))\n\n/** @internal */\nexport const flattenChunks = <A, E, R>(self: Stream.Stream<Chunk.Chunk<A>, E, R>): Stream.Stream<A, E, R> => {\n  const flatten: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<Chunk.Chunk<A>>, E, E, unknown, unknown> = core\n    .readWithCause({\n      onInput: (chunks: Chunk.Chunk<Chunk.Chunk<A>>) =>\n        core.flatMap(\n          channel.writeChunk(chunks),\n          () => flatten\n        ),\n      onFailure: core.failCause,\n      onDone: () => core.void\n    })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(flatten)))\n}\n\n/** @internal */\nexport const flattenEffect = dual<\n  (\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly unordered?: boolean | undefined\n    }\n  ) => <A, E2, R2, E, R>(\n    self: Stream.Stream<Effect.Effect<A, E2, R2>, E, R>\n  ) => Stream.Stream<A, E | E2, R | R2>,\n  <A, E2, R2, E, R>(\n    self: Stream.Stream<Effect.Effect<A, E2, R2>, E, R>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly unordered?: boolean | undefined\n    }\n  ) => Stream.Stream<A, E | E2, R | R2>\n>(\n  (args) => isStream(args[0]),\n  (self, options) =>\n    options?.unordered ?\n      flatMap(self, (a) => fromEffect(a), { concurrency: options.concurrency }) :\n      matchConcurrency(\n        options?.concurrency,\n        () => mapEffectSequential(self, identity),\n        (n) =>\n          new StreamImpl(\n            pipe(\n              toChannel(self),\n              channel.concatMap(channel.writeChunk),\n              channel.mapOutEffectPar(identity, n),\n              channel.mapOut(Chunk.of)\n            )\n          )\n      )\n)\n\n/** @internal */\nexport const flattenExitOption = <A, E2, E, R>(\n  self: Stream.Stream<Exit.Exit<A, Option.Option<E2>>, E, R>\n): Stream.Stream<A, E | E2, R> => {\n  const processChunk = (\n    chunk: Chunk.Chunk<Exit.Exit<A, Option.Option<E2>>>,\n    cont: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<Exit.Exit<A, Option.Option<E2>>>, E | E2, E, unknown, unknown, R>\n  ) => {\n    const [toEmit, rest] = pipe(chunk, Chunk.splitWhere((exit) => !Exit.isSuccess(exit)))\n    const next = pipe(\n      Chunk.head(rest),\n      Option.match({\n        onNone: () => cont,\n        onSome: Exit.match({\n          onFailure: (cause) =>\n            Option.match(Cause.flipCauseOption(cause), {\n              onNone: () => core.void,\n              onSome: core.failCause\n            }),\n          onSuccess: () => core.void\n        })\n      })\n    )\n    return pipe(\n      core.write(pipe(\n        toEmit,\n        Chunk.filterMap((exit) =>\n          Exit.isSuccess(exit) ?\n            Option.some(exit.value) :\n            Option.none()\n        )\n      )),\n      core.flatMap(() => next)\n    )\n  }\n  const process: Channel.Channel<\n    Chunk.Chunk<A>,\n    Chunk.Chunk<Exit.Exit<A, Option.Option<E2>>>,\n    E | E2,\n    E,\n    unknown,\n    unknown,\n    R\n  > = core.readWithCause({\n    onInput: (chunk: Chunk.Chunk<Exit.Exit<A, Option.Option<E2>>>) => processChunk(chunk, process),\n    onFailure: (cause) => core.failCause<E | E2>(cause),\n    onDone: () => core.void\n  })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(process)))\n}\n\n/** @internal */\nexport const flattenIterables = <A, E, R>(self: Stream.Stream<Iterable<A>, E, R>): Stream.Stream<A, E, R> =>\n  pipe(self, map(Chunk.fromIterable), flattenChunks)\n\n/** @internal */\nexport const flattenTake = <A, E2, E, R>(self: Stream.Stream<Take.Take<A, E2>, E, R>): Stream.Stream<A, E | E2, R> =>\n  flattenChunks(flattenExitOption(pipe(self, map((take) => take.exit))))\n\n/** @internal */\nexport const forever = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, E, R> =>\n  new StreamImpl(channel.repeated(toChannel(self)))\n\n/** @internal */\nexport const fromAsyncIterable = <A, E>(\n  iterable: AsyncIterable<A>,\n  onError: (e: unknown) => E\n) =>\n  pipe(\n    Effect.acquireRelease(\n      Effect.sync(() => iterable[Symbol.asyncIterator]()),\n      (iterator) => iterator.return ? Effect.promise(async () => iterator.return!()) : Effect.void\n    ),\n    Effect.map((iterator) =>\n      repeatEffectOption(pipe(\n        Effect.tryPromise({\n          try: async () => iterator.next(),\n          catch: (reason) => Option.some(onError(reason))\n        }),\n        Effect.flatMap((result) => result.done ? Effect.fail(Option.none()) : Effect.succeed(result.value))\n      ))\n    ),\n    unwrapScoped\n  )\n\n/** @internal */\nexport const fromChannel = <A, E, R>(\n  channel: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R>\n): Stream.Stream<A, E, R> => new StreamImpl(channel)\n\n/** @internal */\nexport const toChannel = <A, E, R>(\n  stream: Stream.Stream<A, E, R>\n): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R> => {\n  if (\"channel\" in stream) {\n    return (stream as StreamImpl<A, E, R>).channel\n  } else if (Effect.isEffect(stream)) {\n    return toChannel(fromEffect(stream)) as any\n  } else {\n    throw new TypeError(`Expected a Stream.`)\n  }\n}\n\n/** @internal */\nexport const fromChunk = <A>(chunk: Chunk.Chunk<A>): Stream.Stream<A> =>\n  new StreamImpl(Chunk.isEmpty(chunk) ? core.void : core.write(chunk))\n\n/** @internal */\nexport const fromChunkPubSub: {\n  <A>(pubsub: PubSub.PubSub<Chunk.Chunk<A>>, options: {\n    readonly scoped: true\n    readonly shutdown?: boolean | undefined\n  }): Effect.Effect<Stream.Stream<A>, never, Scope.Scope>\n  <A>(pubsub: PubSub.PubSub<Chunk.Chunk<A>>, options?: {\n    readonly scoped?: false | undefined\n    readonly shutdown?: boolean | undefined\n  }): Stream.Stream<A>\n} = (pubsub, options): any => {\n  if (options?.scoped) {\n    const effect = Effect.map(PubSub.subscribe(pubsub), fromChunkQueue)\n    return options.shutdown ? Effect.map(effect, ensuring(PubSub.shutdown(pubsub))) : effect\n  }\n  const stream = flatMap(scoped(PubSub.subscribe(pubsub)), fromChunkQueue)\n  return options?.shutdown ? ensuring(stream, PubSub.shutdown(pubsub)) : stream\n}\n\n/** @internal */\nexport const fromChunkQueue = <A>(queue: Queue.Dequeue<Chunk.Chunk<A>>, options?: {\n  readonly shutdown?: boolean | undefined\n}): Stream.Stream<A> =>\n  pipe(\n    Queue.take(queue),\n    Effect.catchAllCause((cause) =>\n      pipe(\n        Queue.isShutdown(queue),\n        Effect.flatMap((isShutdown) =>\n          isShutdown && Cause.isInterrupted(cause) ?\n            pull.end() :\n            pull.failCause(cause)\n        )\n      )\n    ),\n    repeatEffectChunkOption,\n    options?.shutdown ? ensuring(Queue.shutdown(queue)) : identity\n  )\n\n/** @internal */\nexport const fromChunks = <A>(\n  ...chunks: Array<Chunk.Chunk<A>>\n): Stream.Stream<A> => pipe(fromIterable(chunks), flatMap(fromChunk))\n\n/** @internal */\nexport const fromEffect = <A, E, R>(effect: Effect.Effect<A, E, R>): Stream.Stream<A, E, R> =>\n  pipe(effect, Effect.mapError(Option.some), fromEffectOption)\n\n/** @internal */\nexport const fromEffectOption = <A, E, R>(effect: Effect.Effect<A, Option.Option<E>, R>): Stream.Stream<A, E, R> =>\n  new StreamImpl(\n    channel.unwrap(\n      Effect.match(effect, {\n        onFailure: Option.match({\n          onNone: () => core.void,\n          onSome: core.fail\n        }),\n        onSuccess: (a) => core.write(Chunk.of(a))\n      })\n    )\n  )\n\n/** @internal */\nexport const fromPubSub: {\n  <A>(pubsub: PubSub.PubSub<A>, options: {\n    readonly scoped: true\n    readonly maxChunkSize?: number | undefined\n    readonly shutdown?: boolean | undefined\n  }): Effect.Effect<Stream.Stream<A>, never, Scope.Scope>\n  <A>(pubsub: PubSub.PubSub<A>, options?: {\n    readonly scoped?: false | undefined\n    readonly maxChunkSize?: number | undefined\n    readonly shutdown?: boolean | undefined\n  }): Stream.Stream<A>\n} = (pubsub, options): any => {\n  const maxChunkSize = options?.maxChunkSize ?? DefaultChunkSize\n\n  if (options?.scoped) {\n    const effect = Effect.map(\n      PubSub.subscribe(pubsub),\n      (queue) => fromQueue(queue, { maxChunkSize, shutdown: true })\n    )\n\n    return options.shutdown ? Effect.map(effect, ensuring(PubSub.shutdown(pubsub))) : effect\n  }\n  const stream = flatMap(\n    scoped(PubSub.subscribe(pubsub)),\n    (queue) => fromQueue(queue, { maxChunkSize })\n  )\n  return options?.shutdown ? ensuring(stream, PubSub.shutdown(pubsub)) : stream\n}\n\n/** @internal */\nexport const fromTPubSub = <A>(pubsub: TPubSub.TPubSub<A>): Stream.Stream<A> => {\n  return unwrapScoped(Effect.map(\n    TPubSub.subscribeScoped(pubsub),\n    (queue) => fromTQueue(queue)\n  ))\n}\n\n/** @internal */\nexport const fromIterable = <A>(iterable: Iterable<A>): Stream.Stream<A> =>\n  suspend(() =>\n    Chunk.isChunk(iterable) ?\n      fromChunk(iterable) :\n      fromIteratorSucceed(iterable[Symbol.iterator]())\n  )\n\n/** @internal */\nexport const fromIterableEffect = <A, E, R>(\n  effect: Effect.Effect<Iterable<A>, E, R>\n): Stream.Stream<A, E, R> => pipe(effect, Effect.map(fromIterable), unwrap)\n\n/** @internal */\nexport const fromIteratorSucceed = <A>(\n  iterator: Iterator<A>,\n  maxChunkSize = DefaultChunkSize\n): Stream.Stream<A> => {\n  return pipe(\n    Effect.sync(() => {\n      let builder: Array<A> = []\n      const loop = (\n        iterator: Iterator<A>\n      ): Channel.Channel<Chunk.Chunk<A>, unknown, never, unknown, unknown, unknown> =>\n        pipe(\n          Effect.sync(() => {\n            let next: IteratorResult<A, any> = iterator.next()\n            if (maxChunkSize === 1) {\n              if (next.done) {\n                return core.void\n              }\n              return pipe(\n                core.write(Chunk.of(next.value)),\n                core.flatMap(() => loop(iterator))\n              )\n            }\n            builder = []\n            let count = 0\n            while (next.done === false) {\n              builder.push(next.value)\n              count = count + 1\n              if (count >= maxChunkSize) {\n                break\n              }\n              next = iterator.next()\n            }\n            if (count > 0) {\n              return pipe(\n                core.write(Chunk.unsafeFromArray(builder)),\n                core.flatMap(() => loop(iterator))\n              )\n            }\n            return core.void\n          }),\n          channel.unwrap\n        )\n      return new StreamImpl(loop(iterator))\n    }),\n    unwrap\n  )\n}\n\n/** @internal */\nexport const fromPull = <R, R2, E, A>(\n  effect: Effect.Effect<Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R2>, never, R | Scope.Scope>\n): Stream.Stream<A, E, Exclude<R, Scope.Scope> | R2> => pipe(effect, Effect.map(repeatEffectChunkOption), unwrapScoped)\n\n/** @internal */\nexport const fromQueue = <A>(\n  queue: Queue.Dequeue<A>,\n  options?: {\n    readonly maxChunkSize?: number | undefined\n    readonly shutdown?: boolean | undefined\n  }\n): Stream.Stream<A> =>\n  pipe(\n    Queue.takeBetween(queue, 1, options?.maxChunkSize ?? DefaultChunkSize),\n    Effect.catchAllCause((cause) =>\n      pipe(\n        Queue.isShutdown(queue),\n        Effect.flatMap((isShutdown) =>\n          isShutdown && Cause.isInterrupted(cause) ?\n            pull.end() :\n            pull.failCause(cause)\n        )\n      )\n    ),\n    repeatEffectChunkOption,\n    options?.shutdown ? ensuring(Queue.shutdown(queue)) : identity\n  )\n\n/** @internal */\nexport const fromTQueue = <A>(queue: TQueue.TDequeue<A>): Stream.Stream<A> =>\n  pipe(\n    TQueue.take(queue),\n    Effect.map(Chunk.of),\n    Effect.catchAllCause((cause) =>\n      pipe(\n        TQueue.isShutdown(queue),\n        Effect.flatMap((isShutdown) =>\n          isShutdown && Cause.isInterrupted(cause) ?\n            pull.end() :\n            pull.failCause(cause)\n        )\n      )\n    ),\n    repeatEffectChunkOption\n  )\n\n/** @internal */\nexport const fromSchedule = <A, R>(schedule: Schedule.Schedule<A, unknown, R>): Stream.Stream<A, never, R> =>\n  pipe(\n    Schedule.driver(schedule),\n    Effect.map((driver) => repeatEffectOption(driver.next(void 0))),\n    unwrap\n  )\n\n/** @internal */\nexport const fromReadableStream: {\n  <A, E>(\n    options: {\n      readonly evaluate: LazyArg<ReadableStream<A>>\n      readonly onError: (error: unknown) => E\n      readonly releaseLockOnEnd?: boolean | undefined\n    }\n  ): Stream.Stream<A, E>\n  <A, E>(\n    evaluate: LazyArg<ReadableStream<A>>,\n    onError: (error: unknown) => E\n  ): Stream.Stream<A, E>\n} = <A, E>(\n  ...args: [options: {\n    readonly evaluate: LazyArg<ReadableStream<A>>\n    readonly onError: (error: unknown) => E\n    readonly releaseLockOnEnd?: boolean | undefined\n  }] | [\n    evaluate: LazyArg<ReadableStream<A>>,\n    onError: (error: unknown) => E\n  ]\n): Stream.Stream<A, E> => {\n  const evaluate = args.length === 1 ? args[0].evaluate : args[0]\n  const onError = args.length === 1 ? args[0].onError : args[1]\n  const releaseLockOnEnd = args.length === 1 ? args[0].releaseLockOnEnd === true : false\n  return unwrapScoped(Effect.map(\n    Effect.acquireRelease(\n      Effect.sync(() => evaluate().getReader()),\n      (reader) =>\n        releaseLockOnEnd\n          ? Effect.sync(() => reader.releaseLock())\n          : Effect.promise(() => reader.cancel())\n    ),\n    (reader) =>\n      repeatEffectOption(\n        Effect.flatMap(\n          Effect.tryPromise({\n            try: () => reader.read(),\n            catch: (reason) => Option.some(onError(reason))\n          }),\n          ({ done, value }) => done ? Effect.fail(Option.none()) : Effect.succeed(value)\n        )\n      )\n  ))\n}\n\n/** @internal */\nexport const fromReadableStreamByob: {\n  <E>(\n    options: {\n      readonly evaluate: LazyArg<ReadableStream<Uint8Array>>\n      readonly onError: (error: unknown) => E\n      readonly bufferSize?: number | undefined\n      readonly releaseLockOnEnd?: boolean | undefined\n    }\n  ): Stream.Stream<Uint8Array, E>\n  <E>(\n    evaluate: LazyArg<ReadableStream<Uint8Array>>,\n    onError: (error: unknown) => E,\n    allocSize?: number\n  ): Stream.Stream<Uint8Array, E>\n} = <E>(\n  ...args: [options: {\n    readonly evaluate: LazyArg<ReadableStream<Uint8Array>>\n    readonly onError: (error: unknown) => E\n    readonly bufferSize?: number | undefined\n    readonly releaseLockOnEnd?: boolean | undefined\n  }] | [\n    evaluate: LazyArg<ReadableStream<Uint8Array>>,\n    onError: (error: unknown) => E,\n    allocSize?: number | undefined\n  ]\n): Stream.Stream<Uint8Array, E> => {\n  const evaluate = args.length === 1 ? args[0].evaluate : args[0]\n  const onError = args.length === 1 ? args[0].onError : args[1]\n  const allocSize = (args.length === 1 ? args[0].bufferSize : args[2]) ?? 4096\n  const releaseLockOnEnd = args.length === 1 ? args[0].releaseLockOnEnd === true : false\n  return unwrapScoped(Effect.map(\n    Effect.acquireRelease(\n      Effect.sync(() => evaluate().getReader({ mode: \"byob\" })),\n      (reader) => releaseLockOnEnd ? Effect.sync(() => reader.releaseLock()) : Effect.promise(() => reader.cancel())\n    ),\n    (reader) =>\n      catchAll(\n        forever(readChunkStreamByobReader(reader, onError, allocSize)),\n        (error) => error === EOF ? empty : fail(error)\n      )\n  ))\n}\n\nconst EOF = Symbol.for(\"effect/Stream/EOF\")\n\nconst readChunkStreamByobReader = <E>(\n  reader: ReadableStreamBYOBReader,\n  onError: (error: unknown) => E,\n  size: number\n): Stream.Stream<Uint8Array, E | typeof EOF> => {\n  const buffer = new ArrayBuffer(size)\n  return paginateEffect(0, (offset) =>\n    Effect.flatMap(\n      Effect.tryPromise({\n        try: () => reader.read(new Uint8Array(buffer, offset, buffer.byteLength - offset)),\n        catch: (reason) => onError(reason)\n      }),\n      ({ done, value }) => {\n        if (done) {\n          return Effect.fail(EOF)\n        }\n        const newOffset = offset + value.byteLength\n        return Effect.succeed([\n          value,\n          newOffset >= buffer.byteLength\n            ? Option.none<number>()\n            : Option.some(newOffset)\n        ])\n      }\n    ))\n}\n\n/** @internal */\nexport const groupAdjacentBy = dual<\n  <A, K>(\n    f: (a: A) => K\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<[K, Chunk.NonEmptyChunk<A>], E, R>,\n  <A, E, R, K>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => K\n  ) => Stream.Stream<[K, Chunk.NonEmptyChunk<A>], E, R>\n>(\n  2,\n  <A, E, R, K>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => K\n  ): Stream.Stream<[K, Chunk.NonEmptyChunk<A>], E, R> => {\n    type Output = [K, Chunk.NonEmptyChunk<A>]\n    const groupAdjacentByChunk = (\n      state: Option.Option<Output>,\n      chunk: Chunk.Chunk<A>\n    ): [Option.Option<Output>, Chunk.Chunk<Output>] => {\n      if (Chunk.isEmpty(chunk)) {\n        return [state, Chunk.empty()]\n      }\n      const builder: Array<Output> = []\n      let from = 0\n      let until = 0\n      let key: K | undefined = undefined\n      let previousChunk = Chunk.empty<A>()\n      switch (state._tag) {\n        case \"Some\": {\n          const tuple = state.value\n          key = tuple[0]\n          let loop = true\n          while (loop && until < chunk.length) {\n            const input = Chunk.unsafeGet(chunk, until)\n            const updatedKey = f(input)\n            if (!Equal.equals(key, updatedKey)) {\n              const previousChunk = tuple[1]\n              const additionalChunk = Chunk.unsafeFromArray(Array.from(chunk).slice(from, until))\n              const group = Chunk.appendAll(previousChunk, additionalChunk)\n              builder.push([key, group])\n              key = updatedKey\n              from = until\n              loop = false\n            }\n            until = until + 1\n          }\n          if (loop) {\n            previousChunk = tuple[1]\n          }\n          break\n        }\n        case \"None\": {\n          key = f(Chunk.unsafeGet(chunk, until))\n          until = until + 1\n          break\n        }\n      }\n      while (until < chunk.length) {\n        const input = Chunk.unsafeGet(chunk, until)\n        const updatedKey = f(input)\n        if (!Equal.equals(key, updatedKey)) {\n          builder.push([key, Chunk.unsafeFromArray(Array.from(chunk).slice(from, until)) as Chunk.NonEmptyChunk<A>])\n          key = updatedKey\n          from = until\n        }\n        until = until + 1\n      }\n      const nonEmptyChunk = Chunk.appendAll(previousChunk, Chunk.unsafeFromArray(Array.from(chunk).slice(from, until)))\n      const output = Chunk.unsafeFromArray(builder)\n      return [Option.some([key, nonEmptyChunk as Chunk.NonEmptyChunk<A>]), output]\n    }\n\n    const groupAdjacent = (\n      state: Option.Option<Output>\n    ): Channel.Channel<Chunk.Chunk<Output>, Chunk.Chunk<A>, never, never, unknown, unknown> =>\n      core.readWithCause({\n        onInput: (input: Chunk.Chunk<A>) => {\n          const [updatedState, output] = groupAdjacentByChunk(state, input)\n          return Chunk.isEmpty(output)\n            ? groupAdjacent(updatedState)\n            : core.flatMap(core.write(output), () => groupAdjacent(updatedState))\n        },\n        onFailure: (cause) =>\n          Option.match(state, {\n            onNone: () => core.failCause(cause),\n            onSome: (output) => core.flatMap(core.write(Chunk.of(output)), () => core.failCause(cause))\n          }),\n        onDone: (done) =>\n          Option.match(state, {\n            onNone: () => core.succeedNow(done),\n            onSome: (output) => core.flatMap(core.write(Chunk.of(output)), () => core.succeedNow(done))\n          })\n      })\n    return new StreamImpl(channel.pipeToOrFail(toChannel(self), groupAdjacent(Option.none())))\n  }\n)\n\n/** @internal */\nexport const grouped = dual<\n  (chunkSize: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n    pipe(self, rechunk(chunkSize), chunks)\n)\n\n/** @internal */\nexport const groupedWithin = dual<\n  (\n    chunkSize: number,\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    chunkSize: number,\n    duration: Duration.DurationInput\n  ) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(\n  3,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    chunkSize: number,\n    duration: Duration.DurationInput\n  ): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n    aggregateWithin(self, _sink.collectAllN(chunkSize), Schedule.spaced(duration))\n)\n\n/** @internal */\nexport const haltWhen = dual<\n  <X, E2, R2>(\n    effect: Effect.Effect<X, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<X, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    const writer = (\n      fiber: Fiber.Fiber<X, E2>\n    ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E | E2, void, unknown, R2> =>\n      pipe(\n        Fiber.poll(fiber),\n        Effect.map(Option.match({\n          onNone: () =>\n            core.readWith({\n              onInput: (input: Chunk.Chunk<A>) => core.flatMap(core.write(input), () => writer(fiber)),\n              onFailure: core.fail,\n              onDone: () => core.void\n            }),\n          onSome: Exit.match({\n            onFailure: core.failCause,\n            onSuccess: () => core.void\n          })\n        })),\n        channel.unwrap\n      )\n    return new StreamImpl(\n      channel.unwrapScopedWith((scope) =>\n        effect.pipe(\n          Effect.forkIn(scope),\n          Effect.map((fiber) => toChannel(self).pipe(core.pipeTo(writer(fiber))))\n        )\n      )\n    )\n  }\n)\n\n/** @internal */\nexport const haltAfter = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput): Stream.Stream<A, E, R> =>\n    pipe(self, haltWhen(Clock.sleep(duration)))\n)\n\n/** @internal */\nexport const haltWhenDeferred = dual<\n  <X, E2>(deferred: Deferred.Deferred<X, E2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, X, E2>(self: Stream.Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>) => Stream.Stream<A, E2 | E, R>\n>(\n  2,\n  <A, E, R, X, E2>(self: Stream.Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>): Stream.Stream<A, E | E2, R> => {\n    const writer: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E | E2, void, unknown, R> = pipe(\n      Deferred.poll(deferred),\n      Effect.map(Option.match({\n        onNone: () =>\n          core.readWith({\n            onInput: (input: Chunk.Chunk<A>) => pipe(core.write(input), core.flatMap(() => writer)),\n            onFailure: core.fail,\n            onDone: () => core.void\n          }),\n        onSome: (effect) =>\n          channel.unwrap(Effect.match(effect, {\n            onFailure: core.fail,\n            onSuccess: () => core.void\n          }))\n      })),\n      channel.unwrap\n    )\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(writer)))\n  }\n)\n\n/** @internal */\nexport const identityStream = <A, E = never, R = never>(): Stream.Stream<A, E, R> =>\n  new StreamImpl(\n    channel.identityChannel() as Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown>\n  )\n\n/** @internal */\nexport const interleave = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> => pipe(self, interleaveWith(that, forever(make(true, false))))\n)\n\n/** @internal */\nexport const interleaveWith = dual<\n  <A2, E2, R2, E3, R3>(\n    that: Stream.Stream<A2, E2, R2>,\n    decider: Stream.Stream<boolean, E3, R3>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E3 | E, R2 | R3 | R>,\n  <A, E, R, A2, E2, R2, E3, R3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    decider: Stream.Stream<boolean, E3, R3>\n  ) => Stream.Stream<A2 | A, E2 | E3 | E, R2 | R3 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2, E3, R3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    decider: Stream.Stream<boolean, E3, R3>\n  ): Stream.Stream<A2 | A, E2 | E3 | E, R2 | R3 | R> => {\n    const producer = (\n      handoff: Handoff.Handoff<Take.Take<A | A2, E | E2 | E3>>\n    ): Channel.Channel<never, A | A2, never, E | E2 | E3, void, unknown, R | R2 | R3> =>\n      core.readWithCause({\n        onInput: (value: A | A2) =>\n          core.flatMap(\n            core.fromEffect(\n              Handoff.offer<Take.Take<A | A2, E | E2 | E3>>(handoff, InternalTake.of(value))\n            ),\n            () => producer(handoff)\n          ),\n        onFailure: (cause) =>\n          core.fromEffect(\n            Handoff.offer<Take.Take<A | A2, E | E2 | E3>>(\n              handoff,\n              InternalTake.failCause(cause)\n            )\n          ),\n        onDone: () =>\n          core.fromEffect(\n            Handoff.offer<Take.Take<A | A2, E | E2 | E3>>(handoff, InternalTake.end)\n          )\n      })\n    return new StreamImpl(\n      channel.unwrapScopedWith((scope) =>\n        pipe(\n          Handoff.make<Take.Take<A | A2, E | E2 | E3>>(),\n          Effect.zip(Handoff.make<Take.Take<A | A2, E | E2 | E3>>()),\n          Effect.tap(([left]) =>\n            toChannel(self).pipe(\n              channel.concatMap(channel.writeChunk),\n              core.pipeTo(producer(left)),\n              channelExecutor.runIn(scope),\n              Effect.forkIn(scope)\n            )\n          ),\n          Effect.tap(([_, right]) =>\n            toChannel(that).pipe(\n              channel.concatMap(channel.writeChunk),\n              core.pipeTo(producer(right)),\n              channelExecutor.runIn(scope),\n              Effect.forkIn(scope)\n            )\n          ),\n          Effect.map(([left, right]) => {\n            const process = (\n              leftDone: boolean,\n              rightDone: boolean\n            ): Channel.Channel<Chunk.Chunk<A | A2>, boolean, E | E2 | E3, E | E2 | E3, void, unknown, R> =>\n              core.readWithCause({\n                onInput: (bool: boolean) => {\n                  if (bool && !leftDone) {\n                    return pipe(\n                      core.fromEffect(Handoff.take(left)),\n                      core.flatMap(InternalTake.match({\n                        onEnd: () => rightDone ? core.void : process(true, rightDone),\n                        onFailure: core.failCause,\n                        onSuccess: (chunk) => pipe(core.write(chunk), core.flatMap(() => process(leftDone, rightDone)))\n                      }))\n                    )\n                  }\n                  if (!bool && !rightDone) {\n                    return pipe(\n                      core.fromEffect(Handoff.take(right)),\n                      core.flatMap(InternalTake.match({\n                        onEnd: () => leftDone ? core.void : process(leftDone, true),\n                        onFailure: core.failCause,\n                        onSuccess: (chunk) => pipe(core.write(chunk), core.flatMap(() => process(leftDone, rightDone)))\n                      }))\n                    )\n                  }\n                  return process(leftDone, rightDone)\n                },\n                onFailure: core.failCause,\n                onDone: () => core.void\n              })\n            return pipe(\n              toChannel(decider),\n              channel.concatMap(channel.writeChunk),\n              core.pipeTo(process(false, false))\n            )\n          })\n        )\n      )\n    )\n  }\n)\n\n/** @internal */\nexport const intersperse = dual<\n  <A2>(element: A2) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, element: A2) => Stream.Stream<A2 | A, E, R>\n>(2, <A, E, R, A2>(self: Stream.Stream<A, E, R>, element: A2): Stream.Stream<A2 | A, E, R> =>\n  new StreamImpl(\n    pipe(\n      toChannel(self),\n      channel.pipeToOrFail(\n        core.suspend(() => {\n          const writer = (\n            isFirst: boolean\n          ): Channel.Channel<Chunk.Chunk<A | A2>, Chunk.Chunk<A>, E, E, unknown, unknown> =>\n            core.readWithCause({\n              onInput: (chunk: Chunk.Chunk<A>) => {\n                const builder: Array<A | A2> = []\n                let flagResult = isFirst\n                for (const output of chunk) {\n                  if (flagResult) {\n                    flagResult = false\n                    builder.push(output)\n                  } else {\n                    builder.push(element)\n                    builder.push(output)\n                  }\n                }\n                return pipe(\n                  core.write(Chunk.unsafeFromArray(builder)),\n                  core.flatMap(() => writer(flagResult))\n                )\n              },\n              onFailure: core.failCause,\n              onDone: () => core.void\n            })\n          return writer(true)\n        })\n      )\n    )\n  ))\n\n/** @internal */\nexport const intersperseAffixes = dual<\n  <A2, A3, A4>(\n    options: {\n      readonly start: A2\n      readonly middle: A3\n      readonly end: A4\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A3 | A4 | A, E, R>,\n  <A, E, R, A2, A3, A4>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly start: A2\n      readonly middle: A3\n      readonly end: A4\n    }\n  ) => Stream.Stream<A2 | A3 | A4 | A, E, R>\n>(\n  2,\n  <A, E, R, A2, A3, A4>(\n    self: Stream.Stream<A, E, R>,\n    { end, middle, start }: {\n      readonly start: A2\n      readonly middle: A3\n      readonly end: A4\n    }\n  ): Stream.Stream<A2 | A3 | A4 | A, E, R> =>\n    pipe(\n      make(start),\n      concat(pipe(self, intersperse(middle))),\n      concat(make(end))\n    )\n)\n\n/** @internal */\nexport const interruptAfter = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput): Stream.Stream<A, E, R> =>\n    pipe(self, interruptWhen(Clock.sleep(duration)))\n)\n\n/** @internal */\nexport const interruptWhen = dual<\n  <X, E2, R2>(\n    effect: Effect.Effect<X, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<X, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => new StreamImpl(pipe(toChannel(self), channel.interruptWhen(effect)))\n)\n\n/** @internal */\nexport const interruptWhenDeferred = dual<\n  <X, E2>(deferred: Deferred.Deferred<X, E2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, X, E2>(self: Stream.Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>) => Stream.Stream<A, E2 | E, R>\n>(\n  2,\n  <A, E, R, X, E2>(self: Stream.Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>): Stream.Stream<A, E2 | E, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.interruptWhenDeferred(deferred)))\n)\n\n/** @internal */\nexport const iterate = <A>(value: A, next: (value: A) => A): Stream.Stream<A> =>\n  unfold(value, (a) => Option.some([a, next(a)] as const))\n\n/** @internal */\nexport const make = <As extends Array<any>>(...as: As): Stream.Stream<As[number]> => fromIterable(as)\n\n/** @internal */\nexport const map = dual<\n  <A, B>(f: (a: A) => B) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, f: (a: A) => B) => Stream.Stream<B, E, R>\n>(\n  2,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, f: (a: A) => B): Stream.Stream<B, E, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.mapOut(Chunk.map(f))))\n)\n\n/** @internal */\nexport const mapAccum = dual<\n  <S, A, A2>(\n    s: S,\n    f: (s: S, a: A) => readonly [S, A2]\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E, R>,\n  <A, E, R, S, A2>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => readonly [S, A2]) => Stream.Stream<A2, E, R>\n>(\n  3,\n  <A, E, R, S, A2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => readonly [S, A2]\n  ): Stream.Stream<A2, E, R> => {\n    const accumulator = (s: S): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E, E, void, unknown> =>\n      core.readWith({\n        onInput: (input: Chunk.Chunk<A>) => {\n          const [nextS, chunk] = Chunk.mapAccum(input, s, f)\n          return core.flatMap(\n            core.write(chunk),\n            () => accumulator(nextS)\n          )\n        },\n        onFailure: core.fail,\n        onDone: () => core.void\n      })\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(accumulator(s))))\n  }\n)\n\n/** @internal */\nexport const mapAccumEffect = dual<\n  <S, A, A2, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<readonly [S, A2], E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, S, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<readonly [S, A2], E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, S, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<readonly [S, A2], E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    suspend(() => {\n      const accumulator = (\n        s: S\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R | R2> =>\n        core.readWith({\n          onInput: (input: Chunk.Chunk<A>) =>\n            pipe(\n              Effect.suspend(() => {\n                const outputs: Array<A2> = []\n                const emit = (output: A2) =>\n                  Effect.sync(() => {\n                    outputs.push(output)\n                  })\n                return pipe(\n                  input,\n                  Effect.reduce(s, (s, a) =>\n                    pipe(\n                      f(s, a),\n                      Effect.flatMap(([s, a]) => pipe(emit(a), Effect.as(s)))\n                    )),\n                  Effect.match({\n                    onFailure: (error) => {\n                      if (outputs.length !== 0) {\n                        return channel.zipRight(core.write(Chunk.unsafeFromArray(outputs)), core.fail(error))\n                      }\n                      return core.fail(error)\n                    },\n                    onSuccess: (s) => core.flatMap(core.write(Chunk.unsafeFromArray(outputs)), () => accumulator(s))\n                  })\n                )\n              }),\n              channel.unwrap\n            ),\n          onFailure: core.fail,\n          onDone: () => core.void\n        })\n      return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(accumulator(s))))\n    })\n)\n\n/** @internal */\nexport const mapBoth = dual<\n  <E, E2, A, A2>(\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2, R>,\n  <A, E, R, E2, A2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ) => Stream.Stream<A2, E2, R>\n>(\n  2,\n  <A, E, R, E2, A2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ): Stream.Stream<A2, E2, R> => pipe(self, mapError(options.onFailure), map(options.onSuccess))\n)\n\n/** @internal */\nexport const mapChunks = dual<\n  <A, B>(\n    f: (chunk: Chunk.Chunk<A>) => Chunk.Chunk<B>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, f: (chunk: Chunk.Chunk<A>) => Chunk.Chunk<B>) => Stream.Stream<B, E, R>\n>(\n  2,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, f: (chunk: Chunk.Chunk<A>) => Chunk.Chunk<B>): Stream.Stream<B, E, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.mapOut(f)))\n)\n\n/** @internal */\nexport const mapChunksEffect = dual<\n  <A, B, E2, R2>(\n    f: (chunk: Chunk.Chunk<A>) => Effect.Effect<Chunk.Chunk<B>, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E2 | E, R2 | R>,\n  <A, E, R, B, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (chunk: Chunk.Chunk<A>) => Effect.Effect<Chunk.Chunk<B>, E2, R2>\n  ) => Stream.Stream<B, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (chunk: Chunk.Chunk<A>) => Effect.Effect<Chunk.Chunk<B>, E2, R2>\n  ): Stream.Stream<B, E2 | E, R2 | R> => new StreamImpl(pipe(toChannel(self), channel.mapOutEffect(f)))\n)\n\n/** @internal */\nexport const mapConcat = dual<\n  <A, A2>(f: (a: A) => Iterable<A2>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a: A) => Iterable<A2>) => Stream.Stream<A2, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a: A) => Iterable<A2>): Stream.Stream<A2, E, R> =>\n    pipe(self, mapConcatChunk((a) => Chunk.fromIterable(f(a))))\n)\n\n/** @internal */\nexport const mapConcatChunk = dual<\n  <A, A2>(f: (a: A) => Chunk.Chunk<A2>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a: A) => Chunk.Chunk<A2>) => Stream.Stream<A2, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a: A) => Chunk.Chunk<A2>): Stream.Stream<A2, E, R> =>\n    pipe(self, mapChunks(Chunk.flatMap(f)))\n)\n\n/** @internal */\nexport const mapConcatChunkEffect = dual<\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<Chunk.Chunk<A2>, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Chunk.Chunk<A2>, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Chunk.Chunk<A2>, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> => pipe(self, mapEffectSequential(f), mapConcatChunk(identity))\n)\n\n/** @internal */\nexport const mapConcatEffect = dual<\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<Iterable<A2>, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Iterable<A2>, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Iterable<A2>, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    pipe(self, mapEffectSequential((a) => pipe(f(a), Effect.map(Chunk.fromIterable))), mapConcatChunk(identity))\n)\n\n/** @internal */\nexport const mapEffectSequential = dual<\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> => {\n    const loop = (\n      iterator: Iterator<A>\n    ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> => {\n      const next = iterator.next()\n      if (next.done) {\n        return core.readWithCause({\n          onInput: (elem) => loop(elem[Symbol.iterator]()),\n          onFailure: core.failCause,\n          onDone: core.succeed\n        })\n      } else {\n        const value = next.value\n        return channel.unwrap(\n          Effect.map(f(value), (a2) =>\n            core.flatMap(\n              core.write(Chunk.of(a2)),\n              () => loop(iterator)\n            ))\n        )\n      }\n    }\n    return new StreamImpl(pipe(\n      toChannel(self),\n      core.pipeTo(core.suspend(() => loop(Chunk.empty<A>()[Symbol.iterator]())))\n    ))\n  }\n)\n\n/** @internal */\nexport const mapEffectPar = dual<\n  <A, A2, E2, R2>(\n    n: number,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    new StreamImpl(\n      pipe(\n        toChannel(self),\n        channel.concatMap(channel.writeChunk),\n        channel.mapOutEffectPar(f, n),\n        channel.mapOut(Chunk.of)\n      )\n    )\n)\n\n/** @internal */\nexport const mapError = dual<\n  <E, E2>(f: (error: E) => E2) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, f: (error: E) => E2) => Stream.Stream<A, E2, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, f: (error: E) => E2): Stream.Stream<A, E2, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.mapError(f)))\n)\n\n/** @internal */\nexport const mapErrorCause = dual<\n  <E, E2>(\n    f: (cause: Cause.Cause<E>) => Cause.Cause<E2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>) => Stream.Stream<A, E2, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Stream.Stream<A, E2, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.mapErrorCause(f)))\n)\n\n/** @internal */\nexport const merge = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  (args) => isStream(args[1]),\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> =>\n    mergeWith(self, that, {\n      onSelf: identity,\n      onOther: identity,\n      haltStrategy: options?.haltStrategy\n    })\n)\n\n/** @internal */\nexport const mergeAll = dual<\n  (options: {\n    readonly concurrency: number | \"unbounded\"\n    readonly bufferSize?: number | undefined\n  }) => <A, E, R>(streams: Iterable<Stream.Stream<A, E, R>>) => Stream.Stream<A, E, R>,\n  <A, E, R>(streams: Iterable<Stream.Stream<A, E, R>>, options: {\n    readonly concurrency: number | \"unbounded\"\n    readonly bufferSize?: number | undefined\n  }) => Stream.Stream<A, E, R>\n>((args) => Symbol.iterator in args[0], (streams, options) => flatten(fromIterable(streams), options))\n\n/** @internal */\nexport const mergeWithTag: {\n  <S extends { [k in string]: Stream.Stream<any, any, any> }>(\n    streams: S,\n    options: {\n      readonly concurrency: number | \"unbounded\"\n      readonly bufferSize?: number | undefined\n    }\n  ): Stream.Stream<\n    { [K in keyof S]: { _tag: K; value: Stream.Stream.Success<S[K]> } }[keyof S],\n    Stream.Stream.Error<S[keyof S]>,\n    Stream.Stream.Context<S[keyof S]>\n  >\n  (options: {\n    readonly concurrency: number | \"unbounded\"\n    readonly bufferSize?: number | undefined\n  }): <S extends { [k in string]: Stream.Stream<any, any, any> }>(streams: S) => Stream.Stream<\n    { [K in keyof S]: { _tag: K; value: Stream.Stream.Success<S[K]> } }[keyof S],\n    Stream.Stream.Error<S[keyof S]>,\n    Stream.Stream.Context<S[keyof S]>\n  >\n} = dual(2, (streams, options) => {\n  const keys = Object.keys(streams)\n  const values = keys.map((key) => streams[key].pipe(map((value) => ({ _tag: key, value })))) as any\n  return mergeAll(values, options)\n})\n\n/** @internal */\nexport const mergeEither = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Either.Either<A2, A>, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<Either.Either<A2, A>, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<Either.Either<A2, A>, E2 | E, R2 | R> =>\n    mergeWith(self, that, { onSelf: Either.left, onOther: Either.right })\n)\n\n/** @internal */\nexport const mergeLeft = dual<\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ) => <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AL, ER | EL, RR | RL>,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ) => Stream.Stream<AL, ER | EL, RR | RL>\n>(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR> => pipe(left, merge(drain(right)))\n)\n\n/** @internal */\nexport const mergeRight = dual<\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ) => <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AR, ER | EL, RR | RL>,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ) => Stream.Stream<AR, ER | EL, RR | RL>\n>(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR> => pipe(drain(left), merge(right))\n)\n\n/** @internal */\nexport const mergeWith = dual<\n  <A2, E2, R2, A, A3, A4>(\n    other: Stream.Stream<A2, E2, R2>,\n    options: {\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A4\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3 | A4, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2, A3, A4>(\n    self: Stream.Stream<A, E, R>,\n    other: Stream.Stream<A2, E2, R2>,\n    options: {\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A4\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ) => Stream.Stream<A3 | A4, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2, A3, A4>(\n    self: Stream.Stream<A, E, R>,\n    other: Stream.Stream<A2, E2, R2>,\n    options: {\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A4\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ): Stream.Stream<A3 | A4, E2 | E, R2 | R> => {\n    const strategy = options.haltStrategy ? haltStrategy.fromInput(options.haltStrategy) : HaltStrategy.Both\n    const handler =\n      (terminate: boolean) =>\n      (exit: Exit.Exit<unknown, E | E2>): MergeDecision.MergeDecision<R | R2, E | E2, unknown, E | E2, unknown> =>\n        terminate || !Exit.isSuccess(exit) ?\n          // TODO: remove\n          MergeDecision.Done(Effect.suspend(() => exit)) :\n          MergeDecision.Await((exit) => Effect.suspend(() => exit))\n\n    return new StreamImpl<A3 | A4, E | E2, R | R2>(\n      channel.mergeWith(toChannel(map(self, options.onSelf)), {\n        other: toChannel(map(other, options.onOther)),\n        onSelfDone: handler(strategy._tag === \"Either\" || strategy._tag === \"Left\"),\n        onOtherDone: handler(strategy._tag === \"Either\" || strategy._tag === \"Right\")\n      })\n    )\n  }\n)\n\n/** @internal */\nexport const mkString = <E, R>(self: Stream.Stream<string, E, R>): Effect.Effect<string, E, R> =>\n  run(self, _sink.mkString)\n\n/** @internal */\nexport const never: Stream.Stream<never> = fromEffect(Effect.never)\n\n/** @internal */\nexport const onEnd: {\n  <_, E2, R2>(\n    effect: Effect.Effect<_, E2, R2>\n  ): <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, _, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<_, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, _, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<_, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => concat(self, drain(fromEffect(effect)))\n)\n\n/** @internal */\nexport const onError = dual<\n  <E, X, R2>(\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, R2>(\n    self: Stream.Stream<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, R2>(\n    self: Stream.Stream<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    pipe(self, catchAllCause((cause) => fromEffect(pipe(cleanup(cause), Effect.zipRight(Effect.failCause(cause))))))\n)\n\n/** @internal */\nexport const onDone = dual<\n  <X, R2>(\n    cleanup: () => Effect.Effect<X, never, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, R2>(\n    self: Stream.Stream<A, E, R>,\n    cleanup: () => Effect.Effect<X, never, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, R2>(\n    self: Stream.Stream<A, E, R>,\n    cleanup: () => Effect.Effect<X, never, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    new StreamImpl<A, E, R | R2>(\n      pipe(toChannel(self), core.ensuringWith((exit) => Exit.isSuccess(exit) ? cleanup() : Effect.void))\n    )\n)\n\n/** @internal */\nexport const onStart: {\n  <_, E2, R2>(\n    effect: Effect.Effect<_, E2, R2>\n  ): <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, _, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<_, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, _, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<_, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => unwrap(Effect.as(effect, self))\n)\n\n/** @internal */\nexport const orDie = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, never, R> =>\n  pipe(self, orDieWith(identity))\n\n/** @internal */\nexport const orDieWith = dual<\n  <E>(f: (e: E) => unknown) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, never, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, f: (e: E) => unknown) => Stream.Stream<A, never, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, f: (e: E) => unknown): Stream.Stream<A, never, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.orDieWith(f)))\n)\n\n/** @internal */\nexport const orElse = dual<\n  <A2, E2, R2>(\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2 | A, E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2 | A, E2, R2 | R> =>\n    new StreamImpl<A | A2, E2, R | R2>(pipe(toChannel(self), channel.orElse(() => toChannel(that()))))\n)\n\n/** @internal */\nexport const orElseEither = dual<\n  <A2, E2, R2>(\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Either.Either<A2, A>, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<Either.Either<A2, A>, E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<Either.Either<A2, A>, E2, R2 | R> =>\n    pipe(self, map(Either.left), orElse(() => pipe(that(), map(Either.right))))\n)\n\n/** @internal */\nexport const orElseFail = dual<\n  <E2>(error: LazyArg<E2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, error: LazyArg<E2>) => Stream.Stream<A, E2, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, error: LazyArg<E2>): Stream.Stream<A, E2, R> =>\n    pipe(self, orElse(() => failSync(error)))\n)\n\n/** @internal */\nexport const orElseIfEmpty = dual<\n  <A2>(element: LazyArg<A2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, element: LazyArg<A2>) => Stream.Stream<A2 | A, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, element: LazyArg<A2>): Stream.Stream<A | A2, E, R> =>\n    pipe(self, orElseIfEmptyChunk(() => Chunk.of(element())))\n)\n\n/** @internal */\nexport const orElseIfEmptyChunk = dual<\n  <A2>(chunk: LazyArg<Chunk.Chunk<A2>>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, chunk: LazyArg<Chunk.Chunk<A2>>) => Stream.Stream<A2 | A, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, chunk: LazyArg<Chunk.Chunk<A2>>): Stream.Stream<A | A2, E, R> =>\n    pipe(self, orElseIfEmptyStream(() => new StreamImpl(core.write(chunk()))))\n)\n\n/** @internal */\nexport const orElseIfEmptyStream = dual<\n  <A2, E2, R2>(\n    stream: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    stream: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    stream: LazyArg<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> => {\n    const writer: Channel.Channel<Chunk.Chunk<A | A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core.readWith(\n      {\n        onInput: (input: Chunk.Chunk<A>) => {\n          if (Chunk.isEmpty(input)) {\n            return core.suspend(() => writer)\n          }\n          return pipe(\n            core.write(input),\n            channel.zipRight(channel.identityChannel<Chunk.Chunk<A>, E, unknown>())\n          )\n        },\n        onFailure: core.fail,\n        onDone: () => core.suspend(() => toChannel(stream()))\n      }\n    )\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(writer)))\n  }\n)\n\n/** @internal */\nexport const orElseSucceed = dual<\n  <A2>(value: LazyArg<A2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, never, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, value: LazyArg<A2>) => Stream.Stream<A2 | A, never, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, value: LazyArg<A2>): Stream.Stream<A2 | A, never, R> =>\n    pipe(self, orElse(() => sync(value)))\n)\n\n/** @internal */\nexport const paginate = <S, A>(s: S, f: (s: S) => readonly [A, Option.Option<S>]): Stream.Stream<A> =>\n  paginateChunk(s, (s) => {\n    const page = f(s)\n    return [Chunk.of(page[0]), page[1]] as const\n  })\n\n/** @internal */\nexport const paginateChunk = <S, A>(\n  s: S,\n  f: (s: S) => readonly [Chunk.Chunk<A>, Option.Option<S>]\n): Stream.Stream<A> => {\n  const loop = (s: S): Channel.Channel<Chunk.Chunk<A>, unknown, never, unknown, unknown, unknown> => {\n    const page = f(s)\n    return Option.match(page[1], {\n      onNone: () => channel.zipRight(core.write(page[0]), core.void),\n      onSome: (s) => core.flatMap(core.write(page[0]), () => loop(s))\n    })\n  }\n  return new StreamImpl(core.suspend(() => loop(s)))\n}\n\n/** @internal */\nexport const paginateChunkEffect = <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<readonly [Chunk.Chunk<A>, Option.Option<S>], E, R>\n): Stream.Stream<A, E, R> => {\n  const loop = (s: S): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R> =>\n    channel.unwrap(\n      Effect.map(f(s), ([chunk, option]) =>\n        Option.match(option, {\n          onNone: () => channel.zipRight(core.write(chunk), core.void),\n          onSome: (s) => core.flatMap(core.write(chunk), () => loop(s))\n        }))\n    )\n  return new StreamImpl(core.suspend(() => loop(s)))\n}\n\n/** @internal */\nexport const paginateEffect = <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<readonly [A, Option.Option<S>], E, R>\n): Stream.Stream<A, E, R> =>\n  paginateChunkEffect(s, (s) => pipe(f(s), Effect.map(([a, s]) => [Chunk.of(a), s] as const)))\n\n/** @internal */\nexport const peel = dual<\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<[A2, Stream.Stream<A, E>], E2 | E, Scope.Scope | R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ) => Effect.Effect<[A2, Stream.Stream<A, E>], E2 | E, Scope.Scope | R2 | R>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  sink: Sink.Sink<A2, A, A, E2, R2>\n): Effect.Effect<[A2, Stream.Stream<A, E>], E2 | E, Scope.Scope | R2 | R> => {\n  type Signal = Emit | Halt | End\n  const OP_EMIT = \"Emit\" as const\n  type OP_EMIT = typeof OP_EMIT\n  const OP_HALT = \"Halt\" as const\n  type OP_HALT = typeof OP_HALT\n  const OP_END = \"End\" as const\n  type OP_END = typeof OP_END\n  interface Emit {\n    readonly _tag: OP_EMIT\n    readonly elements: Chunk.Chunk<A>\n  }\n  interface Halt {\n    readonly _tag: OP_HALT\n    readonly cause: Cause.Cause<E>\n  }\n  interface End {\n    readonly _tag: OP_END\n  }\n  return pipe(\n    Deferred.make<A2, E | E2>(),\n    Effect.flatMap((deferred) =>\n      pipe(\n        Handoff.make<Signal>(),\n        Effect.map((handoff) => {\n          const consumer = _sink.foldSink(_sink.collectLeftover(sink), {\n            onFailure: (error) =>\n              _sink.zipRight(\n                _sink.fromEffect(Deferred.fail(deferred, error)),\n                _sink.fail(error)\n              ),\n            onSuccess: ([z, leftovers]) => {\n              const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, void, unknown> = core\n                .readWithCause({\n                  onInput: (elements) =>\n                    core.flatMap(\n                      core.fromEffect(\n                        Handoff.offer<Signal>(handoff, { _tag: OP_EMIT, elements })\n                      ),\n                      () => loop\n                    ),\n                  onFailure: (cause) =>\n                    channel.zipRight(\n                      core.fromEffect(Handoff.offer<Signal>(handoff, { _tag: OP_HALT, cause })),\n                      core.failCause(cause)\n                    ),\n                  onDone: (_) =>\n                    channel.zipRight(\n                      core.fromEffect(Handoff.offer<Signal>(handoff, { _tag: OP_END })),\n                      core.void\n                    )\n                })\n              return _sink.fromChannel(\n                pipe(\n                  core.fromEffect(Deferred.succeed(deferred, z)),\n                  channel.zipRight(core.fromEffect(\n                    pipe(\n                      handoff,\n                      Handoff.offer<Signal>({ _tag: OP_EMIT, elements: leftovers })\n                    )\n                  )),\n                  channel.zipRight(loop)\n                )\n              )\n            }\n          })\n\n          const producer: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n            Handoff.take(handoff),\n            Effect.map((signal) => {\n              switch (signal._tag) {\n                case OP_EMIT: {\n                  return pipe(core.write(signal.elements), core.flatMap(() => producer))\n                }\n                case OP_HALT: {\n                  return core.failCause(signal.cause)\n                }\n                case OP_END: {\n                  return core.void\n                }\n              }\n            }),\n            channel.unwrap\n          )\n\n          return pipe(\n            self,\n            tapErrorCause((cause) => Deferred.failCause(deferred, cause)),\n            run(consumer),\n            Effect.forkScoped,\n            Effect.zipRight(Deferred.await(deferred)),\n            Effect.map((z) => [z, new StreamImpl(producer)] as [A2, StreamImpl<A, E>])\n          )\n        })\n      )\n    ),\n    Effect.flatten\n  )\n})\n\n/** @internal */\nexport const partition: {\n  <C extends A, B extends A, A = C>(\n    refinement: Refinement<NoInfer<A>, B>,\n    options?: {\n      bufferSize?: number | undefined\n    }\n  ): <E, R>(\n    self: Stream.Stream<C, E, R>\n  ) => Effect.Effect<\n    [excluded: Stream.Stream<Exclude<C, B>, E>, satisfying: Stream.Stream<B, E>],\n    E,\n    Scope.Scope | R\n  >\n  <A>(\n    predicate: Predicate<A>,\n    options?: {\n      bufferSize?: number | undefined\n    }\n  ): <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<[excluded: Stream.Stream<A, E>, satisfying: Stream.Stream<A, E>], E, Scope.Scope | R>\n  <C extends A, E, R, B extends A, A = C>(\n    self: Stream.Stream<C, E, R>,\n    refinement: Refinement<A, B>,\n    options?: {\n      bufferSize?: number | undefined\n    }\n  ): Effect.Effect<\n    [excluded: Stream.Stream<Exclude<C, B>, E>, satisfying: Stream.Stream<B, E>],\n    E,\n    Scope.Scope | R\n  >\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    predicate: Predicate<A>,\n    options?: {\n      bufferSize?: number | undefined\n    }\n  ): Effect.Effect<[excluded: Stream.Stream<A, E>, satisfying: Stream.Stream<A, E>], E, Scope.Scope | R>\n} = dual(\n  (args) => typeof args[1] === \"function\",\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    predicate: Predicate<A>,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ): Effect.Effect<\n    [Stream.Stream<A, E>, Stream.Stream<A, E>],\n    E,\n    R | Scope.Scope\n  > =>\n    partitionEither(\n      self,\n      (a) => Effect.succeed(predicate(a) ? Either.right(a) : Either.left(a)),\n      options\n    )\n)\n\n/** @internal */\nexport const partitionEither = dual<\n  <A, A3, A2, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<Either.Either<A3, A2>, E2, R2>,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<\n    [left: Stream.Stream<A2, E2 | E>, right: Stream.Stream<A3, E2 | E>],\n    E2 | E,\n    Scope.Scope | R2 | R\n  >,\n  <A, E, R, A3, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<Either.Either<A3, A2>, E2, R2>,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ) => Effect.Effect<\n    [left: Stream.Stream<A2, E2 | E>, right: Stream.Stream<A3, E2 | E>],\n    E2 | E,\n    Scope.Scope | R2 | R\n  >\n>(\n  (args) => typeof args[1] === \"function\",\n  <A, E, R, A3, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<Either.Either<A3, A2>, E2, R2>,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ): Effect.Effect<\n    [left: Stream.Stream<A2, E2 | E>, right: Stream.Stream<A3, E2 | E>],\n    E | E2,\n    R | R2 | Scope.Scope\n  > =>\n    pipe(\n      mapEffectSequential(self, predicate),\n      distributedWith({\n        size: 2,\n        maximumLag: options?.bufferSize ?? 16,\n        decide: Either.match({\n          onLeft: () => Effect.succeed((n) => n === 0),\n          onRight: () => Effect.succeed((n) => n === 1)\n        })\n      }),\n      Effect.flatMap(([queue1, queue2]) =>\n        Effect.succeed([\n          filterMap(\n            flattenExitOption(fromQueue(queue1, { shutdown: true })),\n            (_) =>\n              Either.match(_, {\n                onLeft: Option.some,\n                onRight: Option.none\n              })\n          ),\n          filterMap(\n            flattenExitOption(fromQueue(queue2, { shutdown: true })),\n            (_) =>\n              Either.match(_, {\n                onLeft: Option.none,\n                onRight: Option.some\n              })\n          )\n        ])\n      )\n    )\n)\n\n/** @internal */\nexport const pipeThrough = dual<\n  <A2, A, L, E2, R2>(\n    sink: Sink.Sink<A2, A, L, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<L, E2 | E, R2 | R>,\n  <A, E, R, A2, L, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, L, E2, R2>\n  ) => Stream.Stream<L, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, L, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, L, E2, R2>\n  ): Stream.Stream<L, E2 | E, R2 | R> =>\n    new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(_sink.toChannel(sink))))\n)\n\n/** @internal */\nexport const pipeThroughChannel = dual<\n  <R2, E, E2, A, A2>(\n    channel: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2, R2 | R>,\n  <R, R2, E, E2, A, A2>(\n    self: Stream.Stream<A, E, R>,\n    channel: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ) => Stream.Stream<A2, E2, R2 | R>\n>(\n  2,\n  <R, R2, E, E2, A, A2>(\n    self: Stream.Stream<A, E, R>,\n    channel: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ): Stream.Stream<A2, E2, R2 | R> => new StreamImpl(core.pipeTo(toChannel(self), channel))\n)\n\n/** @internal */\nexport const pipeThroughChannelOrFail = dual<\n  <R2, E, E2, A, A2>(\n    chan: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E | E2, R2 | R>,\n  <R, R2, E, E2, A, A2>(\n    self: Stream.Stream<A, E, R>,\n    chan: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ) => Stream.Stream<A2, E | E2, R2 | R>\n>(\n  2,\n  <R, R2, E, E2, A, A2>(\n    self: Stream.Stream<A, E, R>,\n    chan: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ): Stream.Stream<A2, E | E2, R2 | R> => new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(chan)))\n)\n\n/** @internal */\nexport const prepend = dual<\n  <B>(values: Chunk.Chunk<B>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A | B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, values: Chunk.Chunk<B>) => Stream.Stream<A | B, E, R>\n>(2, (self, values) =>\n  new StreamImpl(\n    channel.zipRight(\n      core.write(values as Chunk.Chunk<any>),\n      toChannel(self)\n    )\n  ))\n\n/** @internal */\nexport const provideContext = dual<\n  <R>(context: Context.Context<R>) => <A, E>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, context: Context.Context<R>) => Stream.Stream<A, E>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, context: Context.Context<R>): Stream.Stream<A, E> =>\n    new StreamImpl(pipe(toChannel(self), core.provideContext(context)))\n)\n\n/** @internal */\nexport const provideLayer = dual<\n  <RIn, E2, ROut>(\n    layer: Layer.Layer<ROut, E2, RIn>\n  ) => <A, E>(self: Stream.Stream<A, E, ROut>) => Stream.Stream<A, E2 | E, RIn>,\n  <A, E, RIn, E2, ROut>(\n    self: Stream.Stream<A, E, ROut>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ) => Stream.Stream<A, E2 | E, RIn>\n>(\n  2,\n  <A, E, RIn, E2, ROut>(\n    self: Stream.Stream<A, E, ROut>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): Stream.Stream<A, E2 | E, RIn> =>\n    new StreamImpl(\n      channel.unwrapScopedWith((scope) =>\n        Layer.buildWithScope(layer, scope).pipe(\n          Effect.map((env) => pipe(toChannel(self), core.provideContext(env)))\n        )\n      )\n    )\n)\n\n/** @internal */\nexport const provideService = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ) => Stream.Stream<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ) => provideServiceEffect(self, tag, Effect.succeed(resource))\n)\n\n/** @internal */\nexport const provideServiceEffect = dual<\n  <T extends Context.Tag<any, any>, E2, R2>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E2, R2>\n  ) => provideServiceStream(self, tag, fromEffect(effect))\n)\n\n/** @internal */\nexport const provideServiceStream = dual<\n  <T extends Context.Tag<any, any>, E2, R2>(\n    tag: T,\n    stream: Stream.Stream<Context.Tag.Service<T>, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    stream: Stream.Stream<Context.Tag.Service<T>, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    stream: Stream.Stream<Context.Tag.Service<T>, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>> =>\n    contextWithStream((env: Context.Context<R2 | Exclude<R, Context.Tag.Identifier<T>>>) =>\n      flatMap(\n        stream,\n        (service) => pipe(self, provideContext(Context.add(env, tag, service) as Context.Context<R | R2>))\n      )\n    )\n)\n\n/** @internal */\nexport const mapInputContext = dual<\n  <R0, R>(\n    f: (env: Context.Context<R0>) => Context.Context<R>\n  ) => <A, E>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R0>,\n  <A, E, R0, R>(\n    self: Stream.Stream<A, E, R>,\n    f: (env: Context.Context<R0>) => Context.Context<R>\n  ) => Stream.Stream<A, E, R0>\n>(\n  2,\n  <A, E, R0, R>(\n    self: Stream.Stream<A, E, R>,\n    f: (env: Context.Context<R0>) => Context.Context<R>\n  ): Stream.Stream<A, E, R0> => contextWithStream((env) => pipe(self, provideContext(f(env))))\n)\n\n/** @internal */\nexport const provideSomeLayer = dual<\n  <RIn, E2, ROut>(\n    layer: Layer.Layer<ROut, E2, RIn>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, RIn | Exclude<R, ROut>>,\n  <A, E, R, RIn, E2, ROut>(\n    self: Stream.Stream<A, E, R>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ) => Stream.Stream<A, E2 | E, RIn | Exclude<R, ROut>>\n>(\n  2,\n  <A, E, R, RIn, E2, ROut>(\n    self: Stream.Stream<A, E, R>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): Stream.Stream<A, E2 | E, RIn | Exclude<R, ROut>> =>\n    // @ts-expect-error\n    pipe(\n      self,\n      provideLayer(pipe(Layer.context(), Layer.merge(layer)))\n    )\n)\n\n/** @internal */\nexport const range = (min: number, max: number, chunkSize = DefaultChunkSize): Stream.Stream<number> =>\n  suspend(() => {\n    if (min > max) {\n      return empty as Stream.Stream<number>\n    }\n    const go = (\n      min: number,\n      max: number,\n      chunkSize: number\n    ): Channel.Channel<Chunk.Chunk<number>, unknown, never, unknown, unknown, unknown> => {\n      const remaining = max - min + 1\n      if (remaining > chunkSize) {\n        return pipe(\n          core.write(Chunk.range(min, min + chunkSize - 1)),\n          core.flatMap(() => go(min + chunkSize, max, chunkSize))\n        )\n      }\n      return core.write(Chunk.range(min, min + remaining - 1))\n    }\n    return new StreamImpl(go(min, max, chunkSize))\n  })\n\n/** @internal */\nexport const race: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AL | AR, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL | AR, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL | AR, EL | ER, RL | RR> => raceAll(left, right)\n)\n\n/** @internal */\nexport const raceAll = <S extends ReadonlyArray<Stream.Stream<any, any, any>>>(\n  ...streams: S\n): Stream.Stream<\n  Stream.Stream.Success<S[number]>,\n  Stream.Stream.Error<S[number]>,\n  Stream.Stream.Context<S[number]>\n> =>\n  Deferred.make<void>().pipe(\n    Effect.map((halt) => {\n      let winner: number | null = null\n      return mergeAll(\n        streams.map((stream, index) =>\n          stream.pipe(\n            takeWhile(() => {\n              if (winner === null) {\n                winner = index\n                Deferred.unsafeDone(halt, Exit.void)\n                return true\n              }\n              return winner === index\n            }),\n            interruptWhen(\n              Deferred.await(halt).pipe(\n                Effect.flatMap(() => winner === index ? Effect.never : Effect.void)\n              )\n            )\n          )\n        ),\n        { concurrency: streams.length }\n      )\n    }),\n    unwrap\n  )\n\n/** @internal */\nexport const rechunk = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> =>\n  suspend(() => {\n    const target = Math.max(n, 1)\n    const process = rechunkProcess(new StreamRechunker(target), target)\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(process)))\n  }))\n\n/** @internal */\nconst rechunkProcess = <A, E>(\n  rechunker: StreamRechunker<A, E>,\n  target: number\n): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown> =>\n  core.readWithCause({\n    onInput: (chunk: Chunk.Chunk<A>) => {\n      if (chunk.length === target && rechunker.isEmpty()) {\n        return core.flatMap(\n          core.write(chunk),\n          () => rechunkProcess(rechunker, target)\n        )\n      }\n      if (chunk.length > 0) {\n        const chunks: Array<Chunk.Chunk<A>> = []\n        let result: Chunk.Chunk<A> | undefined = undefined\n        let index = 0\n        while (index < chunk.length) {\n          while (index < chunk.length && result === undefined) {\n            result = rechunker.write(pipe(chunk, Chunk.unsafeGet(index)))\n            index = index + 1\n          }\n          if (result !== undefined) {\n            chunks.push(result)\n            result = undefined\n          }\n        }\n        return core.flatMap(\n          channel.writeAll(...chunks),\n          () => rechunkProcess(rechunker, target)\n        )\n      }\n      return core.suspend(() => rechunkProcess(rechunker, target))\n    },\n    onFailure: (cause) => channel.zipRight(rechunker.emitIfNotEmpty(), core.failCause(cause)),\n    onDone: () => rechunker.emitIfNotEmpty()\n  })\n\nclass StreamRechunker<out A, in out E> {\n  private builder: Array<A> = []\n  private pos = 0\n\n  constructor(readonly n: number) {\n  }\n\n  isEmpty(): boolean {\n    return this.pos === 0\n  }\n\n  write(elem: A): Chunk.Chunk<A> | undefined {\n    this.builder.push(elem)\n    this.pos += 1\n\n    if (this.pos === this.n) {\n      const result = Chunk.unsafeFromArray(this.builder)\n      this.builder = []\n      this.pos = 0\n      return result\n    }\n\n    return undefined\n  }\n\n  emitIfNotEmpty(): Channel.Channel<Chunk.Chunk<A>, unknown, E, E, void, unknown> {\n    if (this.pos !== 0) {\n      return core.write(Chunk.unsafeFromArray(this.builder))\n    }\n    return core.void\n  }\n}\n\n/** @internal */\nexport const refineOrDie = dual<\n  <E, E2>(pf: (error: E) => Option.Option<E2>) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, pf: (error: E) => Option.Option<E2>) => Stream.Stream<A, E2, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, pf: (error: E) => Option.Option<E2>): Stream.Stream<A, E2, R> =>\n    pipe(self, refineOrDieWith(pf, identity))\n)\n\n/** @internal */\nexport const refineOrDieWith = dual<\n  <E, E2>(\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ) => Stream.Stream<A, E2, R>\n>(\n  3,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ): Stream.Stream<A, E2, R> =>\n    new StreamImpl(\n      channel.catchAll(toChannel(self), (error) =>\n        Option.match(pf(error), {\n          onNone: () => core.failCause(Cause.die(f(error))),\n          onSome: core.fail\n        }))\n    )\n)\n\n/** @internal */\nexport const repeat = dual<\n  <B, R2>(\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    filterMap(\n      repeatEither(self, schedule),\n      (_) =>\n        Either.match(_, {\n          onLeft: Option.none,\n          onRight: Option.some\n        })\n    )\n)\n\n/** @internal */\nexport const repeatEffect = <A, E, R>(effect: Effect.Effect<A, E, R>): Stream.Stream<A, E, R> =>\n  repeatEffectOption(pipe(effect, Effect.mapError(Option.some)))\n\n/** @internal */\nexport const repeatEffectChunk = <A, E, R>(effect: Effect.Effect<Chunk.Chunk<A>, E, R>): Stream.Stream<A, E, R> =>\n  repeatEffectChunkOption(pipe(effect, Effect.mapError(Option.some)))\n\n/** @internal */\nexport const repeatEffectChunkOption = <A, E, R>(\n  effect: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>\n): Stream.Stream<A, E, R> =>\n  unfoldChunkEffect(effect, (effect) =>\n    pipe(\n      Effect.map(effect, (chunk) => Option.some([chunk, effect] as const)),\n      Effect.catchAll(Option.match({\n        onNone: () => Effect.succeed(Option.none()),\n        onSome: Effect.fail\n      }))\n    ))\n\n/** @internal */\nexport const repeatEffectOption = <A, E, R>(effect: Effect.Effect<A, Option.Option<E>, R>): Stream.Stream<A, E, R> =>\n  repeatEffectChunkOption(pipe(effect, Effect.map(Chunk.of)))\n\n/** @internal */\nexport const repeatEither = dual<\n  <B, R2>(\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Either.Either<A, B>, E, R2 | R>,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => Stream.Stream<Either.Either<A, B>, E, R2 | R>\n>(\n  2,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ): Stream.Stream<Either.Either<A, B>, E, R2 | R> =>\n    repeatWith(self, schedule, {\n      onElement: (a): Either.Either<A, B> => Either.right(a),\n      onSchedule: Either.left\n    })\n)\n\n/** @internal */\nexport const repeatElements = dual<\n  <B, R2>(\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    filterMap(\n      repeatElementsWith(self, schedule, { onElement: (a) => Option.some(a), onSchedule: Option.none }),\n      identity\n    )\n)\n\n/** @internal */\nexport const repeatElementsWith = dual<\n  <B, R2, A, C>(\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<C, E, R2 | R>,\n  <A, E, R, B, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => Stream.Stream<C, E, R2 | R>\n>(\n  3,\n  <A, E, R, B, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ): Stream.Stream<C, E, R | R2> => {\n    const driver = pipe(\n      Schedule.driver(schedule),\n      Effect.map((driver) => {\n        const feed = (\n          input: Chunk.Chunk<A>\n        ): Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, void, unknown, R2> =>\n          Option.match(Chunk.head(input), {\n            onNone: () => loop,\n            onSome: (a) =>\n              channel.zipRight(\n                core.write(Chunk.of(options.onElement(a))),\n                step(pipe(input, Chunk.drop(1)), a)\n              )\n          })\n        const step = (\n          input: Chunk.Chunk<A>,\n          a: A\n        ): Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, void, unknown, R2> => {\n          const advance = pipe(\n            driver.next(a),\n            Effect.as(pipe(core.write(Chunk.of(options.onElement(a))), core.flatMap(() => step(input, a))))\n          )\n          const reset: Effect.Effect<\n            Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, void, unknown, R2>,\n            never,\n            R2\n          > = pipe(\n            driver.last,\n            Effect.orDie,\n            Effect.flatMap((b) =>\n              pipe(\n                driver.reset,\n                Effect.map(() =>\n                  pipe(\n                    core.write(Chunk.of(options.onSchedule(b))),\n                    channel.zipRight(feed(input))\n                  )\n                )\n              )\n            )\n          )\n          return pipe(advance, Effect.orElse(() => reset), channel.unwrap)\n        }\n        const loop: Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, void, unknown, R2> = core.readWith({\n          onInput: feed,\n          onFailure: core.fail,\n          onDone: () => core.void\n        })\n        return loop\n      }),\n      channel.unwrap\n    )\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(driver)))\n  }\n)\n\n/** @internal */\nexport const repeatValue = <A>(value: A): Stream.Stream<A> =>\n  new StreamImpl(\n    channel.repeated(core.write(Chunk.of(value)))\n  )\n\n/** @internal */\nexport const repeatWith = dual<\n  <B, R2, A, C>(\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<C, E, R2 | R>,\n  <A, E, R, B, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => Stream.Stream<C, E, R2 | R>\n>(\n  3,\n  <A, E, R, B, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ): Stream.Stream<C, E, R | R2> => {\n    return pipe(\n      Schedule.driver(schedule),\n      Effect.map((driver) => {\n        const scheduleOutput = pipe(driver.last, Effect.orDie, Effect.map(options.onSchedule))\n        const process = pipe(self, map(options.onElement), toChannel)\n        const loop: Channel.Channel<Chunk.Chunk<C>, unknown, E, unknown, void, unknown, R | R2> = channel.unwrap(\n          Effect.match(driver.next(void 0), {\n            onFailure: () => core.void,\n            onSuccess: () =>\n              pipe(\n                process,\n                channel.zipRight(\n                  pipe(\n                    scheduleOutput,\n                    Effect.map((c) => pipe(core.write(Chunk.of(c)), core.flatMap(() => loop))),\n                    channel.unwrap\n                  )\n                )\n              )\n          })\n        )\n        return new StreamImpl(pipe(process, channel.zipRight(loop)))\n      }),\n      unwrap\n    )\n  }\n)\n\nconst repeatWithSchedule = <A, R, X>(\n  value: A,\n  schedule: Schedule.Schedule<X, A, R>\n): Stream.Stream<A, never, R> => repeatEffectWithSchedule(Effect.succeed(value), schedule)\n\n/** @internal */\nexport const repeatEffectWithSchedule = <A, E, R, X, A0 extends A, R2>(\n  effect: Effect.Effect<A, E, R>,\n  schedule: Schedule.Schedule<X, A0, R2>\n): Stream.Stream<A, E, R | R2> =>\n  flatMap(\n    fromEffect(Effect.zip(effect, Schedule.driver(schedule))),\n    ([a, driver]) =>\n      concat(\n        succeed(a),\n        unfoldEffect(a, (s) =>\n          Effect.matchEffect(driver.next(s as A0), {\n            onFailure: Effect.succeed,\n            onSuccess: () => Effect.map(effect, (nextA) => Option.some([nextA, nextA] as const))\n          }))\n      )\n  )\n\n/** @internal */\nexport const retry = dual<\n  <E0 extends E, R2, E, X>(\n    schedule: Schedule.Schedule<X, E0, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, E0 extends E, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<X, E0, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, E0 extends E, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<X, E0, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    Schedule.driver(schedule).pipe(\n      Effect.map((driver) => {\n        const loop: Channel.Channel<\n          Chunk.Chunk<A>,\n          unknown,\n          E,\n          unknown,\n          unknown,\n          unknown,\n          R | R2\n        > = toChannel(self).pipe(\n          channel.mapOutEffect((out) => Effect.as(driver.reset, out)),\n          channel.catchAll((error) =>\n            driver.next(error as E0).pipe(\n              Effect.match({\n                onFailure: () => core.fail(error),\n                onSuccess: () => loop\n              }),\n              channel.unwrap\n            )\n          )\n        )\n        return loop\n      }),\n      channel.unwrap,\n      fromChannel\n    )\n)\n\n/** @internal */\nexport const run = dual<\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<A2, E2 | E, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ) => Effect.Effect<A2, E2 | E, R | R2>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  sink: Sink.Sink<A2, A, unknown, E2, R2>\n): Effect.Effect<A2, E2 | E, R | R2> =>\n  toChannel(self).pipe(\n    channel.pipeToOrFail(_sink.toChannel(sink)),\n    channel.runDrain\n  ))\n\n/** @internal */\nexport const runCollect = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Effect.Effect<Chunk.Chunk<A>, E, R> => run(self, _sink.collectAll())\n\n/** @internal */\nexport const runCount = <A, E, R>(self: Stream.Stream<A, E, R>): Effect.Effect<number, E, R> => run(self, _sink.count)\n\n/** @internal */\nexport const runDrain = <A, E, R>(self: Stream.Stream<A, E, R>): Effect.Effect<void, E, R> => run(self, _sink.drain)\n\n/** @internal */\nexport const runFold = dual<\n  <S, A>(\n    s: S,\n    f: (s: S, a: A) => S\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<S, E, R>,\n  <A, E, R, S>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => S\n  ) => Effect.Effect<S, E, R>\n>(\n  3,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S): Effect.Effect<S, E, R> =>\n    runFoldWhile(self, s, constTrue, f)\n)\n\n/** @internal */\nexport const runFoldEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E2 | E, R | R2>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Effect.Effect<S, E2 | E, R | R2>\n>(3, <A, E, R, S, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n): Effect.Effect<S, E2 | E, R | R2> => runFoldWhileEffect(self, s, constTrue, f))\n\n/** @internal */\nexport const runFoldScoped = dual<\n  <S, A>(s: S, f: (s: S, a: A) => S) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E, Scope.Scope | R>,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S) => Effect.Effect<S, E, Scope.Scope | R>\n>(\n  3,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S): Effect.Effect<S, E, Scope.Scope | R> =>\n    pipe(self, runFoldWhileScoped(s, constTrue, f))\n)\n\n/** @internal */\nexport const runFoldScopedEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>\n>(3, <A, E, R, S, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n): Effect.Effect<S, E2 | E, Scope.Scope | R2 | R> => pipe(self, runFoldWhileScopedEffect(s, constTrue, f)))\n\n/** @internal */\nexport const runFoldWhile = dual<\n  <S, A>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<S, E, R>,\n  <A, E, R, S>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ) => Effect.Effect<S, E, R>\n>(4, <A, E, R, S>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  cont: Predicate<S>,\n  f: (s: S, a: A) => S\n): Effect.Effect<S, E, R> => run(self, _sink.fold(s, cont, f)))\n\n/** @internal */\nexport const runFoldWhileEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<S, E2 | E, R | R2>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Effect.Effect<S, E2 | E, R | R2>\n>(4, <A, E, R, S, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  cont: Predicate<S>,\n  f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n): Effect.Effect<S, E2 | E, R | R2> => run(self, _sink.foldEffect(s, cont, f)))\n\n/** @internal */\nexport const runFoldWhileScoped = dual<\n  <S, A>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E, Scope.Scope | R>,\n  <A, E, R, S>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ) => Effect.Effect<S, E, Scope.Scope | R>\n>(4, <A, E, R, S>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  cont: Predicate<S>,\n  f: (s: S, a: A) => S\n): Effect.Effect<S, E, Scope.Scope | R> => pipe(self, runScoped(_sink.fold(s, cont, f))))\n\n/** @internal */\nexport const runFoldWhileScopedEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>\n>(4, <A, E, R, S, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  cont: Predicate<S>,\n  f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n): Effect.Effect<S, E2 | E, Scope.Scope | R2 | R> => pipe(self, runScoped(_sink.foldEffect(s, cont, f))))\n\n/** @internal */\nexport const runForEach = dual<\n  <A, X, E2, R2>(\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<void, E2 | E, R | R2>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<void, E2 | E, R | R2>\n>(2, <A, E, R, X, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: A) => Effect.Effect<X, E2, R2>\n): Effect.Effect<void, E2 | E, R | R2> => run(self, _sink.forEach(f)))\n\n/** @internal */\nexport const runForEachChunk = dual<\n  <A, X, E2, R2>(\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<void, E2 | E, R | R2>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<void, E2 | E, R | R2>\n>(2, <A, E, R, X, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n): Effect.Effect<void, E2 | E, R | R2> => run(self, _sink.forEachChunk(f)))\n\n/** @internal */\nexport const runForEachChunkScoped = dual<\n  <A, X, E2, R2>(\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, E2 | E, Scope.Scope | R2 | R>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<void, E2 | E, Scope.Scope | R2 | R>\n>(2, <A, E, R, X, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n): Effect.Effect<void, E2 | E, Scope.Scope | R2 | R> => pipe(self, runScoped(_sink.forEachChunk(f))))\n\n/** @internal */\nexport const runForEachScoped = dual<\n  <A, X, E2, R2>(\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, E2 | E, R2 | R | Scope.Scope>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<void, E2 | E, R2 | R | Scope.Scope>\n>(2, <A, E, R, X, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: A) => Effect.Effect<X, E2, R2>\n): Effect.Effect<void, E2 | E, R2 | R | Scope.Scope> => pipe(self, runScoped(_sink.forEach(f))))\n\n/** @internal */\nexport const runForEachWhile = dual<\n  <A, E2, R2>(\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<void, E2 | E, R | R2>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => Effect.Effect<void, E2 | E, R | R2>\n>(2, <A, E, R, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: A) => Effect.Effect<boolean, E2, R2>\n): Effect.Effect<void, E2 | E, R | R2> => run(self, _sink.forEachWhile(f)))\n\n/** @internal */\nexport const runForEachWhileScoped = dual<\n  <A, E2, R2>(\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, E2 | E, R2 | R | Scope.Scope>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => Effect.Effect<void, E2 | E, R2 | R | Scope.Scope>\n>(2, <A, E, R, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: A) => Effect.Effect<boolean, E2, R2>\n): Effect.Effect<void, E2 | E, R2 | R | Scope.Scope> => pipe(self, runScoped(_sink.forEachWhile(f))))\n\n/** @internal */\nexport const runHead = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Effect.Effect<Option.Option<A>, E, R> => run(self, _sink.head<A>())\n\n/** @internal */\nexport const runIntoPubSub = dual<\n  <A, E>(\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Exclude<R, Scope.Scope>>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ) => Effect.Effect<void, never, Exclude<R, Scope.Scope>>\n>(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ): Effect.Effect<void, never, Exclude<R, Scope.Scope>> => pipe(self, runIntoQueue(pubsub))\n)\n\n/** @internal */\nexport const runIntoPubSubScoped = dual<\n  <A, E>(\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ) => Effect.Effect<void, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  pubsub: PubSub.PubSub<Take.Take<A, E>>\n): Effect.Effect<void, never, Scope.Scope | R> => pipe(self, runIntoQueueScoped(pubsub)))\n\n/** @internal */\nexport const runIntoQueue = dual<\n  <A, E>(\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Exclude<R, Scope.Scope>>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ) => Effect.Effect<void, never, Exclude<R, Scope.Scope>>\n>(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ): Effect.Effect<void, never, Exclude<R, Scope.Scope>> => pipe(self, runIntoQueueScoped(queue), Effect.scoped)\n)\n\n/** @internal */\nexport const runIntoQueueElementsScoped = dual<\n  <A, E>(\n    queue: Queue.Enqueue<Exit.Exit<A, Option.Option<E>>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    queue: Queue.Enqueue<Exit.Exit<A, Option.Option<E>>>\n  ) => Effect.Effect<void, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  queue: Queue.Enqueue<Exit.Exit<A, Option.Option<E>>>\n): Effect.Effect<void, never, Scope.Scope | R> => {\n  const writer: Channel.Channel<Exit.Exit<A, Option.Option<E>>, Chunk.Chunk<A>, never, E, unknown, unknown, R> = core\n    .readWithCause({\n      onInput: (input: Chunk.Chunk<A>) =>\n        core.flatMap(\n          core.fromEffect(Queue.offerAll(queue, Chunk.map(input, Exit.succeed))),\n          () => writer\n        ),\n      onFailure: (cause) => core.fromEffect(Queue.offer(queue, Exit.failCause(Cause.map(cause, Option.some)))),\n      onDone: () => core.fromEffect(Queue.offer(queue, Exit.fail(Option.none())))\n    })\n  return pipe(\n    core.pipeTo(toChannel(self), writer),\n    channel.drain,\n    channel.runScoped,\n    Effect.asVoid\n  )\n})\n\n/** @internal */\nexport const runIntoQueueScoped = dual<\n  <A, E>(\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ) => Effect.Effect<void, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  queue: Queue.Enqueue<Take.Take<A, E>>\n): Effect.Effect<void, never, Scope.Scope | R> => {\n  const writer: Channel.Channel<Take.Take<A, E>, Chunk.Chunk<A>, never, E, unknown, unknown, R> = core\n    .readWithCause({\n      onInput: (input: Chunk.Chunk<A>) => core.flatMap(core.write(InternalTake.chunk(input)), () => writer),\n      onFailure: (cause) => core.write(InternalTake.failCause(cause)),\n      onDone: () => core.write(InternalTake.end)\n    })\n  return pipe(\n    core.pipeTo(toChannel(self), writer),\n    channel.mapOutEffect((take) => Queue.offer(queue, take)),\n    channel.drain,\n    channel.runScoped,\n    Effect.asVoid\n  )\n})\n\n/** @internal */\nexport const runLast = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Effect.Effect<Option.Option<A>, E, R> => run(self, _sink.last())\n\n/** @internal */\nexport const runScoped = dual<\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<A2, E | E2, R | R2 | Scope.Scope>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ) => Effect.Effect<A2, E | E2, R | R2 | Scope.Scope>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  sink: Sink.Sink<A2, A, unknown, E2, R2>\n): Effect.Effect<A2, E | E2, R | R2 | Scope.Scope> =>\n  pipe(\n    toChannel(self),\n    channel.pipeToOrFail(_sink.toChannel(sink)),\n    channel.drain,\n    channel.runScoped\n  ))\n\n/** @internal */\nexport const runSum = <E, R>(self: Stream.Stream<number, E, R>): Effect.Effect<number, E, R> => run(self, _sink.sum)\n\n/** @internal */\nexport const scan = dual<\n  <S, A>(s: S, f: (s: S, a: A) => S) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<S, E, R>,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S) => Stream.Stream<S, E, R>\n>(\n  3,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S): Stream.Stream<S, E, R> =>\n    pipe(self, scanEffect(s, (s, a) => Effect.succeed(f(s, a))))\n)\n\n/** @internal */\nexport const scanReduce = dual<\n  <A2, A>(f: (a2: A2 | A, a: A) => A2) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a2: A2 | A, a: A) => A2) => Stream.Stream<A2 | A, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a2: A | A2, a: A) => A2): Stream.Stream<A | A2, E, R> =>\n    pipe(self, scanReduceEffect((a2, a) => Effect.succeed(f(a2, a))))\n)\n\n/** @internal */\nexport const scanReduceEffect = dual<\n  <A2, A, E2, R2>(\n    f: (a2: A2 | A, a: A) => Effect.Effect<A2 | A, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a2: A2 | A, a: A) => Effect.Effect<A2 | A, E2, R2>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a2: A | A2, a: A) => Effect.Effect<A2 | A, E2, R2>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> =>\n    pipe(\n      self,\n      mapAccumEffect<Option.Option<A | A2>, A, A | A2, E2, R2>(Option.none() as Option.Option<A | A2>, (option, a) => {\n        switch (option._tag) {\n          case \"None\": {\n            return Effect.succeed([Option.some<A | A2>(a), a] as const)\n          }\n          case \"Some\": {\n            return pipe(\n              f(option.value, a),\n              Effect.map((b) => [Option.some<A | A2>(b), b] as const)\n            )\n          }\n        }\n      })\n    )\n)\n\n/** @internal */\nexport const schedule = dual<\n  <X, A0 extends A, R2, A>(\n    schedule: Schedule.Schedule<X, A0, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, A0 extends A, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<X, A0, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, A0 extends A, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<X, A0, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    filterMap(\n      scheduleWith(self, schedule, { onElement: Option.some, onSchedule: Option.none }),\n      identity\n    )\n)\n\n/** @internal */\nexport const scheduleWith = dual<\n  <B, A0 extends A, R2, A, C>(\n    schedule: Schedule.Schedule<B, A0, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<C, E, R2 | R>,\n  <A, E, R, B, A0 extends A, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, A0, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => Stream.Stream<C, E, R2 | R>\n>(\n  3,\n  <A, E, R, B, A0 extends A, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, A0, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ): Stream.Stream<C, E, R | R2> => {\n    const loop = (\n      driver: Schedule.ScheduleDriver<B, A0, R2>,\n      iterator: Iterator<A>\n    ): Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, unknown, unknown, R2> => {\n      const next = iterator.next()\n      if (next.done) {\n        return core.readWithCause({\n          onInput: (chunk: Chunk.Chunk<A>) => loop(driver, chunk[Symbol.iterator]()),\n          onFailure: core.failCause,\n          onDone: core.succeedNow\n        })\n      }\n      return channel.unwrap(\n        Effect.matchEffect(driver.next(next.value as A0), {\n          onFailure: () =>\n            pipe(\n              driver.last,\n              Effect.orDie,\n              Effect.map((b) =>\n                pipe(\n                  core.write(Chunk.make(options.onElement(next.value), options.onSchedule(b))),\n                  core.flatMap(() => loop(driver, iterator))\n                )\n              ),\n              Effect.zipLeft(driver.reset)\n            ),\n          onSuccess: () =>\n            Effect.succeed(pipe(\n              core.write(Chunk.of(options.onElement(next.value))),\n              core.flatMap(() => loop(driver, iterator))\n            ))\n        })\n      )\n    }\n    return new StreamImpl(\n      pipe(\n        core.fromEffect(Schedule.driver(schedule)),\n        core.flatMap((driver) =>\n          pipe(\n            toChannel(self),\n            core.pipeTo(loop(driver, Chunk.empty<A>()[Symbol.iterator]()))\n          )\n        )\n      )\n    )\n  }\n)\n\n/** @internal */\nexport const scanEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<S, E2 | E, R2 | R>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Stream.Stream<S, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): Stream.Stream<S, E2 | E, R2 | R> =>\n    new StreamImpl(\n      pipe(\n        core.write(Chunk.of(s)),\n        core.flatMap(() =>\n          toChannel(pipe(\n            self,\n            mapAccumEffect(s, (s, a) => pipe(f(s, a), Effect.map((s) => [s, s])))\n          ))\n        )\n      )\n    )\n)\n\n/** @internal */\nexport const scoped = <A, E, R>(\n  effect: Effect.Effect<A, E, R>\n): Stream.Stream<A, E, Exclude<R, Scope.Scope>> =>\n  new StreamImpl(channel.ensuring(channel.scoped(pipe(effect, Effect.map(Chunk.of))), Effect.void))\n\n/** @internal */\nexport const scopedWith = <A, E, R>(\n  f: (scope: Scope.Scope) => Effect.Effect<A, E, R>\n): Stream.Stream<A, E, R> =>\n  new StreamImpl(channel.scopedWith((scope) =>\n    f(scope).pipe(\n      Effect.map(Chunk.of)\n    )\n  ))\n\n/** @internal */\nexport const some = <A, E, R>(self: Stream.Stream<Option.Option<A>, E, R>): Stream.Stream<A, Option.Option<E>, R> =>\n  pipe(self, mapError(Option.some), someOrFail(() => Option.none()))\n\n/** @internal */\nexport const someOrElse = dual<\n  <A2>(fallback: LazyArg<A2>) => <A, E, R>(self: Stream.Stream<Option.Option<A>, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<Option.Option<A>, E, R>, fallback: LazyArg<A2>) => Stream.Stream<A2 | A, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<Option.Option<A>, E, R>, fallback: LazyArg<A2>): Stream.Stream<A | A2, E, R> =>\n    pipe(self, map(Option.getOrElse(fallback)))\n)\n\n/** @internal */\nexport const someOrFail = dual<\n  <E2>(error: LazyArg<E2>) => <A, E, R>(self: Stream.Stream<Option.Option<A>, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, E2>(self: Stream.Stream<Option.Option<A>, E, R>, error: LazyArg<E2>) => Stream.Stream<A, E2 | E, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<Option.Option<A>, E, R>, error: LazyArg<E2>): Stream.Stream<A, E | E2, R> =>\n    mapEffectSequential(\n      self,\n      Option.match({\n        onNone: () => Effect.failSync(error),\n        onSome: Effect.succeed\n      })\n    )\n)\n\n/** @internal */\nexport const sliding = dual<\n  (\n    chunkSize: number\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n    slidingSize(self, chunkSize, 1)\n)\n\n/** @internal */\nexport const slidingSize = dual<\n  (\n    chunkSize: number,\n    stepSize: number\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number, stepSize: number) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(\n  3,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number, stepSize: number): Stream.Stream<Chunk.Chunk<A>, E, R> => {\n    if (chunkSize <= 0 || stepSize <= 0) {\n      return die(\n        new Cause.IllegalArgumentException(\"Invalid bounds - `chunkSize` and `stepSize` must be greater than zero\")\n      )\n    }\n    return new StreamImpl(core.suspend(() => {\n      const queue = new RingBuffer<A>(chunkSize)\n      const emitOnStreamEnd = (\n        queueSize: number,\n        channelEnd: Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown>\n      ) => {\n        if (queueSize < chunkSize) {\n          const items = queue.toChunk()\n          const result = Chunk.isEmpty(items) ? Chunk.empty<Chunk.Chunk<A>>() : Chunk.of(items)\n          return pipe(core.write(result), core.flatMap(() => channelEnd))\n        }\n        const lastEmitIndex = queueSize - (queueSize - chunkSize) % stepSize\n        if (lastEmitIndex === queueSize) {\n          return channelEnd\n        }\n        const leftovers = queueSize - (lastEmitIndex - chunkSize + stepSize)\n        const lastItems = pipe(queue.toChunk(), Chunk.takeRight(leftovers))\n        const result = Chunk.isEmpty(lastItems) ? Chunk.empty<Chunk.Chunk<A>>() : Chunk.of(lastItems)\n        return pipe(core.write(result), core.flatMap(() => channelEnd))\n      }\n      const reader = (\n        queueSize: number\n      ): Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown> =>\n        core.readWithCause({\n          onInput: (input: Chunk.Chunk<A>) =>\n            core.flatMap(\n              core.write(\n                Chunk.filterMap(input, (element, index) => {\n                  queue.put(element)\n                  const currentIndex = queueSize + index + 1\n                  if (currentIndex < chunkSize || (currentIndex - chunkSize) % stepSize > 0) {\n                    return Option.none()\n                  }\n                  return Option.some(queue.toChunk())\n                })\n              ),\n              () => reader(queueSize + input.length)\n            ),\n          onFailure: (cause) => emitOnStreamEnd(queueSize, core.failCause(cause)),\n          onDone: () => emitOnStreamEnd(queueSize, core.void)\n        })\n      return pipe(toChannel(self), core.pipeTo(reader(0)))\n    }))\n  }\n)\n\n/** @internal */\nexport const split: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<Exclude<A, B>>, E, R>\n  <A>(\n    predicate: Predicate<NoInfer<A>>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>\n  <A, E, R, B extends A>(\n    self: Stream.Stream<A, E, R>,\n    refinement: Refinement<A, B>\n  ): Stream.Stream<Chunk.Chunk<Exclude<A, B>>, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<Chunk.Chunk<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    predicate: Predicate<A>\n  ): Stream.Stream<Chunk.Chunk<A>, E, R> => {\n    const split = (\n      leftovers: Chunk.Chunk<A>,\n      input: Chunk.Chunk<A>\n    ): Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown, R> => {\n      const [chunk, remaining] = pipe(leftovers, Chunk.appendAll(input), Chunk.splitWhere(predicate))\n      if (Chunk.isEmpty(chunk) || Chunk.isEmpty(remaining)) {\n        return loop(pipe(chunk, Chunk.appendAll(pipe(remaining, Chunk.drop(1)))))\n      }\n      return pipe(\n        core.write(Chunk.of(chunk)),\n        core.flatMap(() => split(Chunk.empty(), pipe(remaining, Chunk.drop(1))))\n      )\n    }\n    const loop = (\n      leftovers: Chunk.Chunk<A>\n    ): Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown, R> =>\n      core.readWith({\n        onInput: (input: Chunk.Chunk<A>) => split(leftovers, input),\n        onFailure: core.fail,\n        onDone: () => {\n          if (Chunk.isEmpty(leftovers)) {\n            return core.void\n          }\n          if (Option.isNone(pipe(leftovers, Chunk.findFirst(predicate)))) {\n            return channel.zipRight(core.write(Chunk.of(leftovers)), core.void)\n          }\n          return channel.zipRight(\n            split(Chunk.empty(), leftovers),\n            core.void\n          )\n        }\n      })\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop(Chunk.empty()))))\n  }\n)\n\n/** @internal */\nexport const splitOnChunk = dual<\n  <A>(delimiter: Chunk.Chunk<A>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, delimiter: Chunk.Chunk<A>) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, delimiter: Chunk.Chunk<A>): Stream.Stream<Chunk.Chunk<A>, E, R> => {\n  const next = (\n    leftover: Option.Option<Chunk.Chunk<A>>,\n    delimiterIndex: number\n  ): Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown, R> =>\n    core.readWithCause({\n      onInput: (inputChunk: Chunk.Chunk<A>) => {\n        let buffer: Array<Chunk.Chunk<A>> | undefined\n        const [carry, delimiterCursor] = pipe(\n          inputChunk,\n          Chunk.reduce(\n            [pipe(leftover, Option.getOrElse(() => Chunk.empty<A>())), delimiterIndex] as const,\n            ([carry, delimiterCursor], a) => {\n              const concatenated = pipe(carry, Chunk.append(a))\n              if (\n                delimiterCursor < delimiter.length &&\n                Equal.equals(a, pipe(delimiter, Chunk.unsafeGet(delimiterCursor)))\n              ) {\n                if (delimiterCursor + 1 === delimiter.length) {\n                  if (buffer === undefined) {\n                    buffer = []\n                  }\n                  buffer.push(pipe(concatenated, Chunk.take(concatenated.length - delimiter.length)))\n                  return [Chunk.empty<A>(), 0] as const\n                }\n                return [concatenated, delimiterCursor + 1] as const\n              }\n              return [concatenated, Equal.equals(a, pipe(delimiter, Chunk.unsafeGet(0))) ? 1 : 0] as const\n            }\n          )\n        )\n        const output = buffer === undefined ? Chunk.empty<Chunk.Chunk<A>>() : Chunk.unsafeFromArray(buffer)\n        return core.flatMap(\n          core.write(output),\n          () => next(Chunk.isNonEmpty(carry) ? Option.some(carry) : Option.none(), delimiterCursor)\n        )\n      },\n      onFailure: (cause) =>\n        Option.match(leftover, {\n          onNone: () => core.failCause(cause),\n          onSome: (chunk) =>\n            channel.zipRight(\n              core.write(Chunk.of(chunk)),\n              core.failCause(cause)\n            )\n        }),\n      onDone: (done) =>\n        Option.match(leftover, {\n          onNone: () => core.succeed(done),\n          onSome: (chunk) => channel.zipRight(core.write(Chunk.of(chunk)), core.succeed(done))\n        })\n    })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(next(Option.none(), 0))))\n})\n\n/** @internal */\nexport const splitLines = <E, R>(self: Stream.Stream<string, E, R>): Stream.Stream<string, E, R> =>\n  pipeThroughChannel(self, channel.splitLines())\n\n/** @internal */\nexport const succeed = <A>(value: A): Stream.Stream<A> => fromChunk(Chunk.of(value))\n\n/** @internal */\nexport const sync = <A>(evaluate: LazyArg<A>): Stream.Stream<A> => suspend(() => fromChunk(Chunk.of(evaluate())))\n\n/** @internal */\nexport const suspend = <A, E, R>(stream: LazyArg<Stream.Stream<A, E, R>>): Stream.Stream<A, E, R> =>\n  new StreamImpl(core.suspend(() => toChannel(stream())))\n\n/** @internal */\nexport const take = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> => {\n  if (!Number.isInteger(n)) {\n    return die(new Cause.IllegalArgumentException(`${n} must be an integer`))\n  }\n  const loop = (n: number): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> =>\n    core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const taken = pipe(input, Chunk.take(Math.min(n, Number.POSITIVE_INFINITY)))\n        const leftover = Math.max(0, n - taken.length)\n        const more = leftover > 0\n        if (more) {\n          return pipe(core.write(taken), core.flatMap(() => loop(leftover)))\n        }\n        return core.write(taken)\n      },\n      onFailure: core.fail,\n      onDone: core.succeed\n    })\n  return new StreamImpl(\n    pipe(\n      toChannel(self),\n      channel.pipeToOrFail(0 < n ? loop(n) : core.void)\n    )\n  )\n})\n\n/** @internal */\nexport const takeRight = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> => {\n  if (n <= 0) {\n    return empty\n  }\n  return new StreamImpl(\n    pipe(\n      Effect.succeed(new RingBuffer<A>(n)),\n      Effect.map((queue) => {\n        const reader: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, void, unknown> = core.readWith({\n          onInput: (input: Chunk.Chunk<A>) => {\n            for (const element of input) {\n              queue.put(element)\n            }\n            return reader\n          },\n          onFailure: core.fail,\n          onDone: () => pipe(core.write(queue.toChunk()), channel.zipRight(core.void))\n        })\n        return pipe(toChannel(self), core.pipeTo(reader))\n      }),\n      channel.unwrap\n    )\n  )\n})\n\n/** @internal */\nexport const takeUntil: {\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R>\n} = dual(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> => {\n  const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> = core.readWith({\n    onInput: (input: Chunk.Chunk<A>) => {\n      const taken = pipe(input, Chunk.takeWhile((a) => !predicate(a)))\n      const last = pipe(input, Chunk.drop(taken.length), Chunk.take(1))\n      if (Chunk.isEmpty(last)) {\n        return pipe(core.write(taken), core.flatMap(() => loop))\n      }\n      return core.write(pipe(taken, Chunk.appendAll(last)))\n    },\n    onFailure: core.fail,\n    onDone: core.succeed\n  })\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop)))\n})\n\n/** @internal */\nexport const takeUntilEffect: {\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    const loop = (\n      iterator: Iterator<A>\n    ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> => {\n      const next = iterator.next()\n      if (next.done) {\n        return core.readWithCause({\n          onInput: (elem) => loop(elem[Symbol.iterator]()),\n          onFailure: core.failCause,\n          onDone: core.succeed\n        })\n      }\n      return pipe(\n        predicate(next.value),\n        Effect.map((bool) =>\n          bool ?\n            core.write(Chunk.of(next.value)) :\n            pipe(\n              core.write(Chunk.of(next.value)),\n              core.flatMap(() => loop(iterator))\n            )\n        ),\n        channel.unwrap\n      )\n    }\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop(Chunk.empty<A>()[Symbol.iterator]()))))\n  }\n)\n\n/** @internal */\nexport const takeWhile: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>\n  <A, E, R, B extends A>(self: Stream.Stream<A, E, R>, refinement: Refinement<A, B>): Stream.Stream<B, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R>\n} = dual(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> => {\n  const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> = core.readWith({\n    onInput: (input: Chunk.Chunk<A>) => {\n      const taken = pipe(input, Chunk.takeWhile(predicate))\n      const more = taken.length === input.length\n      if (more) {\n        return pipe(core.write(taken), core.flatMap(() => loop))\n      }\n      return core.write(taken)\n    },\n    onFailure: core.fail,\n    onDone: core.succeed\n  })\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop)))\n})\n\n/** @internal */\nexport const tap: {\n  <A, X, E2, R2>(\n    f: (a: NoInfer<A>) => Effect.Effect<X, E2, R2>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: NoInfer<A>) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: NoInfer<A>) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => mapEffectSequential(self, (a) => Effect.as(f(a), a))\n)\n\n/** @internal */\nexport const tapBoth: {\n  <E, X1, E2, R2, A, X2, E3, R3>(\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X1, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X2, E3, R3>\n    }\n  ): <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E | E2 | E3, R | R2 | R3>\n  <A, E, R, X1, E2, R2, X2, E3, R3>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X1, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X2, E3, R3>\n    }\n  ): Stream.Stream<A, E | E2 | E3, R | R2 | R3>\n} = dual(\n  2,\n  <A, E, R, X1, E2, R2, X2, E3, R3>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X1, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X2, E3, R3>\n    }\n  ): Stream.Stream<A, E | E2 | E3, R | R2 | R3> => pipe(self, tapError(options.onFailure), tap(options.onSuccess))\n)\n\n/** @internal */\nexport const tapError: {\n  <E, X, E2, R2>(\n    f: (error: NoInfer<E>) => Effect.Effect<X, E2, R2>\n  ): <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E | E2, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (error: E) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (error: E) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> =>\n    catchAll(self, (error) => fromEffect(Effect.zipRight(f(error), Effect.fail(error))))\n)\n\n/** @internal */\nexport const tapErrorCause: {\n  <E, X, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Effect.Effect<X, E2, R2>\n  ): <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E | E2, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R | R2> = core\n      .readWithCause({\n        onInput: (chunk) => core.flatMap(core.write(chunk), () => loop),\n        onFailure: (cause) => core.fromEffect(Effect.zipRight(f(cause), Effect.failCause(cause))),\n        onDone: core.succeedNow\n      })\n\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop)))\n  }\n)\n\n/** @internal */\nexport const tapSink = dual<\n  <A, E2, R2>(\n    sink: Sink.Sink<unknown, A, unknown, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<unknown, A, unknown, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<unknown, A, unknown, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> =>\n    pipe(\n      fromEffect(Effect.all([Queue.bounded<Take.Take<A, E | E2>>(1), Deferred.make<void>()])),\n      flatMap(([queue, deferred]) => {\n        const right = flattenTake(fromQueue(queue, { maxChunkSize: 1 }))\n        const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core\n          .readWithCause({\n            onInput: (chunk: Chunk.Chunk<A>) =>\n              pipe(\n                core.fromEffect(Queue.offer(queue, InternalTake.chunk(chunk))),\n                core.foldCauseChannel({\n                  onFailure: () => core.flatMap(core.write(chunk), () => channel.identityChannel()),\n                  onSuccess: () => core.flatMap(core.write(chunk), () => loop)\n                })\n              ) as Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2>,\n            onFailure: (cause: Cause.Cause<E | E2>) =>\n              pipe(\n                core.fromEffect(Queue.offer(queue, InternalTake.failCause(cause))),\n                core.foldCauseChannel({\n                  onFailure: () => core.failCause(cause),\n                  onSuccess: () => core.failCause(cause)\n                })\n              ),\n            onDone: () =>\n              pipe(\n                core.fromEffect(Queue.offer(queue, InternalTake.end)),\n                core.foldCauseChannel({\n                  onFailure: () => core.void,\n                  onSuccess: () => core.void\n                })\n              )\n          })\n        return pipe(\n          new StreamImpl(pipe(\n            core.pipeTo(toChannel(self), loop),\n            channel.ensuring(Effect.zipRight(\n              Effect.forkDaemon(Queue.offer(queue, InternalTake.end)),\n              Deferred.await(deferred)\n            ))\n          )),\n          merge(\n            execute(pipe(\n              run(right, sink),\n              Effect.ensuring(Effect.zipRight(\n                Queue.shutdown(queue),\n                Deferred.succeed(deferred, void 0)\n              ))\n            ))\n          )\n        )\n      })\n    )\n)\n\n/** @internal */\nexport const throttle = dual<\n  <A>(\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => number\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => number\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => number\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ): Stream.Stream<A, E, R> =>\n    throttleEffect(self, {\n      ...options,\n      cost: (chunk) => Effect.succeed(options.cost(chunk))\n    })\n)\n\n/** @internal */\nexport const throttleEffect = dual<\n  <A, E2, R2>(\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    if (options.strategy === \"enforce\") {\n      return throttleEnforceEffect(self, options.cost, options.units, options.duration, options.burst ?? 0)\n    }\n    return throttleShapeEffect(self, options.cost, options.units, options.duration, options.burst ?? 0)\n  }\n)\n\nconst throttleEnforceEffect = <A, E, R, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>,\n  units: number,\n  duration: Duration.DurationInput,\n  burst: number\n): Stream.Stream<A, E | E2, R | R2> => {\n  const loop = (\n    tokens: number,\n    timestampMillis: number\n  ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, void, unknown, R2> =>\n    core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          cost(input),\n          Effect.zip(Clock.currentTimeMillis),\n          Effect.map(([weight, currentTimeMillis]) => {\n            const elapsed = currentTimeMillis - timestampMillis\n            const cycles = elapsed / Duration.toMillis(duration)\n            const sum = tokens + (cycles * units)\n            const max = units + burst < 0 ? Number.POSITIVE_INFINITY : units + burst\n            const available = sum < 0 ? max : Math.min(sum, max)\n            if (weight <= available) {\n              return pipe(\n                core.write(input),\n                core.flatMap(() => loop(available - weight, currentTimeMillis))\n              )\n            }\n            return loop(tokens, timestampMillis)\n          }),\n          channel.unwrap\n        ),\n      onFailure: core.failCause,\n      onDone: () => core.void\n    })\n  const throttled = pipe(\n    Clock.currentTimeMillis,\n    Effect.map((currentTimeMillis) => loop(units, currentTimeMillis)),\n    channel.unwrap\n  )\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(throttled)))\n}\n\nconst throttleShapeEffect = <A, E, R, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  costFn: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>,\n  units: number,\n  duration: Duration.DurationInput,\n  burst: number\n): Stream.Stream<A, E | E2, R | R2> => {\n  const loop = (\n    tokens: number,\n    timestampMillis: number\n  ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, void, unknown, R2> =>\n    core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          costFn(input),\n          Effect.zip(Clock.currentTimeMillis),\n          Effect.map(([weight, currentTimeMillis]) => {\n            const elapsed = currentTimeMillis - timestampMillis\n            const cycles = elapsed / Duration.toMillis(duration)\n            const sum = tokens + (cycles * units)\n            const max = units + burst < 0 ? Number.POSITIVE_INFINITY : units + burst\n            const available = sum < 0 ? max : Math.min(sum, max)\n            const remaining = available - weight\n            const waitCycles = remaining >= 0 ? 0 : -remaining / units\n            const delay = Duration.millis(Math.max(0, waitCycles * Duration.toMillis(duration)))\n            if (Duration.greaterThan(delay, Duration.zero)) {\n              return pipe(\n                core.fromEffect(Clock.sleep(delay)),\n                channel.zipRight(core.write(input)),\n                core.flatMap(() => loop(remaining, currentTimeMillis))\n              )\n            }\n            return core.flatMap(\n              core.write(input),\n              () => loop(remaining, currentTimeMillis)\n            )\n          }),\n          channel.unwrap\n        ),\n      onFailure: core.failCause,\n      onDone: () => core.void\n    })\n  const throttled = pipe(\n    Clock.currentTimeMillis,\n    Effect.map((currentTimeMillis) => loop(units, currentTimeMillis)),\n    channel.unwrap\n  )\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(throttled)))\n}\n\n/** @internal */\nexport const tick = (interval: Duration.DurationInput): Stream.Stream<void> =>\n  repeatWithSchedule(void 0, Schedule.spaced(interval))\n\n/** @internal */\nexport const timeout = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput): Stream.Stream<A, E, R> =>\n  pipe(\n    toPull(self),\n    Effect.map(Effect.timeoutFail<Option.Option<E>>({\n      onTimeout: () => Option.none(),\n      duration\n    })),\n    fromPull\n  ))\n\n/** @internal */\nexport const timeoutFail = dual<\n  <E2>(\n    error: LazyArg<E2>,\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    error: LazyArg<E2>,\n    duration: Duration.DurationInput\n  ) => Stream.Stream<A, E2 | E, R>\n>(\n  3,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    error: LazyArg<E2>,\n    duration: Duration.DurationInput\n  ): Stream.Stream<A, E | E2, R> => pipe(self, timeoutTo(duration, failSync(error)))\n)\n\n/** @internal */\nexport const timeoutFailCause = dual<\n  <E2>(\n    cause: LazyArg<Cause.Cause<E2>>,\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    cause: LazyArg<Cause.Cause<E2>>,\n    duration: Duration.DurationInput\n  ) => Stream.Stream<A, E2 | E, R>\n>(\n  3,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    cause: LazyArg<Cause.Cause<E2>>,\n    duration: Duration.DurationInput\n  ): Stream.Stream<A, E | E2, R> =>\n    pipe(\n      toPull(self),\n      Effect.map(\n        Effect.timeoutFailCause<Option.Option<E | E2>>({\n          onTimeout: () => Cause.map(cause(), Option.some),\n          duration\n        })\n      ),\n      fromPull\n    )\n)\n\n/** @internal */\nexport const timeoutTo = dual<\n  <A2, E2, R2>(\n    duration: Duration.DurationInput,\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    duration: Duration.DurationInput,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    duration: Duration.DurationInput,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> => {\n    const StreamTimeout = new Cause.RuntimeException(\"Stream Timeout\")\n    return pipe(\n      self,\n      timeoutFailCause<E | E2>(() => Cause.die(StreamTimeout), duration),\n      catchSomeCause((cause) =>\n        Cause.isDieType(cause) &&\n          Cause.isRuntimeException(cause.defect) &&\n          cause.defect.message !== undefined &&\n          cause.defect.message === \"Stream Timeout\" ?\n          Option.some(that) :\n          Option.none()\n      )\n    )\n  }\n)\n\nconst pubsubFromOptions = <A, E>(\n  options: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<PubSub.PubSub<Take.Take<A, E>>> => {\n  if (typeof options === \"number\") {\n    return PubSub.bounded(options)\n  } else if (options.capacity === \"unbounded\") {\n    return PubSub.unbounded({ replay: options.replay })\n  }\n  switch (options.strategy) {\n    case \"dropping\":\n      return PubSub.dropping(options)\n    case \"sliding\":\n      return PubSub.sliding(options)\n    default:\n      return PubSub.bounded(options)\n  }\n}\n\n/** @internal */\nexport const toPubSub = dual<\n  (\n    capacity: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<PubSub.PubSub<Take.Take<A, E>>, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    capacity: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<PubSub.PubSub<Take.Take<A, E>>, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  capacity: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<PubSub.PubSub<Take.Take<A, E>>, never, Scope.Scope | R> =>\n  pipe(\n    Effect.acquireRelease(pubsubFromOptions<A, E>(capacity), (pubsub) => PubSub.shutdown(pubsub)),\n    Effect.tap((pubsub) => pipe(self, runIntoPubSubScoped(pubsub), Effect.forkScoped))\n  ))\n\n/** @internal */\nexport const toPull = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Effect.Effect<Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>, never, R | Scope.Scope> =>\n  Effect.map(channel.toPull(toChannel(self)), (pull) =>\n    pipe(\n      pull,\n      Effect.mapError(Option.some),\n      Effect.flatMap(Either.match({\n        onLeft: () => Effect.fail(Option.none()),\n        onRight: Effect.succeed\n      }))\n    ))\n\n/** @internal */\nexport const toQueue = dual<\n  (\n    options?: {\n      readonly strategy?: \"suspend\" | \"sliding\" | \"dropping\" | undefined\n      readonly capacity?: number | undefined\n    } | {\n      readonly strategy: \"unbounded\"\n    }\n  ) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, R | Scope.Scope>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options?: {\n      readonly strategy?: \"suspend\" | \"sliding\" | \"dropping\" | undefined\n      readonly capacity?: number | undefined\n    } | {\n      readonly strategy: \"unbounded\"\n    }\n  ) => Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, R | Scope.Scope>\n>((args) => isStream(args[0]), <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  options?: {\n    readonly strategy?: \"suspend\" | \"sliding\" | \"dropping\" | undefined\n    readonly capacity?: number | undefined\n  } | {\n    readonly strategy: \"unbounded\"\n  }\n) =>\n  Effect.tap(\n    Effect.acquireRelease(\n      options?.strategy === \"unbounded\" ?\n        Queue.unbounded<Take.Take<A, E>>() :\n        options?.strategy === \"dropping\" ?\n        Queue.dropping<Take.Take<A, E>>(options.capacity ?? 2) :\n        options?.strategy === \"sliding\" ?\n        Queue.sliding<Take.Take<A, E>>(options.capacity ?? 2) :\n        Queue.bounded<Take.Take<A, E>>(options?.capacity ?? 2),\n      (queue) => Queue.shutdown(queue)\n    ),\n    (queue) => Effect.forkScoped(runIntoQueueScoped(self, queue))\n  ))\n\n/** @internal */\nexport const toQueueOfElements = dual<\n  (options?: {\n    readonly capacity?: number | undefined\n  }) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>, never, R | Scope.Scope>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options?: {\n      readonly capacity?: number | undefined\n    }\n  ) => Effect.Effect<Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>, never, R | Scope.Scope>\n>((args) => isStream(args[0]), <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  options?: {\n    readonly capacity?: number | undefined\n  }\n) =>\n  Effect.tap(\n    Effect.acquireRelease(\n      Queue.bounded<Exit.Exit<A, Option.Option<E>>>(options?.capacity ?? 2),\n      (queue) => Queue.shutdown(queue)\n    ),\n    (queue) => Effect.forkScoped(runIntoQueueElementsScoped(self, queue))\n  ))\n\n/** @internal */\nexport const toReadableStream = dual<\n  <A>(\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => <E>(self: Stream.Stream<A, E>) => ReadableStream<A>,\n  <A, E>(\n    self: Stream.Stream<A, E>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => ReadableStream<A>\n>(\n  (args) => isStream(args[0]),\n  <A, E>(\n    self: Stream.Stream<A, E>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => toReadableStreamRuntime(self, Runtime.defaultRuntime, options)\n)\n\n/** @internal */\nexport const toReadableStreamEffect = dual<\n  <A>(\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<ReadableStream<A>, never, R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => Effect.Effect<ReadableStream<A>, never, R>\n>(\n  (args) => isStream(args[0]),\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => Effect.map(Effect.runtime<R>(), (runtime) => toReadableStreamRuntime(self, runtime, options))\n)\n\n/** @internal */\nexport const toReadableStreamRuntime = dual<\n  <A, XR>(\n    runtime: Runtime.Runtime<XR>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => <E, R extends XR>(self: Stream.Stream<A, E, R>) => ReadableStream<A>,\n  <A, E, XR, R extends XR>(\n    self: Stream.Stream<A, E, R>,\n    runtime: Runtime.Runtime<XR>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => ReadableStream<A>\n>(\n  (args) => isStream(args[0]),\n  <A, E, XR, R extends XR>(\n    self: Stream.Stream<A, E, R>,\n    runtime: Runtime.Runtime<XR>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ): ReadableStream<A> => {\n    const runSync = Runtime.runSync(runtime)\n    const runFork = Runtime.runFork(runtime)\n\n    let pull: Effect.Effect<void, never, R>\n    let scope: Scope.CloseableScope\n    return new ReadableStream<A>({\n      start(controller) {\n        scope = runSync(Scope.make())\n        const pullChunk: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R> = pipe(\n          toPull(self),\n          Scope.extend(scope),\n          runSync,\n          Effect.flatMap((chunk) => Chunk.isEmpty(chunk) ? pullChunk : Effect.succeed(chunk))\n        )\n        pull = pipe(\n          pullChunk,\n          Effect.tap((chunk) =>\n            Effect.sync(() => {\n              Chunk.map(chunk, (a) => {\n                controller.enqueue(a)\n              })\n            })\n          ),\n          Effect.tapErrorCause(() => Scope.close(scope, Exit.void)),\n          Effect.catchTags({\n            \"None\": () =>\n              Effect.sync(() => {\n                controller.close()\n              }),\n            \"Some\": (error) =>\n              Effect.sync(() => {\n                controller.error(error.value)\n              })\n          }),\n          Effect.asVoid\n        )\n      },\n      pull() {\n        return new Promise<void>((resolve) => {\n          runFork(pull, { scope }).addObserver((_) => resolve())\n        })\n      },\n      cancel() {\n        return new Promise<void>((resolve) => {\n          runFork(Scope.close(scope, Exit.void)).addObserver((_) => resolve())\n        })\n      }\n    }, options?.strategy)\n  }\n)\n\n/** @internal */\nexport const transduce = dual<\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ): Stream.Stream<A2, E2 | E, R2 | R> => {\n    const newChannel = core.suspend(() => {\n      const leftovers = { ref: Chunk.empty<Chunk.Chunk<A>>() }\n      const upstreamDone = { ref: false }\n      const buffer: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown> = core.suspend(\n        () => {\n          const leftover = leftovers.ref\n          if (Chunk.isEmpty(leftover)) {\n            return core.readWith({\n              onInput: (input) => pipe(core.write(input), core.flatMap(() => buffer)),\n              onFailure: core.fail,\n              onDone: core.succeedNow\n            })\n          }\n          leftovers.ref = Chunk.empty<Chunk.Chunk<A>>()\n          return pipe(channel.writeChunk(leftover), core.flatMap(() => buffer))\n        }\n      )\n      const concatAndGet = (chunk: Chunk.Chunk<Chunk.Chunk<A>>): Chunk.Chunk<Chunk.Chunk<A>> => {\n        const leftover = leftovers.ref\n        const concatenated = Chunk.appendAll(leftover, Chunk.filter(chunk, (chunk) => chunk.length !== 0))\n        leftovers.ref = concatenated\n        return concatenated\n      }\n      const upstreamMarker: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown> = core\n        .readWith({\n          onInput: (input: Chunk.Chunk<A>) => core.flatMap(core.write(input), () => upstreamMarker),\n          onFailure: core.fail,\n          onDone: (done) =>\n            channel.zipRight(\n              core.sync(() => {\n                upstreamDone.ref = true\n              }),\n              core.succeedNow(done)\n            )\n        })\n      const transducer: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, never, void, unknown, R | R2> = pipe(\n        sink,\n        _sink.toChannel,\n        core.collectElements,\n        core.flatMap(([leftover, z]) =>\n          pipe(\n            core.succeed([upstreamDone.ref, concatAndGet(leftover)] as const),\n            core.flatMap(([done, newLeftovers]) => {\n              const nextChannel = done && Chunk.isEmpty(newLeftovers) ?\n                core.void :\n                transducer\n              return pipe(core.write(Chunk.of(z)), core.flatMap(() => nextChannel))\n            })\n          )\n        )\n      )\n      return pipe(\n        toChannel(self),\n        core.pipeTo(upstreamMarker),\n        core.pipeTo(buffer),\n        channel.pipeToOrFail(transducer)\n      )\n    })\n    return new StreamImpl(newChannel)\n  }\n)\n\n/** @internal */\nexport const unfold = <S, A>(s: S, f: (s: S) => Option.Option<readonly [A, S]>): Stream.Stream<A> =>\n  unfoldChunk(s, (s) => pipe(f(s), Option.map(([a, s]) => [Chunk.of(a), s])))\n\n/** @internal */\nexport const unfoldChunk = <S, A>(\n  s: S,\n  f: (s: S) => Option.Option<readonly [Chunk.Chunk<A>, S]>\n): Stream.Stream<A> => {\n  const loop = (s: S): Channel.Channel<Chunk.Chunk<A>, unknown, never, unknown, unknown, unknown> =>\n    Option.match(f(s), {\n      onNone: () => core.void,\n      onSome: ([chunk, s]) => core.flatMap(core.write(chunk), () => loop(s))\n    })\n  return new StreamImpl(core.suspend(() => loop(s)))\n}\n\n/** @internal */\nexport const unfoldChunkEffect = <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<Option.Option<readonly [Chunk.Chunk<A>, S]>, E, R>\n): Stream.Stream<A, E, R> =>\n  suspend(() => {\n    const loop = (s: S): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R> =>\n      channel.unwrap(\n        Effect.map(\n          f(s),\n          Option.match({\n            onNone: () => core.void,\n            onSome: ([chunk, s]) => core.flatMap(core.write(chunk), () => loop(s))\n          })\n        )\n      )\n    return new StreamImpl(loop(s))\n  })\n\n/** @internal */\nexport const unfoldEffect = <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<Option.Option<readonly [A, S]>, E, R>\n): Stream.Stream<A, E, R> =>\n  unfoldChunkEffect(s, (s) => pipe(f(s), Effect.map(Option.map(([a, s]) => [Chunk.of(a), s]))))\n\nconst void_: Stream.Stream<void> = succeed(void 0)\nexport {\n  /** @internal */\n  void_ as void\n}\n\n/** @internal */\nexport const unwrap = <A, E2, R2, E, R>(\n  effect: Effect.Effect<Stream.Stream<A, E2, R2>, E, R>\n): Stream.Stream<A, E | E2, R | R2> => flatten(fromEffect(effect))\n\n/** @internal */\nexport const unwrapScoped = <A, E2, R2, E, R>(\n  effect: Effect.Effect<Stream.Stream<A, E2, R2>, E, R>\n): Stream.Stream<A, E | E2, Exclude<R, Scope.Scope> | R2> => flatten(scoped(effect))\n\n/** @internal */\nexport const unwrapScopedWith = <A, E2, R2, E, R>(\n  f: (scope: Scope.Scope) => Effect.Effect<Stream.Stream<A, E2, R2>, E, R>\n): Stream.Stream<A, E | E2, R | R2> => flatten(scopedWith((scope) => f(scope)))\n\n/** @internal */\nexport const updateService = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, T | R>,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ) => Stream.Stream<A, E, T | R>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): Stream.Stream<A, E, T | R> =>\n    pipe(\n      self,\n      mapInputContext((context) =>\n        pipe(\n          context,\n          Context.add(tag, f(pipe(context, Context.unsafeGet(tag))))\n        )\n      )\n    )\n)\n\n/** @internal */\nexport const when = dual<\n  (test: LazyArg<boolean>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, test: LazyArg<boolean>) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, test: LazyArg<boolean>): Stream.Stream<A, E, R> =>\n    pipe(self, whenEffect(Effect.sync(test)))\n)\n\n/** @internal */\nexport const whenCase = <A, A2, E, R>(\n  evaluate: LazyArg<A>,\n  pf: (a: A) => Option.Option<Stream.Stream<A2, E, R>>\n) => whenCaseEffect(pf)(Effect.sync(evaluate))\n\n/** @internal */\nexport const whenCaseEffect = dual<\n  <A, A2, E2, R2>(\n    pf: (a: A) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (a: A) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (a: A) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    pipe(\n      fromEffect(self),\n      flatMap((a) => pipe(pf(a), Option.getOrElse(() => empty)))\n    )\n)\n\n/** @internal */\nexport const whenEffect = dual<\n  <E2, R2>(\n    effect: Effect.Effect<boolean, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => pipe(fromEffect(effect), flatMap((bool) => bool ? self : empty))\n)\n\n/** @internal */\nexport const withSpan: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions\n  ): <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions\n  ): Stream.Stream<A, E, Exclude<R, Tracer.ParentSpan>>\n} = function() {\n  const dataFirst = typeof arguments[0] !== \"string\"\n  const name = dataFirst ? arguments[1] : arguments[0]\n  const options = InternalTracer.addSpanStackTrace(dataFirst ? arguments[2] : arguments[1])\n  if (dataFirst) {\n    const self = arguments[0]\n    return new StreamImpl(channel.withSpan(toChannel(self), name, options))\n  }\n  return (self: Stream.Stream<any, any, any>) => new StreamImpl(channel.withSpan(toChannel(self), name, options))\n} as any\n\n/** @internal */\nexport const zip = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<[A, A2], E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<[A, A2], E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<[A, A2], E2 | E, R2 | R> => pipe(self, zipWith(that, (a, a2) => [a, a2]))\n)\n\n/** @internal */\nexport const zipFlatten = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A extends ReadonlyArray<any>, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Stream.Stream<[...A, A2], E2 | E, R2 | R>,\n  <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<[...A, A2], E2 | E, R2 | R>\n>(\n  2,\n  <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<[...A, A2], E2 | E, R2 | R> => pipe(self, zipWith(that, (a, a2) => [...a, a2]))\n)\n\n/** @internal */\nexport const zipAll = dual<\n  <A2, E2, R2, A>(\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<[A, A2], E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n    }\n  ) => Stream.Stream<[A, A2], E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n    }\n  ): Stream.Stream<[A, A2], E2 | E, R2 | R> =>\n    zipAllWith(self, {\n      other: options.other,\n      onSelf: (a) => [a, options.defaultOther],\n      onOther: (a2) => [options.defaultSelf, a2],\n      onBoth: (a, a2) => [a, a2]\n    })\n)\n\n/** @internal */\nexport const zipAllLeft = dual<\n  <A2, E2, R2, A>(\n    that: Stream.Stream<A2, E2, R2>,\n    defaultLeft: A\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    defaultLeft: A\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    other: Stream.Stream<A2, E2, R2>,\n    defaultSelf: A\n  ): Stream.Stream<A, E | E2, R | R2> =>\n    zipAllWith(self, {\n      other,\n      onSelf: identity,\n      onOther: () => defaultSelf,\n      onBoth: (a) => a\n    })\n)\n\n/** @internal */\nexport const zipAllRight = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>,\n    defaultRight: A2\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    defaultRight: A2\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    other: Stream.Stream<A2, E2, R2>,\n    defaultRight: A2\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    zipAllWith(self, {\n      other,\n      onSelf: () => defaultRight,\n      onOther: identity,\n      onBoth: (_, a2) => a2\n    })\n)\n\n/** @internal */\nexport const zipAllSortedByKey = dual<\n  <A2, E2, R2, A, K>(\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ) => <E, R>(\n    self: Stream.Stream<readonly [K, A], E, R>\n  ) => Stream.Stream<[K, [A, A2]], E2 | E, R2 | R>,\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ) => Stream.Stream<[K, [A, A2]], E2 | E, R2 | R>\n>(\n  2,\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ): Stream.Stream<[K, [A, A2]], E2 | E, R2 | R> =>\n    zipAllSortedByKeyWith(self, {\n      other: options.other,\n      onSelf: (a) => [a, options.defaultOther],\n      onOther: (a2) => [options.defaultSelf, a2],\n      onBoth: (a, a2) => [a, a2],\n      order: options.order\n    })\n)\n\n/** @internal */\nexport const zipAllSortedByKeyLeft = dual<\n  <A2, E2, R2, A, K>(\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly order: Order.Order<K>\n    }\n  ) => <E, R>(self: Stream.Stream<readonly [K, A], E, R>) => Stream.Stream<[K, A], E2 | E, R2 | R>,\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly order: Order.Order<K>\n    }\n  ) => Stream.Stream<[K, A], E2 | E, R2 | R>\n>(\n  2,\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly order: Order.Order<K>\n    }\n  ): Stream.Stream<[K, A], E2 | E, R2 | R> =>\n    zipAllSortedByKeyWith(self, {\n      other: options.other,\n      onSelf: identity,\n      onOther: () => options.defaultSelf,\n      onBoth: (a) => a,\n      order: options.order\n    })\n)\n\n/** @internal */\nexport const zipAllSortedByKeyRight = dual<\n  <K, A2, E2, R2>(\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ) => <A, E, R>(self: Stream.Stream<readonly [K, A], E, R>) => Stream.Stream<[K, A2], E2 | E, R2 | R>,\n  <A, E, R, K, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ) => Stream.Stream<[K, A2], E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, K, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ): Stream.Stream<[K, A2], E2 | E, R2 | R> =>\n    zipAllSortedByKeyWith(self, {\n      other: options.other,\n      onSelf: () => options.defaultOther,\n      onOther: identity,\n      onBoth: (_, a2) => a2,\n      order: options.order\n    })\n)\n\n/** @internal */\nexport const zipAllSortedByKeyWith = dual<\n  <K, A2, E2, R2, A, A3>(\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n      readonly order: Order.Order<K>\n    }\n  ) => <E, R>(self: Stream.Stream<readonly [K, A], E, R>) => Stream.Stream<[K, A3], E2 | E, R2 | R>,\n  <K, A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n      readonly order: Order.Order<K>\n    }\n  ) => Stream.Stream<[K, A3], E2 | E, R2 | R>\n>(\n  2,\n  <K, A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n      readonly order: Order.Order<K>\n    }\n  ): Stream.Stream<[K, A3], E2 | E, R2 | R> => {\n    const pull = (\n      state: ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>,\n      pullLeft: Effect.Effect<Chunk.Chunk<readonly [K, A]>, Option.Option<E>, R>,\n      pullRight: Effect.Effect<Chunk.Chunk<readonly [K, A2]>, Option.Option<E2>, R2>\n    ): Effect.Effect<\n      Exit.Exit<\n        readonly [\n          Chunk.Chunk<[K, A3]>,\n          ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>\n        ],\n        Option.Option<E | E2>\n      >,\n      never,\n      R | R2\n    > => {\n      switch (state._tag) {\n        case ZipAllState.OP_DRAIN_LEFT: {\n          return pipe(\n            pullLeft,\n            Effect.match({\n              onFailure: Exit.fail,\n              onSuccess: (leftChunk) =>\n                Exit.succeed(\n                  [\n                    Chunk.map(leftChunk, ([k, a]) => [k, options.onSelf(a)]),\n                    ZipAllState.DrainLeft\n                  ] as const\n                )\n            })\n          )\n        }\n        case ZipAllState.OP_DRAIN_RIGHT: {\n          return pipe(\n            pullRight,\n            Effect.match({\n              onFailure: Exit.fail,\n              onSuccess: (rightChunk) =>\n                Exit.succeed(\n                  [\n                    Chunk.map(rightChunk, ([k, a2]) => [k, options.onOther(a2)]),\n                    ZipAllState.DrainRight\n                  ] as const\n                )\n            })\n          )\n        }\n        case ZipAllState.OP_PULL_BOTH: {\n          return pipe(\n            unsome(pullLeft),\n            Effect.zip(unsome(pullRight), { concurrent: true }),\n            Effect.matchEffect({\n              onFailure: (error) => Effect.succeed(Exit.fail(Option.some(error))),\n              onSuccess: ([leftOption, rightOption]) => {\n                if (Option.isSome(leftOption) && Option.isSome(rightOption)) {\n                  if (Chunk.isEmpty(leftOption.value) && Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.PullBoth, pullLeft, pullRight)\n                  }\n                  if (Chunk.isEmpty(leftOption.value)) {\n                    return pull(ZipAllState.PullLeft(rightOption.value), pullLeft, pullRight)\n                  }\n                  if (Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.PullRight(leftOption.value), pullLeft, pullRight)\n                  }\n                  return Effect.succeed(Exit.succeed(merge(leftOption.value, rightOption.value)))\n                }\n                if (Option.isSome(leftOption) && Option.isNone(rightOption)) {\n                  if (Chunk.isEmpty(leftOption.value)) {\n                    return pull(ZipAllState.DrainLeft, pullLeft, pullRight)\n                  }\n                  return Effect.succeed(\n                    Exit.succeed(\n                      [\n                        pipe(leftOption.value, Chunk.map(([k, a]) => [k, options.onSelf(a)])),\n                        ZipAllState.DrainLeft\n                      ] as const\n                    )\n                  )\n                }\n                if (Option.isNone(leftOption) && Option.isSome(rightOption)) {\n                  if (Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.DrainRight, pullLeft, pullRight)\n                  }\n                  return Effect.succeed(\n                    Exit.succeed(\n                      [\n                        pipe(rightOption.value, Chunk.map(([k, a2]) => [k, options.onOther(a2)])),\n                        ZipAllState.DrainRight\n                      ] as const\n                    )\n                  )\n                }\n                return Effect.succeed(Exit.fail<Option.Option<E | E2>>(Option.none()))\n              }\n            })\n          )\n        }\n        case ZipAllState.OP_PULL_LEFT: {\n          return Effect.matchEffect(pullLeft, {\n            onFailure: Option.match({\n              onNone: () =>\n                Effect.succeed(\n                  Exit.succeed([\n                    pipe(state.rightChunk, Chunk.map(([k, a2]) => [k, options.onOther(a2)])),\n                    ZipAllState.DrainRight\n                  ])\n                ),\n              onSome: (error) =>\n                Effect.succeed<\n                  Exit.Exit<\n                    readonly [\n                      Chunk.Chunk<[K, A3]>,\n                      ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>\n                    ],\n                    Option.Option<E | E2>\n                  >\n                >(Exit.fail(Option.some(error)))\n            }),\n            onSuccess: (leftChunk) =>\n              Chunk.isEmpty(leftChunk) ?\n                pull(ZipAllState.PullLeft(state.rightChunk), pullLeft, pullRight) :\n                Effect.succeed(Exit.succeed(merge(leftChunk, state.rightChunk)))\n          })\n        }\n        case ZipAllState.OP_PULL_RIGHT: {\n          return Effect.matchEffect(pullRight, {\n            onFailure: Option.match({\n              onNone: () =>\n                Effect.succeed(\n                  Exit.succeed(\n                    [\n                      Chunk.map(state.leftChunk, ([k, a]) => [k, options.onSelf(a)]),\n                      ZipAllState.DrainLeft\n                    ] as const\n                  )\n                ),\n              onSome: (error) =>\n                Effect.succeed<\n                  Exit.Exit<\n                    readonly [\n                      Chunk.Chunk<[K, A3]>,\n                      ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>\n                    ],\n                    Option.Option<E | E2>\n                  >\n                >(Exit.fail(Option.some(error)))\n            }),\n            onSuccess: (rightChunk) =>\n              Chunk.isEmpty(rightChunk) ?\n                pull(ZipAllState.PullRight(state.leftChunk), pullLeft, pullRight) :\n                Effect.succeed(Exit.succeed(merge(state.leftChunk, rightChunk)))\n          })\n        }\n      }\n    }\n    const merge = (\n      leftChunk: Chunk.Chunk<readonly [K, A]>,\n      rightChunk: Chunk.Chunk<readonly [K, A2]>\n    ): readonly [\n      Chunk.Chunk<[K, A3]>,\n      ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>\n    ] => {\n      const hasNext = <T>(chunk: Chunk.Chunk<T>, index: number) => index < chunk.length - 1\n      const builder: Array<[K, A3]> = []\n      let state:\n        | ZipAllState.ZipAllState<\n          readonly [K, A],\n          readonly [K, A2]\n        >\n        | undefined = undefined\n      let leftIndex = 0\n      let rightIndex = 0\n      let leftTuple = pipe(leftChunk, Chunk.unsafeGet(leftIndex))\n      let rightTuple = pipe(rightChunk, Chunk.unsafeGet(rightIndex))\n      let k1 = leftTuple[0]\n      let a = leftTuple[1]\n      let k2 = rightTuple[0]\n      let a2 = rightTuple[1]\n      let loop = true\n      while (loop) {\n        const compare = options.order(k1, k2)\n        if (compare === 0) {\n          builder.push([k1, options.onBoth(a, a2)])\n          if (hasNext(leftChunk, leftIndex) && hasNext(rightChunk, rightIndex)) {\n            leftIndex = leftIndex + 1\n            rightIndex = rightIndex + 1\n            leftTuple = pipe(leftChunk, Chunk.unsafeGet(leftIndex))\n            rightTuple = pipe(rightChunk, Chunk.unsafeGet(rightIndex))\n            k1 = leftTuple[0]\n            a = leftTuple[1]\n            k2 = rightTuple[0]\n            a2 = rightTuple[1]\n          } else if (hasNext(leftChunk, leftIndex)) {\n            state = ZipAllState.PullRight(pipe(leftChunk, Chunk.drop(leftIndex + 1)))\n            loop = false\n          } else if (hasNext(rightChunk, rightIndex)) {\n            state = ZipAllState.PullLeft(pipe(rightChunk, Chunk.drop(rightIndex + 1)))\n            loop = false\n          } else {\n            state = ZipAllState.PullBoth\n            loop = false\n          }\n        } else if (compare < 0) {\n          builder.push([k1, options.onSelf(a)])\n          if (hasNext(leftChunk, leftIndex)) {\n            leftIndex = leftIndex + 1\n            leftTuple = pipe(leftChunk, Chunk.unsafeGet(leftIndex))\n            k1 = leftTuple[0]\n            a = leftTuple[1]\n          } else {\n            const rightBuilder: Array<readonly [K, A2]> = []\n            rightBuilder.push(rightTuple)\n            while (hasNext(rightChunk, rightIndex)) {\n              rightIndex = rightIndex + 1\n              rightTuple = pipe(rightChunk, Chunk.unsafeGet(rightIndex))\n              rightBuilder.push(rightTuple)\n            }\n            state = ZipAllState.PullLeft(Chunk.unsafeFromArray(rightBuilder))\n            loop = false\n          }\n        } else {\n          builder.push([k2, options.onOther(a2)])\n          if (hasNext(rightChunk, rightIndex)) {\n            rightIndex = rightIndex + 1\n            rightTuple = pipe(rightChunk, Chunk.unsafeGet(rightIndex))\n            k2 = rightTuple[0]\n            a2 = rightTuple[1]\n          } else {\n            const leftBuilder: Array<readonly [K, A]> = []\n            leftBuilder.push(leftTuple)\n            while (hasNext(leftChunk, leftIndex)) {\n              leftIndex = leftIndex + 1\n              leftTuple = pipe(leftChunk, Chunk.unsafeGet(leftIndex))\n              leftBuilder.push(leftTuple)\n            }\n            state = ZipAllState.PullRight(Chunk.unsafeFromArray(leftBuilder))\n            loop = false\n          }\n        }\n      }\n      return [Chunk.unsafeFromArray(builder), state!]\n    }\n    return combineChunks(self, options.other, ZipAllState.PullBoth, pull)\n  }\n)\n\n/** @internal */\nexport const zipAllWith = dual<\n  <A2, E2, R2, A, A3>(\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n    }\n  ) => Stream.Stream<A3, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n    }\n  ): Stream.Stream<A3, E2 | E, R2 | R> => {\n    const pull = (\n      state: ZipAllState.ZipAllState<A, A2>,\n      pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>,\n      pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R2>\n    ): Effect.Effect<\n      Exit.Exit<readonly [Chunk.Chunk<A3>, ZipAllState.ZipAllState<A, A2>], Option.Option<E | E2>>,\n      never,\n      R | R2\n    > => {\n      switch (state._tag) {\n        case ZipAllState.OP_DRAIN_LEFT: {\n          return Effect.matchEffect(pullLeft, {\n            onFailure: (error) => Effect.succeed(Exit.fail(error)),\n            onSuccess: (leftChunk) =>\n              Effect.succeed(Exit.succeed(\n                [\n                  Chunk.map(leftChunk, options.onSelf),\n                  ZipAllState.DrainLeft\n                ] as const\n              ))\n          })\n        }\n        case ZipAllState.OP_DRAIN_RIGHT: {\n          return Effect.matchEffect(pullRight, {\n            onFailure: (error) => Effect.succeed(Exit.fail(error)),\n            onSuccess: (rightChunk) =>\n              Effect.succeed(Exit.succeed(\n                [\n                  Chunk.map(rightChunk, options.onOther),\n                  ZipAllState.DrainRight\n                ] as const\n              ))\n          })\n        }\n        case ZipAllState.OP_PULL_BOTH: {\n          return pipe(\n            unsome(pullLeft),\n            Effect.zip(unsome(pullRight), { concurrent: true }),\n            Effect.matchEffect({\n              onFailure: (error) => Effect.succeed(Exit.fail(Option.some(error))),\n              onSuccess: ([leftOption, rightOption]) => {\n                if (Option.isSome(leftOption) && Option.isSome(rightOption)) {\n                  if (Chunk.isEmpty(leftOption.value) && Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.PullBoth, pullLeft, pullRight)\n                  }\n                  if (Chunk.isEmpty(leftOption.value)) {\n                    return pull(ZipAllState.PullLeft(rightOption.value), pullLeft, pullRight)\n                  }\n                  if (Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.PullRight(leftOption.value), pullLeft, pullRight)\n                  }\n                  return Effect.succeed(Exit.succeed(zip(leftOption.value, rightOption.value, options.onBoth)))\n                }\n                if (Option.isSome(leftOption) && Option.isNone(rightOption)) {\n                  return Effect.succeed(Exit.succeed(\n                    [\n                      Chunk.map(leftOption.value, options.onSelf),\n                      ZipAllState.DrainLeft\n                    ] as const\n                  ))\n                }\n                if (Option.isNone(leftOption) && Option.isSome(rightOption)) {\n                  return Effect.succeed(Exit.succeed(\n                    [\n                      Chunk.map(rightOption.value, options.onOther),\n                      ZipAllState.DrainRight\n                    ] as const\n                  ))\n                }\n                return Effect.succeed(Exit.fail<Option.Option<E | E2>>(Option.none()))\n              }\n            })\n          )\n        }\n        case ZipAllState.OP_PULL_LEFT: {\n          return Effect.matchEffect(pullLeft, {\n            onFailure: Option.match({\n              onNone: () =>\n                Effect.succeed(Exit.succeed(\n                  [\n                    Chunk.map(state.rightChunk, options.onOther),\n                    ZipAllState.DrainRight\n                  ] as const\n                )),\n              onSome: (error) =>\n                Effect.succeed<\n                  Exit.Exit<readonly [Chunk.Chunk<A3>, ZipAllState.ZipAllState<A, A2>], Option.Option<E | E2>>\n                >(\n                  Exit.fail(Option.some(error))\n                )\n            }),\n            onSuccess: (leftChunk) => {\n              if (Chunk.isEmpty(leftChunk)) {\n                return pull(ZipAllState.PullLeft(state.rightChunk), pullLeft, pullRight)\n              }\n              if (Chunk.isEmpty(state.rightChunk)) {\n                return pull(ZipAllState.PullRight(leftChunk), pullLeft, pullRight)\n              }\n              return Effect.succeed(Exit.succeed(zip(leftChunk, state.rightChunk, options.onBoth)))\n            }\n          })\n        }\n        case ZipAllState.OP_PULL_RIGHT: {\n          return Effect.matchEffect(pullRight, {\n            onFailure: Option.match({\n              onNone: () =>\n                Effect.succeed(\n                  Exit.succeed(\n                    [\n                      Chunk.map(state.leftChunk, options.onSelf),\n                      ZipAllState.DrainLeft\n                    ] as const\n                  )\n                ),\n              onSome: (error) =>\n                Effect.succeed<\n                  Exit.Exit<readonly [Chunk.Chunk<A3>, ZipAllState.ZipAllState<A, A2>], Option.Option<E | E2>>\n                >(\n                  Exit.fail(Option.some(error))\n                )\n            }),\n            onSuccess: (rightChunk) => {\n              if (Chunk.isEmpty(rightChunk)) {\n                return pull(\n                  ZipAllState.PullRight(state.leftChunk),\n                  pullLeft,\n                  pullRight\n                )\n              }\n              if (Chunk.isEmpty(state.leftChunk)) {\n                return pull(\n                  ZipAllState.PullLeft(rightChunk),\n                  pullLeft,\n                  pullRight\n                )\n              }\n              return Effect.succeed(Exit.succeed(zip(state.leftChunk, rightChunk, options.onBoth)))\n            }\n          })\n        }\n      }\n    }\n    const zip = (\n      leftChunk: Chunk.Chunk<A>,\n      rightChunk: Chunk.Chunk<A2>,\n      f: (a: A, a2: A2) => A3\n    ): readonly [Chunk.Chunk<A3>, ZipAllState.ZipAllState<A, A2>] => {\n      const [output, either] = zipChunks(leftChunk, rightChunk, f)\n      switch (either._tag) {\n        case \"Left\": {\n          if (Chunk.isEmpty(either.left)) {\n            return [output, ZipAllState.PullBoth] as const\n          }\n          return [output, ZipAllState.PullRight(either.left)] as const\n        }\n        case \"Right\": {\n          if (Chunk.isEmpty(either.right)) {\n            return [output, ZipAllState.PullBoth] as const\n          }\n          return [output, ZipAllState.PullLeft(either.right)] as const\n        }\n      }\n    }\n    return combineChunks(self, options.other, ZipAllState.PullBoth, pull)\n  }\n)\n\n/** @internal */\nexport const zipLatest: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<[AL, AR], EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<[AL, AR], EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<[AL, AR], EL | ER, RL | RR> => pipe(left, zipLatestWith(right, (a, a2) => [a, a2]))\n)\n\nexport const zipLatestAll = <T extends ReadonlyArray<Stream.Stream<any, any, any>>>(\n  ...streams: T\n): Stream.Stream<\n  [T[number]] extends [never] ? never\n    : { [K in keyof T]: T[K] extends Stream.Stream<infer A, infer _E, infer _R> ? A : never },\n  [T[number]] extends [never] ? never : T[number] extends Stream.Stream<infer _A, infer _E, infer _R> ? _E : never,\n  [T[number]] extends [never] ? never : T[number] extends Stream.Stream<infer _A, infer _E, infer _R> ? _R : never\n> => {\n  if (streams.length === 0) {\n    return empty\n  } else if (streams.length === 1) {\n    return map(streams[0]!, (x) => [x]) as any\n  }\n  const [head, ...tail] = streams\n  return zipLatestWith(\n    head,\n    zipLatestAll(...tail),\n    (first, second) => [first, ...second]\n  ) as any\n}\n\n/** @internal */\nexport const zipLatestWith: {\n  <AR, ER, RR, AL, A>(\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): <EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<A, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR>\n} = dual(\n  3,\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR> => {\n    const pullNonEmpty = <_R, _E, _A>(\n      pull: Effect.Effect<Chunk.Chunk<_A>, Option.Option<_E>, _R>\n    ): Effect.Effect<Chunk.Chunk<_A>, Option.Option<_E>, _R> =>\n      pipe(pull, Effect.flatMap((chunk) => Chunk.isEmpty(chunk) ? pullNonEmpty(pull) : Effect.succeed(chunk)))\n    return pipe(\n      toPull(left),\n      Effect.map(pullNonEmpty),\n      Effect.zip(pipe(toPull(right), Effect.map(pullNonEmpty))),\n      Effect.flatMap(([left, right]) =>\n        pipe(\n          fromEffectOption<readonly [Chunk.Chunk<AL>, Chunk.Chunk<AR>, boolean], EL | ER, RL | RR>(\n            Effect.raceWith(left, right, {\n              onSelfDone: (leftDone, rightFiber) =>\n                pipe(\n                  Effect.suspend(() => leftDone),\n                  Effect.zipWith(Fiber.join(rightFiber), (l, r) => [l, r, true] as const)\n                ),\n              onOtherDone: (rightDone, leftFiber) =>\n                pipe(\n                  Effect.suspend(() => rightDone),\n                  Effect.zipWith(Fiber.join(leftFiber), (l, r) => [r, l, false] as const)\n                )\n            })\n          ),\n          flatMap(([l, r, leftFirst]) =>\n            pipe(\n              fromEffect(\n                Ref.make([Chunk.unsafeLast(l), Chunk.unsafeLast(r)] as const)\n              ),\n              flatMap((latest) =>\n                pipe(\n                  fromChunk(\n                    leftFirst ?\n                      pipe(r, Chunk.map((a2) => f(Chunk.unsafeLast(l), a2))) :\n                      pipe(l, Chunk.map((a) => f(a, Chunk.unsafeLast(r))))\n                  ),\n                  concat(\n                    pipe(\n                      repeatEffectOption(left),\n                      mergeEither(repeatEffectOption(right)),\n                      mapEffectSequential(Either.match({\n                        onLeft: (leftChunk) =>\n                          pipe(\n                            Ref.modify(latest, ([_, rightLatest]) =>\n                              [\n                                pipe(leftChunk, Chunk.map((a) => f(a, rightLatest))),\n                                [Chunk.unsafeLast(leftChunk), rightLatest] as const\n                              ] as const)\n                          ),\n                        onRight: (rightChunk) =>\n                          pipe(\n                            Ref.modify(latest, ([leftLatest, _]) =>\n                              [\n                                pipe(rightChunk, Chunk.map((a2) => f(leftLatest, a2))),\n                                [leftLatest, Chunk.unsafeLast(rightChunk)] as const\n                              ] as const)\n                          )\n                      })),\n                      flatMap(fromChunk)\n                    )\n                  )\n                )\n              )\n            )\n          ),\n          toPull\n        )\n      ),\n      fromPull\n    )\n  }\n)\n\n/** @internal */\nexport const zipLeft: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AL, ER | EL, RR | RL>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR> =>\n    pipe(\n      left,\n      zipWithChunks(right, (left, right) => {\n        if (left.length > right.length) {\n          return [\n            pipe(left, Chunk.take(right.length)),\n            Either.left(pipe(left, Chunk.take(right.length)))\n          ] as const\n        }\n        return [\n          left,\n          Either.right(pipe(right, Chunk.drop(left.length)))\n        ]\n      })\n    )\n)\n\n/** @internal */\nexport const zipRight: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AR, ER | EL, RR | RL>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR> =>\n    pipe(\n      left,\n      zipWithChunks(right, (left, right) => {\n        if (left.length > right.length) {\n          return [\n            right,\n            Either.left(pipe(left, Chunk.take(right.length)))\n          ] as const\n        }\n        return [\n          pipe(right, Chunk.take(left.length)),\n          Either.right(pipe(right, Chunk.drop(left.length)))\n        ]\n      })\n    )\n)\n\n/** @internal */\nexport const zipWith: {\n  <AR, ER, RR, AL, A>(\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): <EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<A, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR>\n} = dual(\n  3,\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR> =>\n    pipe(left, zipWithChunks(right, (leftChunk, rightChunk) => zipChunks(leftChunk, rightChunk, f)))\n)\n\n/** @internal */\nexport const zipWithChunks = dual<\n  <A2, E2, R2, A, A3>(\n    that: Stream.Stream<A2, E2, R2>,\n    f: (\n      left: Chunk.Chunk<A>,\n      right: Chunk.Chunk<A2>\n    ) => readonly [Chunk.Chunk<A3>, Either.Either<Chunk.Chunk<A2>, Chunk.Chunk<A>>]\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    f: (\n      left: Chunk.Chunk<A>,\n      right: Chunk.Chunk<A2>\n    ) => readonly [Chunk.Chunk<A3>, Either.Either<Chunk.Chunk<A2>, Chunk.Chunk<A>>]\n  ) => Stream.Stream<A3, E2 | E, R2 | R>\n>(3, <A, E, R, A2, E2, R2, A3>(\n  self: Stream.Stream<A, E, R>,\n  that: Stream.Stream<A2, E2, R2>,\n  f: (\n    left: Chunk.Chunk<A>,\n    right: Chunk.Chunk<A2>\n  ) => readonly [Chunk.Chunk<A3>, Either.Either<Chunk.Chunk<A2>, Chunk.Chunk<A>>]\n): Stream.Stream<A3, E2 | E, R2 | R> => {\n  const pull = (\n    state: ZipChunksState.ZipChunksState<A, A2>,\n    pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>,\n    pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R2>\n  ): Effect.Effect<\n    Exit.Exit<readonly [Chunk.Chunk<A3>, ZipChunksState.ZipChunksState<A, A2>], Option.Option<E | E2>>,\n    never,\n    R | R2\n  > => {\n    switch (state._tag) {\n      case ZipChunksState.OP_PULL_BOTH: {\n        return pipe(\n          unsome(pullLeft),\n          Effect.zip(unsome(pullRight), { concurrent: true }),\n          Effect.matchEffect({\n            onFailure: (error) => Effect.succeed(Exit.fail(Option.some(error))),\n            onSuccess: ([leftOption, rightOption]) => {\n              if (Option.isSome(leftOption) && Option.isSome(rightOption)) {\n                if (Chunk.isEmpty(leftOption.value) && Chunk.isEmpty(rightOption.value)) {\n                  return pull(ZipChunksState.PullBoth, pullLeft, pullRight)\n                }\n                if (Chunk.isEmpty(leftOption.value)) {\n                  return pull(ZipChunksState.PullLeft(rightOption.value), pullLeft, pullRight)\n                }\n                if (Chunk.isEmpty(rightOption.value)) {\n                  return pull(ZipChunksState.PullRight(leftOption.value), pullLeft, pullRight)\n                }\n                return Effect.succeed(Exit.succeed(zip(leftOption.value, rightOption.value)))\n              }\n              return Effect.succeed(Exit.fail(Option.none()))\n            }\n          })\n        )\n      }\n      case ZipChunksState.OP_PULL_LEFT: {\n        return Effect.matchEffect(pullLeft, {\n          onFailure: (error) => Effect.succeed(Exit.fail(error)),\n          onSuccess: (leftChunk) => {\n            if (Chunk.isEmpty(leftChunk)) {\n              return pull(ZipChunksState.PullLeft(state.rightChunk), pullLeft, pullRight)\n            }\n            if (Chunk.isEmpty(state.rightChunk)) {\n              return pull(ZipChunksState.PullRight(leftChunk), pullLeft, pullRight)\n            }\n            return Effect.succeed(Exit.succeed(zip(leftChunk, state.rightChunk)))\n          }\n        })\n      }\n      case ZipChunksState.OP_PULL_RIGHT: {\n        return Effect.matchEffect(pullRight, {\n          onFailure: (error) => Effect.succeed(Exit.fail(error)),\n          onSuccess: (rightChunk) => {\n            if (Chunk.isEmpty(rightChunk)) {\n              return pull(ZipChunksState.PullRight(state.leftChunk), pullLeft, pullRight)\n            }\n            if (Chunk.isEmpty(state.leftChunk)) {\n              return pull(ZipChunksState.PullLeft(rightChunk), pullLeft, pullRight)\n            }\n            return Effect.succeed(Exit.succeed(zip(state.leftChunk, rightChunk)))\n          }\n        })\n      }\n    }\n  }\n  const zip = (\n    leftChunk: Chunk.Chunk<A>,\n    rightChunk: Chunk.Chunk<A2>\n  ): readonly [Chunk.Chunk<A3>, ZipChunksState.ZipChunksState<A, A2>] => {\n    const [output, either] = f(leftChunk, rightChunk)\n    switch (either._tag) {\n      case \"Left\": {\n        if (Chunk.isEmpty(either.left)) {\n          return [output, ZipChunksState.PullBoth] as const\n        }\n        return [output, ZipChunksState.PullRight(either.left)] as const\n      }\n      case \"Right\": {\n        if (Chunk.isEmpty(either.right)) {\n          return [output, ZipChunksState.PullBoth] as const\n        }\n        return [output, ZipChunksState.PullLeft(either.right)] as const\n      }\n    }\n  }\n  return pipe(\n    self,\n    combineChunks(that, ZipChunksState.PullBoth, pull)\n  )\n})\n\n/** @internal */\nexport const zipWithIndex = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<[A, number], E, R> =>\n  pipe(self, mapAccum(0, (index, a) => [index + 1, [a, index]]))\n\n/** @internal */\nexport const zipWithNext = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Stream.Stream<[A, Option.Option<A>], E, R> => {\n  const process = (\n    last: Option.Option<A>\n  ): Channel.Channel<Chunk.Chunk<readonly [A, Option.Option<A>]>, Chunk.Chunk<A>, never, never, void, unknown> =>\n    core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const [newLast, chunk] = Chunk.mapAccum(\n          input,\n          last,\n          (prev, curr) => [Option.some(curr), pipe(prev, Option.map((a) => [a, curr] as const))] as const\n        )\n        const output = Chunk.filterMap(\n          chunk,\n          (option) =>\n            Option.isSome(option) ?\n              Option.some([option.value[0], Option.some(option.value[1])] as const) :\n              Option.none()\n        )\n        return core.flatMap(\n          core.write(output),\n          () => process(newLast)\n        )\n      },\n      onFailure: core.failCause,\n      onDone: () =>\n        Option.match(last, {\n          onNone: () => core.void,\n          onSome: (value) =>\n            channel.zipRight(\n              core.write(Chunk.of<readonly [A, Option.Option<A>]>([value, Option.none()])),\n              core.void\n            )\n        })\n    })\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(process(Option.none()))))\n}\n\n/** @internal */\nexport const zipWithPrevious = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Stream.Stream<[Option.Option<A>, A], E, R> =>\n  pipe(\n    self,\n    mapAccum<Option.Option<A>, A, [Option.Option<A>, A]>(\n      Option.none(),\n      (prev, curr) => [Option.some(curr), [prev, curr]]\n    )\n  )\n\n/** @internal */\nexport const zipWithPreviousAndNext = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Stream.Stream<[Option.Option<A>, A, Option.Option<A>], E, R> =>\n  pipe(\n    zipWithNext(zipWithPrevious(self)),\n    map(([[prev, curr], next]) => [prev, curr, pipe(next, Option.map((tuple) => tuple[1]))])\n  )\n\n/** @internal */\nconst zipChunks = <A, B, C>(\n  left: Chunk.Chunk<A>,\n  right: Chunk.Chunk<B>,\n  f: (a: A, b: B) => C\n): [Chunk.Chunk<C>, Either.Either<Chunk.Chunk<B>, Chunk.Chunk<A>>] => {\n  if (left.length > right.length) {\n    return [\n      pipe(left, Chunk.take(right.length), Chunk.zipWith(right, f)),\n      Either.left(pipe(left, Chunk.drop(right.length)))\n    ]\n  }\n  return [\n    pipe(left, Chunk.zipWith(pipe(right, Chunk.take(left.length)), f)),\n    Either.right(pipe(right, Chunk.drop(left.length)))\n  ]\n}\n\n// Do notation\n\n/** @internal */\nexport const Do: Stream.Stream<{}> = succeed({})\n\n/** @internal */\nexport const bind = dual<\n  <N extends string, A, B, E2, R2>(\n    tag: Exclude<N, keyof A>,\n    f: (_: NoInfer<A>) => Stream.Stream<B, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<\n    { [K in keyof A | N]: K extends keyof A ? A[K] : B },\n    E | E2,\n    R | R2\n  >,\n  <A, E, R, N extends string, B, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: Exclude<N, keyof A>,\n    f: (_: NoInfer<A>) => Stream.Stream<B, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n    }\n  ) => Stream.Stream<\n    { [K in keyof A | N]: K extends keyof A ? A[K] : B },\n    E | E2,\n    R | R2\n  >\n>((args) => typeof args[0] !== \"string\", <A, E, R, N extends string, B, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  tag: Exclude<N, keyof A>,\n  f: (_: A) => Stream.Stream<B, E2, R2>,\n  options?: {\n    readonly concurrency?: number | \"unbounded\" | undefined\n    readonly bufferSize?: number | undefined\n  }\n) =>\n  flatMap(self, (k) =>\n    map(\n      f(k),\n      (a) => ({ ...k, [tag]: a } as { [K in keyof A | N]: K extends keyof A ? A[K] : B })\n    ), options))\n\n/* @internal */\nexport const bindTo: {\n  <N extends string>(name: N): <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<{ [K in N]: A }, E, R>\n  <A, E, R, N extends string>(self: Stream.Stream<A, E, R>, name: N): Stream.Stream<{ [K in N]: A }, E, R>\n} = doNotation.bindTo<Stream.StreamTypeLambda>(map)\n\n/* @internal */\nexport const let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Stream.Stream<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n  <A extends object, E, R, N extends string, B>(\n    self: Stream.Stream<A, E, R>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Stream.Stream<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n} = doNotation.let_<Stream.StreamTypeLambda>(map)\n\n// Circular with Channel\n\n/** @internal */\nexport const channelToStream = <OutElem, OutErr, OutDone, Env>(\n  self: Channel.Channel<Chunk.Chunk<OutElem>, unknown, OutErr, unknown, OutDone, unknown, Env>\n): Stream.Stream<OutElem, OutErr, Env> => {\n  return new StreamImpl(self)\n}\n\n// =============================================================================\n// encoding\n// =============================================================================\n\n/** @internal */\nexport const decodeText = dual<\n  (encoding?: string) => <E, R>(self: Stream.Stream<Uint8Array, E, R>) => Stream.Stream<string, E, R>,\n  <E, R>(self: Stream.Stream<Uint8Array, E, R>, encoding?: string) => Stream.Stream<string, E, R>\n>((args) => isStream(args[0]), (self, encoding = \"utf-8\") =>\n  suspend(() => {\n    const decoder = new TextDecoder(encoding)\n    return map(self, (s) => decoder.decode(s))\n  }))\n\n/** @internal */\nexport const encodeText = <E, R>(self: Stream.Stream<string, E, R>): Stream.Stream<Uint8Array, E, R> =>\n  suspend(() => {\n    const encoder = new TextEncoder()\n    return map(self, (s) => encoder.encode(s))\n  })\n\n/** @internal */\nexport const fromEventListener = <A = unknown>(\n  target: Stream.EventListener<A>,\n  type: string,\n  options?: boolean | {\n    readonly capture?: boolean\n    readonly passive?: boolean\n    readonly once?: boolean\n    readonly bufferSize?: number | \"unbounded\" | undefined\n  } | undefined\n): Stream.Stream<A> =>\n  asyncPush<A>((emit) =>\n    Effect.acquireRelease(\n      Effect.sync(() => target.addEventListener(type, emit.single as any, options)),\n      () => Effect.sync(() => target.removeEventListener(type, emit.single, options))\n    ), { bufferSize: typeof options === \"object\" ? options.bufferSize : undefined })\n"],"names":["Cause","Chunk","Clock","Context","Deferred","Duration","Effect","Either","Equal","Exit","Fiber","FiberRef","constTrue","dual","identity","pipe","Layer","MergeDecision","Option","pipeArguments","hasProperty","PubSub","Queue","RcRef","Ref","Runtime","Schedule","Scope","HaltStrategy","TPubSub","TQueue","Tuple","channel","channelExecutor","MergeStrategy","core","doNotation","RingBuffer","_sink","DebounceState","emit","haltStrategy","Handoff","HandoffSignal","pull","SinkEndReason","ZipAllState","ZipChunksState","InternalTake","InternalTracer","StreamSymbolKey","StreamTypeId","Symbol","for","streamVariance","_R","_","_E","_A","StreamImpl","constructor","arguments","isStream","u","isEffect","DefaultChunkSize","accumulate","self","chunks","accumulateChunks","accumulator","s","readWith","onInput","input","next","appendAll","flatMap","write","onFailure","fail","onDone","void","pipeTo","toChannel","empty","acquireRelease","acquire","release","scoped","aggregate","sink","aggregateWithin","forever","schedule","filterMap","aggregateWithinEither","match","onLeft","none","onRight","some","layer","all","make","ScheduleEnd","driver","fromEffect","handoff","sinkEndReason","sinkLeftovers","scheduleDriver","consumed","endAfterEmit","handoffProducer","readWithCause","offer","when","isNonEmpty","cause","halt","end","UpstreamEnd","handoffConsumer","getAndSet","leftovers","set","zipRight","succeed","take","map","signal","_tag","OP_EMIT","elements","get","bool","OP_HALT","failCause","OP_END","reason","OP_SCHEDULE_END","unwrap","timeout","lastB","scheduledAggregator","sinkFiber","scheduleFiber","scope","forkSink","pipeToOrFail","collectElements","run","forkIn","handleSide","b","c","flatten","wasConsumed","toWrite","onNone","of","right","onSome","left","OP_UPSTREAM_END","raceWith","join","onSelfDone","sinkExit","interrupt","suspend","onOtherDone","scheduleExit","matchCauseEffect","failureOrCause","forkDaemon","onSuccess","unwrapScopedWith","as","value","queueFromBufferOptions","bufferSize","unbounded","undefined","bounded","strategy","dropping","sliding","_async","register","queue","shutdown","output","runtime","sync","runPromiseExit","canceler","resume","fromPull","asVoid","then","exit","isFailure","isInterrupted","squash","loop","done","maybeError","error","chunk","fromChannel","ensuring","unwrapScoped","asyncEffect","k","queueFromBufferOptionsPush","options","asyncPush","tap","getWith","currentScheduler","scheduler","makePush","item","isExit","isSuccess","unsafeFromArray","asyncScoped","ref","isDone","onError","repeatEffectChunkOption","branchAfter","n","f","buffering","acc","nextSize","length","b1","b2","splitAt","running","prefix","leftover","identityChannel","broadcast","maximumLag","broadcastedQueues","tuple","flattenTake","fromQueue","broadcastDynamic","toPubSub","pubsub","fromPubSub","share","idleTimeToLive","rcRef","pubsubFromOptions","Array","from","subscribe","forkScoped","runIntoPubSubScoped","broadcastedQueuesDynamic","buffer","capacity","bufferUnbounded","bufferDropping","bufferSliding","toQueueOfElements","process","flipCauseOption","bufferChunks","bufferChunksDropping","bufferChunksSliding","toQueue","onEnd","bufferSignal","rechunk","bufferChannel","producer","terminate","await","deferred","added","consumer","start","runScoped","catchAll","catchAllCause","catchSome","pf","getOrElse","catchSomeCause","catchTag","e","catchTags","cases","keys","Object","includes","changes","changesWith","x","y","equals","writer","last","newLast","newChunk","reduce","option","outputs","isSome","append","changesWithEffect","mapChunks","chunksWith","flattenChunks","unsome","effect","asSome","o","succeedNone","combine","that","latch","latchL","concatMap","writeChunk","runIn","rightL","latchR","pullLeft","pullRight","unfoldEffect","combineChunks","__","unfoldChunkEffect","concat","concatAll","streams","cross","crossWith","a","a2","crossLeft","crossRight","debounce","duration","gen","enqueue","sleep","fiber","previous","elem","state","OP_NOT_STARTED","OP_PREVIOUS","handoffFiber","leftExit","current","rightExit","OP_CURRENT","scopedWith","notStarted","die","defect","dieSync","evaluate","dieMessage","message","distributedWith","distributedWithDynamic","decide","range","size","id","key","entries","mappings","queues","reduceRight","Map","mapping","prepend","distributedWithDynamicId","newDistributedWithDynamicId","distributedWithDynamicCallback","values","forEach","queuesRef","$","shouldProcess","ids","update","delete","queuesLock","makeSemaphore","newQueue","finalize","endTake","withPermits","fromIterable","runForEachScoped","drain","drainFork","backgroundDied","interruptWhenDeferred","drop","r","dropped","Math","max","more","isEmpty","dropRight","identityStream","reader","head","put","dropUntil","predicate","dropWhile","dropUntilEffect","succeedNow","dropWhileEffect","either","finalizer","ensuringWith","context","contextWith","contextWithEffect","mapEffectSequential","contextWithStream","execute","fromEffectOption","failSync","failCauseSync","filter","filterEffect","iterator","filterMapEffect","filterMapWhile","mapped","filterMapWhileEffect","find","findFirst","findEffect","args","switch","matchConcurrency","concurrency","flatMapParSwitchBuffer","mergeMap","out","sequential","Number","MAX_SAFE_INTEGER","mergeStrategy","BufferSliding","flattenEffect","unordered","mapOutEffectPar","mapOut","flattenExitOption","processChunk","cont","toEmit","rest","splitWhere","flattenIterables","repeated","fromAsyncIterable","iterable","asyncIterator","return","promise","repeatEffectOption","tryPromise","try","catch","result","stream","TypeError","fromChunk","fromChunkPubSub","fromChunkQueue","isShutdown","fromChunks","mapError","maxChunkSize","fromTPubSub","subscribeScoped","fromTQueue","isChunk","fromIteratorSucceed","fromIterableEffect","builder","count","push","takeBetween","fromSchedule","fromReadableStream","releaseLockOnEnd","getReader","releaseLock","cancel","read","fromReadableStreamByob","allocSize","mode","readChunkStreamByobReader","EOF","ArrayBuffer","paginateEffect","offset","Uint8Array","byteLength","newOffset","groupAdjacentBy","groupAdjacentByChunk","until","previousChunk","unsafeGet","updatedKey","additionalChunk","slice","group","nonEmptyChunk","groupAdjacent","updatedState","grouped","chunkSize","groupedWithin","collectAllN","spaced","haltWhen","poll","haltAfter","haltWhenDeferred","interleave","interleaveWith","decider","zip","leftDone","rightDone","intersperse","element","isFirst","flagResult","intersperseAffixes","middle","interruptAfter","interruptWhen","iterate","unfold","mapAccum","nextS","mapAccumEffect","mapBoth","mapChunksEffect","mapOutEffect","mapConcat","mapConcatChunk","mapConcatChunkEffect","mapConcatEffect","mapEffectPar","mapErrorCause","merge","mergeWith","onSelf","onOther","mergeAll","mergeWithTag","mergeEither","mergeLeft","mergeRight","other","fromInput","Both","handler","Done","Await","mkString","never","cleanup","onStart","orDie","orDieWith","orElse","orElseEither","orElseFail","orElseIfEmpty","orElseIfEmptyChunk","orElseIfEmptyStream","orElseSucceed","paginate","paginateChunk","page","paginateChunkEffect","peel","foldSink","collectLeftover","z","tapErrorCause","partition","partitionEither","queue1","queue2","pipeThrough","pipeThroughChannel","pipeThroughChannelOrFail","chan","provideContext","provideLayer","buildWithScope","env","provideService","tag","resource","provideServiceEffect","provideServiceStream","service","add","mapInputContext","provideSomeLayer","min","go","remaining","race","raceAll","winner","index","takeWhile","unsafeDone","target","rechunkProcess","StreamRechunker","rechunker","writeAll","emitIfNotEmpty","pos","refineOrDie","refineOrDieWith","repeat","repeatEither","repeatEffect","repeatEffectChunk","repeatWith","onElement","onSchedule","repeatElements","repeatElementsWith","feed","step","advance","reset","repeatValue","scheduleOutput","repeatWithSchedule","repeatEffectWithSchedule","matchEffect","nextA","retry","runDrain","runCollect","collectAll","runCount","runFold","runFoldWhile","runFoldEffect","runFoldWhileEffect","runFoldScoped","runFoldWhileScoped","runFoldScopedEffect","runFoldWhileScopedEffect","fold","foldEffect","runForEach","runForEachChunk","forEachChunk","runForEachChunkScoped","runForEachWhile","forEachWhile","runForEachWhileScoped","runHead","runIntoPubSub","runIntoQueue","runIntoQueueScoped","runIntoQueueElementsScoped","offerAll","runLast","runSum","sum","scan","scanEffect","scanReduce","scanReduceEffect","scheduleWith","zipLeft","someOrFail","someOrElse","fallback","slidingSize","stepSize","IllegalArgumentException","emitOnStreamEnd","queueSize","channelEnd","items","toChunk","lastEmitIndex","lastItems","takeRight","currentIndex","split","isNone","splitOnChunk","delimiter","delimiterIndex","inputChunk","carry","delimiterCursor","concatenated","splitLines","isInteger","taken","POSITIVE_INFINITY","takeUntil","takeUntilEffect","tapBoth","tapError","tapSink","foldCauseChannel","throttle","throttleEffect","cost","throttleEnforceEffect","units","burst","throttleShapeEffect","tokens","timestampMillis","currentTimeMillis","weight","elapsed","cycles","toMillis","available","throttled","costFn","waitCycles","delay","millis","greaterThan","zero","tick","interval","toPull","timeoutFail","onTimeout","timeoutTo","timeoutFailCause","StreamTimeout","RuntimeException","isDieType","isRuntimeException","replay","toReadableStream","toReadableStreamRuntime","defaultRuntime","toReadableStreamEffect","runSync","runFork","ReadableStream","controller","pullChunk","extend","close","None","Promise","resolve","addObserver","transduce","newChannel","upstreamDone","concatAndGet","upstreamMarker","transducer","newLeftovers","nextChannel","unfoldChunk","void_","updateService","test","whenEffect","whenCase","whenCaseEffect","withSpan","dataFirst","name","addSpanStackTrace","zipWith","zipFlatten","zipAll","zipAllWith","defaultOther","defaultSelf","onBoth","zipAllLeft","zipAllRight","defaultRight","zipAllSortedByKey","zipAllSortedByKeyWith","order","zipAllSortedByKeyLeft","zipAllSortedByKeyRight","OP_DRAIN_LEFT","leftChunk","DrainLeft","OP_DRAIN_RIGHT","rightChunk","DrainRight","OP_PULL_BOTH","concurrent","leftOption","rightOption","PullBoth","PullLeft","PullRight","OP_PULL_LEFT","OP_PULL_RIGHT","hasNext","leftIndex","rightIndex","leftTuple","rightTuple","k1","k2","compare","rightBuilder","leftBuilder","zipChunks","zipLatest","zipLatestWith","zipLatestAll","tail","first","second","pullNonEmpty","rightFiber","l","leftFiber","leftFirst","unsafeLast","latest","modify","rightLatest","leftLatest","zipWithChunks","zipWithIndex","zipWithNext","prev","curr","zipWithPrevious","zipWithPreviousAndNext","Do","bind","bindTo","let_","channelToStream","decodeText","encoding","decoder","TextDecoder","decode","encodeText","encoder","TextEncoder","encode","fromEventListener","type","addEventListener","single","removeEventListener"],"mappings":"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","ignoreList":[0],"debugId":null}}]
}