{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Desktop/project/Business-Directory/Business-Directory/frontend/src/app/api/uploadthing/core.ts"],"sourcesContent":["import { createUploadthing, type FileRouter } from \"uploadthing/next\";\r\nimport { UploadThingError } from \"uploadthing/server\";\r\n\r\nconst f = createUploadthing();\r\n\r\nconst auth = (req: Request) => ({ id: \"fakeId\" }); // Fake auth function\r\n\r\nexport const ourFileRouter = {\r\n  imageUploader: f({\r\n    image: {\r\n      maxFileSize: \"4MB\",\r\n      maxFileCount: 1,\r\n    },\r\n  })\r\n    .middleware(async ({ req }) => {\r\n      const user = await auth(req);\r\n\r\n      if (!user) throw new UploadThingError(\"Unauthorized\");\r\n\r\n      return { userId: user.id };\r\n    })\r\n    .onUploadComplete(async ({ metadata, file }) => {\r\n      console.log(\"Upload complete for userId:\", metadata.userId);\r\n\r\n      console.log(\"file url\", file.ufsUrl);\r\n      return { uploadedBy: metadata.userId };\r\n    }),\r\n} satisfies FileRouter;\r\n\r\nexport type OurFileRouter = typeof ourFileRouter;\r\n"],"names":[],"mappings":";;;AAAA;;;AAGA,MAAM,IAAI,CAAA,GAAA,8JAAA,CAAA,oBAAiB,AAAD;AAE1B,MAAM,OAAO,CAAC,MAAiB,CAAC;QAAE,IAAI;IAAS,CAAC,GAAG,qBAAqB;AAEjE,MAAM,gBAAgB;IAC3B,eAAe,EAAE;QACf,OAAO;YACL,aAAa;YACb,cAAc;QAChB;IACF,GACG,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE;QACxB,MAAM,OAAO,MAAM,KAAK;QAExB,uCAAW;;QAA0C;QAErD,OAAO;YAAE,QAAQ,KAAK,EAAE;QAAC;IAC3B,GACC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;QACzC,QAAQ,GAAG,CAAC,+BAA+B,SAAS,MAAM;QAE1D,QAAQ,GAAG,CAAC,YAAY,KAAK,MAAM;QACnC,OAAO;YAAE,YAAY,SAAS,MAAM;QAAC;IACvC;AACJ","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Desktop/project/Business-Directory/Business-Directory/frontend/src/app/api/uploadthing/route.ts"],"sourcesContent":["import { createRouteHandler } from \"uploadthing/next\";\r\n\r\nimport { ourFileRouter } from \"./core\";\r\n\r\nexport const { GET, POST } = createRouteHandler({\r\n  router: ourFileRouter,\r\n});\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;AAEO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,8JAAA,CAAA,qBAAkB,AAAD,EAAE;IAC9C,QAAQ,0IAAA,CAAA,gBAAa;AACvB","debugId":null}}]
}